
pnguy092_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f4  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	95 c1       	rjmp	.+810    	; 0x3d6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
    
void Tick();


int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    DDRA = 0x00; PORTA = 0xFF;
  b6:	81 e2       	ldi	r24, 0x21	; 33
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
  be:	82 e2       	ldi	r24, 0x22	; 34
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
    DDRB = 0xFF; PORTB = 0x00;
  c8:	84 e2       	ldi	r24, 0x24	; 36
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	85 e2       	ldi	r24, 0x25	; 37
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
    DDRC = 0xFF; PORTC = 0x00;
  da:	87 e2       	ldi	r24, 0x27	; 39
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	10 82       	st	Z, r1
    state = INIT;
  ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    while (1) 
    {
        Tick();
  f4:	01 d0       	rcall	.+2      	; 0xf8 <Tick>
    }
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0x46>

000000f8 <Tick>:
}

void Tick(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    switch(state){ //transitions
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	91 05       	cpc	r25, r1
 10c:	09 f4       	brne	.+2      	; 0x110 <Tick+0x18>
 10e:	45 c0       	rjmp	.+138    	; 0x19a <Tick+0xa2>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	91 05       	cpc	r25, r1
 114:	28 f4       	brcc	.+10     	; 0x120 <Tick+0x28>
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	79 f0       	breq	.+30     	; 0x138 <Tick+0x40>
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	a1 f0       	breq	.+40     	; 0x146 <Tick+0x4e>
                state = START;
            }
            break;
            
        default:
            break;
 11e:	f5 c0       	rjmp	.+490    	; 0x30a <Tick+0x212>
        Tick();
    }
}

void Tick(){
    switch(state){ //transitions
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	91 05       	cpc	r25, r1
 124:	09 f4       	brne	.+2      	; 0x128 <Tick+0x30>
 126:	bf c0       	rjmp	.+382    	; 0x2a6 <Tick+0x1ae>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	91 05       	cpc	r25, r1
 12c:	08 f4       	brcc	.+2      	; 0x130 <Tick+0x38>
 12e:	5e c0       	rjmp	.+188    	; 0x1ec <Tick+0xf4>
 130:	05 97       	sbiw	r24, 0x05	; 5
 132:	09 f4       	brne	.+2      	; 0x136 <Tick+0x3e>
 134:	d1 c0       	rjmp	.+418    	; 0x2d8 <Tick+0x1e0>
                state = START;
            }
            break;
            
        default:
            break;
 136:	e9 c0       	rjmp	.+466    	; 0x30a <Tick+0x212>
}

void Tick(){
    switch(state){ //transitions
        case INIT:
            state = START;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 144:	e2 c0       	rjmp	.+452    	; 0x30a <Tick+0x212>
        case START:
            if((PINA & 0x07) == 0x04){
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	87 70       	andi	r24, 0x07	; 7
 154:	99 27       	eor	r25, r25
 156:	04 97       	sbiw	r24, 0x04	; 4
 158:	39 f4       	brne	.+14     	; 0x168 <Tick+0x70>
                state = WAIT;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
                state = LOCK;
            }
            else{
                state = START;
            }
            break;
 166:	d1 c0       	rjmp	.+418    	; 0x30a <Tick+0x212>
            break;
        case START:
            if((PINA & 0x07) == 0x04){
                state = WAIT;
            }
            else if((PINA & 0x87) == 0x80){
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	87 78       	andi	r24, 0x87	; 135
 176:	99 27       	eor	r25, r25
 178:	80 38       	cpi	r24, 0x80	; 128
 17a:	91 05       	cpc	r25, r1
 17c:	39 f4       	brne	.+14     	; 0x18c <Tick+0x94>
                state = LOCK;
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = START;
            }
            break;
 18a:	bf c0       	rjmp	.+382    	; 0x30a <Tick+0x212>
            }
            else if((PINA & 0x87) == 0x80){
                state = LOCK;
            }
            else{
                state = START;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 198:	b8 c0       	rjmp	.+368    	; 0x30a <Tick+0x212>
        case WAIT:
            if((PINA & 0x07) == 0x04){
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	87 70       	andi	r24, 0x07	; 7
 1a8:	99 27       	eor	r25, r25
 1aa:	04 97       	sbiw	r24, 0x04	; 4
 1ac:	39 f4       	brne	.+14     	; 0x1bc <Tick+0xc4>
                state = WAIT;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = START;
				
            }
            break;
 1ba:	a7 c0       	rjmp	.+334    	; 0x30a <Tick+0x212>
        case WAIT:
            if((PINA & 0x07) == 0x04){
                state = WAIT;
				
            }
            else if((PINA & 0x07) == 0x00){
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	87 70       	andi	r24, 0x07	; 7
 1ca:	99 27       	eor	r25, r25
 1cc:	89 2b       	or	r24, r25
 1ce:	39 f4       	brne	.+14     	; 0x1de <Tick+0xe6>
                state = HASH;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = START;
				
            }
            break;
 1dc:	96 c0       	rjmp	.+300    	; 0x30a <Tick+0x212>
            else if((PINA & 0x07) == 0x00){
                state = HASH;
			
            }
            else{
                state = START;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				
            }
            break;
 1ea:	8f c0       	rjmp	.+286    	; 0x30a <Tick+0x212>
        case HASH:
            if((PINA & 0x07) == 0x02){
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	87 70       	andi	r24, 0x07	; 7
 1fa:	99 27       	eor	r25, r25
 1fc:	02 97       	sbiw	r24, 0x02	; 2
 1fe:	39 f4       	brne	.+14     	; 0x20e <Tick+0x116>
                state = UNLOCKED;
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				state = START;
			}
            else{
                state = HASH;
            }
            break;
 20c:	7e c0       	rjmp	.+252    	; 0x30a <Tick+0x212>
            break;
        case HASH:
            if((PINA & 0x07) == 0x02){
                state = UNLOCKED;
            }
            else if((PINA & 0x87) == 0x80){
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	87 78       	andi	r24, 0x87	; 135
 21c:	99 27       	eor	r25, r25
 21e:	80 38       	cpi	r24, 0x80	; 128
 220:	91 05       	cpc	r25, r1
 222:	39 f4       	brne	.+14     	; 0x232 <Tick+0x13a>
                state = LOCK;
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				state = START;
			}
            else{
                state = HASH;
            }
            break;
 230:	6c c0       	rjmp	.+216    	; 0x30a <Tick+0x212>
                state = UNLOCKED;
            }
            else if((PINA & 0x87) == 0x80){
                state = LOCK;
            }
            else if((PINA & 0x07) == 0x01){ //if they hit two buttons, like x&y, or hit x, or all 3
 232:	80 e2       	ldi	r24, 0x20	; 32
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	88 2f       	mov	r24, r24
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	87 70       	andi	r24, 0x07	; 7
 240:	99 27       	eor	r25, r25
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	39 f4       	brne	.+14     	; 0x254 <Tick+0x15c>
                state = START;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				state = START;
			}
            else{
                state = HASH;
            }
            break;
 252:	5b c0       	rjmp	.+182    	; 0x30a <Tick+0x212>
                state = LOCK;
            }
            else if((PINA & 0x07) == 0x01){ //if they hit two buttons, like x&y, or hit x, or all 3
                state = START;
            }
			else if((PINA & 0x07) == 0x03){
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	87 70       	andi	r24, 0x07	; 7
 262:	99 27       	eor	r25, r25
 264:	03 97       	sbiw	r24, 0x03	; 3
 266:	39 f4       	brne	.+14     	; 0x276 <Tick+0x17e>
				state = START;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				state = START;
			}
            else{
                state = HASH;
            }
            break;
 274:	4a c0       	rjmp	.+148    	; 0x30a <Tick+0x212>
                state = START;
            }
			else if((PINA & 0x07) == 0x03){
				state = START;
			}
			else if((PINA & 0x07) == 0x07){
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	80 81       	ld	r24, Z
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	87 70       	andi	r24, 0x07	; 7
 284:	99 27       	eor	r25, r25
 286:	07 97       	sbiw	r24, 0x07	; 7
 288:	39 f4       	brne	.+14     	; 0x298 <Tick+0x1a0>
				state = START;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 292:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
            else{
                state = HASH;
            }
            break;
 296:	39 c0       	rjmp	.+114    	; 0x30a <Tick+0x212>
			}
			else if((PINA & 0x07) == 0x07){
				state = START;
			}
            else{
                state = HASH;
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 2a4:	32 c0       	rjmp	.+100    	; 0x30a <Tick+0x212>
        case UNLOCKED:
            if((PINA & 0x87) == 0x80){
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	87 78       	andi	r24, 0x87	; 135
 2b4:	99 27       	eor	r25, r25
 2b6:	80 38       	cpi	r24, 0x80	; 128
 2b8:	91 05       	cpc	r25, r1
 2ba:	39 f4       	brne	.+14     	; 0x2ca <Tick+0x1d2>
                state = LOCK;
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = UNLOCKED;
            }
            break;
 2c8:	20 c0       	rjmp	.+64     	; 0x30a <Tick+0x212>
        case UNLOCKED:
            if((PINA & 0x87) == 0x80){
                state = LOCK;
            }
            else{
                state = UNLOCKED;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <Tick+0x212>
        case LOCK:
            if((PINA & 0x87) == 0x80){ //if they keep holding then keep it here
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	87 78       	andi	r24, 0x87	; 135
 2e6:	99 27       	eor	r25, r25
 2e8:	80 38       	cpi	r24, 0x80	; 128
 2ea:	91 05       	cpc	r25, r1
 2ec:	39 f4       	brne	.+14     	; 0x2fc <Tick+0x204>
                state = LOCK;
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = START;
            }
            break;
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <Tick+0x210>
        case LOCK:
            if((PINA & 0x87) == 0x80){ //if they keep holding then keep it here
                state = LOCK;
            }
            else{
                state = START;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 308:	00 00       	nop
            
        
        
    }
    
    switch(state){ //actions
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	91 05       	cpc	r25, r1
 316:	49 f1       	breq	.+82     	; 0x36a <Tick+0x272>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	91 05       	cpc	r25, r1
 31c:	28 f4       	brcc	.+10     	; 0x328 <Tick+0x230>
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	69 f0       	breq	.+26     	; 0x33c <Tick+0x244>
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	a1 f0       	breq	.+40     	; 0x34e <Tick+0x256>
        case LOCK:
            PORTB = 0x05;
            PORTC = LOCK;
			break;
        default:
            break;
 326:	53 c0       	rjmp	.+166    	; 0x3ce <Tick+0x2d6>
            
        
        
    }
    
    switch(state){ //actions
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	91 05       	cpc	r25, r1
 32c:	d1 f1       	breq	.+116    	; 0x3a2 <Tick+0x2aa>
 32e:	84 30       	cpi	r24, 0x04	; 4
 330:	91 05       	cpc	r25, r1
 332:	48 f1       	brcs	.+82     	; 0x386 <Tick+0x28e>
 334:	05 97       	sbiw	r24, 0x05	; 5
 336:	09 f4       	brne	.+2      	; 0x33a <Tick+0x242>
 338:	3f c0       	rjmp	.+126    	; 0x3b8 <Tick+0x2c0>
        case LOCK:
            PORTB = 0x05;
            PORTC = LOCK;
			break;
        default:
            break;
 33a:	49 c0       	rjmp	.+146    	; 0x3ce <Tick+0x2d6>
        
    }
    
    switch(state){ //actions
        case INIT:
            PORTC = 0x00;
 33c:	88 e2       	ldi	r24, 0x28	; 40
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	10 82       	st	Z, r1
            PORTB = 0x00;
 344:	85 e2       	ldi	r24, 0x25	; 37
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	10 82       	st	Z, r1
            break;
 34c:	40 c0       	rjmp	.+128    	; 0x3ce <Tick+0x2d6>
        case START:
            PORTC = 0x01;
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
            PORTB = PORTB;
 358:	85 e2       	ldi	r24, 0x25	; 37
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	25 e2       	ldi	r18, 0x25	; 37
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	f9 01       	movw	r30, r18
 362:	20 81       	ld	r18, Z
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
            break;
 368:	32 c0       	rjmp	.+100    	; 0x3ce <Tick+0x2d6>
        case WAIT:
            PORTC = 0x02;
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	22 e0       	ldi	r18, 0x02	; 2
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
            PORTB = PORTB;
 374:	85 e2       	ldi	r24, 0x25	; 37
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	25 e2       	ldi	r18, 0x25	; 37
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	f9 01       	movw	r30, r18
 37e:	20 81       	ld	r18, Z
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
			break;
 384:	24 c0       	rjmp	.+72     	; 0x3ce <Tick+0x2d6>
        case HASH:
            PORTC = 0x03;
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	23 e0       	ldi	r18, 0x03	; 3
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
            PORTB = PORTB;
 390:	85 e2       	ldi	r24, 0x25	; 37
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	25 e2       	ldi	r18, 0x25	; 37
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
			break;
 3a0:	16 c0       	rjmp	.+44     	; 0x3ce <Tick+0x2d6>
        case UNLOCKED:
            PORTB = 0x01;
 3a2:	85 e2       	ldi	r24, 0x25	; 37
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
            PORTC = 0x04;
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	24 e0       	ldi	r18, 0x04	; 4
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
			break;
 3b6:	0b c0       	rjmp	.+22     	; 0x3ce <Tick+0x2d6>
        case LOCK:
            PORTB = 0x05;
 3b8:	85 e2       	ldi	r24, 0x25	; 37
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	25 e0       	ldi	r18, 0x05	; 5
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
            PORTC = LOCK;
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	25 e0       	ldi	r18, 0x05	; 5
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18
			break;
 3cc:	00 00       	nop
            break;
                
              
    }
  
}
 3ce:	00 00       	nop
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
