
pnguy092_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a2  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000794  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	73 c0       	rjmp	.+230    	; 0x182 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	29 97       	sbiw	r28, 0x09	; 9
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
  ba:	82 e2       	ldi	r24, 0x22	; 34
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18

	DDRC = 0xFF; PORTC = 0x00; //Port C is output of parking
  c4:	87 e2       	ldi	r24, 0x27	; 39
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	88 e2       	ldi	r24, 0x28	; 40
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
	
    unsigned char tmpA0 = 0x00; // Temporary variable to hold the value of A
  d6:	1e 82       	std	Y+6, r1	; 0x06
	unsigned char tmpA1 = 0x00; // Temporary variable to hold the value of A
  d8:	1f 82       	std	Y+7, r1	; 0x07
	unsigned char tmpA2 = 0x00; // Temporary variable to hold the value of A
  da:	18 86       	std	Y+8, r1	; 0x08
	unsigned char tmpA3 = 0x00; // Temporary variable to hold the value of A
  dc:	19 86       	std	Y+9, r1	; 0x09
	
	
    while (1)
    {
		//4 available spots
		unsigned char full = 0x00;
  de:	19 82       	std	Y+1, r1	; 0x01
		unsigned char tmpC0 = 0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tmpC1 = 0x02;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	8b 83       	std	Y+3, r24	; 0x03
		unsigned char tmpC2 = 0x04;
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	8c 83       	std	Y+4, r24	; 0x04
		unsigned char tmpC3 = 0x08;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	8d 83       	std	Y+5, r24	; 0x05
		
		tmpA0 = PINA & 0x01;
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	8e 83       	std	Y+6, r24	; 0x06
		tmpA1 = PINA & 0x02;
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
 104:	82 70       	andi	r24, 0x02	; 2
 106:	8f 83       	std	Y+7, r24	; 0x07
		tmpA2 = PINA & 0x04;
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	84 70       	andi	r24, 0x04	; 4
 112:	88 87       	std	Y+8, r24	; 0x08
		tmpA3 = PINA & 0x08;
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	88 70       	andi	r24, 0x08	; 8
 11e:	89 87       	std	Y+9, r24	; 0x09
		
		if(tmpA0 == 0x01){
 120:	8e 81       	ldd	r24, Y+6	; 0x06
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	21 f4       	brne	.+8      	; 0x12e <main+0x90>
			full++;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
			tmpC0 = 0x00;
 12c:	1a 82       	std	Y+2, r1	; 0x02
		}
		if(tmpA1 == 0x02){
 12e:	8f 81       	ldd	r24, Y+7	; 0x07
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	21 f4       	brne	.+8      	; 0x13c <main+0x9e>
			full++;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	89 83       	std	Y+1, r24	; 0x01
			tmpC1 = 0x00;
 13a:	1b 82       	std	Y+3, r1	; 0x03
		}
		if(tmpA2 == 0x04){
 13c:	88 85       	ldd	r24, Y+8	; 0x08
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	21 f4       	brne	.+8      	; 0x14a <main+0xac>
			full++;
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	89 83       	std	Y+1, r24	; 0x01
			tmpC2 = 0x00;
 148:	1c 82       	std	Y+4, r1	; 0x04
		}
		if(tmpA3 == 0x08){
 14a:	89 85       	ldd	r24, Y+9	; 0x09
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	21 f4       	brne	.+8      	; 0x158 <main+0xba>
			full++;
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	89 83       	std	Y+1, r24	; 0x01
			tmpC3 = 0x00;
 156:	1d 82       	std	Y+5, r1	; 0x05
		}
		
		if(full == 0x04){
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	31 f4       	brne	.+12     	; 0x16a <main+0xcc>
			PORTC = 0xFF;
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	ba cf       	rjmp	.-140    	; 0xde <main+0x40>
		}
		else{
			PORTC = tmpC0 | tmpC1 | tmpC2 | tmpC3;	
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	3a 81       	ldd	r19, Y+2	; 0x02
 170:	2b 81       	ldd	r18, Y+3	; 0x03
 172:	32 2b       	or	r19, r18
 174:	2c 81       	ldd	r18, Y+4	; 0x04
 176:	32 2b       	or	r19, r18
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	23 2b       	or	r18, r19
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
		}
	  

    }
 180:	ae cf       	rjmp	.-164    	; 0xde <main+0x40>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
