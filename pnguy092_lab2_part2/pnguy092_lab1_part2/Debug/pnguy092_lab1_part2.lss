
pnguy092_lab1_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000878  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000794  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5f c0       	rjmp	.+190    	; 0x15a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0xa>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
  b4:	82 e2       	ldi	r24, 0x22	; 34
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18

	DDRC = 0xFF; PORTC = 0x00; //Port C is output of parking
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	
    unsigned char tmpA0 = 0x00; // Temporary variable to hold the value of A
  d0:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char tmpA1 = 0x00; // Temporary variable to hold the value of A
  d2:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char tmpA2 = 0x00; // Temporary variable to hold the value of A
  d4:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char tmpA3 = 0x00; // Temporary variable to hold the value of A
  d6:	1e 82       	std	Y+6, r1	; 0x06
	unsigned char full = 0x00;
  d8:	19 82       	std	Y+1, r1	; 0x01
	
    while (1)
    {
		//4 available spots
		full = 0x00;
  da:	19 82       	std	Y+1, r1	; 0x01
		unsigned char cntavail = 0x04;
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	8a 83       	std	Y+2, r24	; 0x02
		
		tmpA0 = PINA & 0x01;
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	8b 83       	std	Y+3, r24	; 0x03
		tmpA1 = PINA & 0x02;
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	82 70       	andi	r24, 0x02	; 2
  f6:	8c 83       	std	Y+4, r24	; 0x04
		tmpA2 = PINA & 0x04;
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	80 81       	ld	r24, Z
 100:	84 70       	andi	r24, 0x04	; 4
 102:	8d 83       	std	Y+5, r24	; 0x05
		tmpA3 = PINA & 0x08;
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	88 70       	andi	r24, 0x08	; 8
 10e:	8e 83       	std	Y+6, r24	; 0x06
		
		if(tmpA0 == 0x01){
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x7e>
			cntavail--;
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(tmpA1 == 0x02){
 11c:	8c 81       	ldd	r24, Y+4	; 0x04
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	19 f4       	brne	.+6      	; 0x128 <main+0x8a>
			cntavail--;
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	81 50       	subi	r24, 0x01	; 1
 126:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(tmpA2 == 0x04){
 128:	8d 81       	ldd	r24, Y+5	; 0x05
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	19 f4       	brne	.+6      	; 0x134 <main+0x96>
			cntavail--;
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	81 50       	subi	r24, 0x01	; 1
 132:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(tmpA3 == 0x08){
 134:	8e 81       	ldd	r24, Y+6	; 0x06
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	19 f4       	brne	.+6      	; 0x140 <main+0xa2>
			cntavail--;
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(cntavail == 0x00){
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	88 23       	and	r24, r24
 144:	11 f4       	brne	.+4      	; 0x14a <main+0xac>
			full = 0x80;
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	89 83       	std	Y+1, r24	; 0x01
		
		/*
		this outputs in binary how many spots
		are left in the parking spaces
		*/
		PORTC = cntavail | full;
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	3a 81       	ldd	r19, Y+2	; 0x02
 150:	29 81       	ldd	r18, Y+1	; 0x01
 152:	23 2b       	or	r18, r19
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
	  

    }
 158:	c0 cf       	rjmp	.-128    	; 0xda <main+0x3c>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
