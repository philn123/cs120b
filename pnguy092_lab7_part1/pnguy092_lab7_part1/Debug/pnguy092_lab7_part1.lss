
pnguy092_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  0000070a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a84  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000682  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c1       	rjmp	.+648    	; 0x2be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d1       	rcall	.+792    	; 0x3dc <main>
  c4:	d4 c2       	rjmp	.+1448   	; 0x66e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_init>:
	SREG |= 0x80;
}

void TimerOff(){
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	82 d0       	rcall	.+260    	; 0x1da <delay_ms>
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0d d0       	rcall	.+26     	; 0xf4 <LCD_WriteCommand>
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0b d0       	rcall	.+22     	; 0xf4 <LCD_WriteCommand>
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	09 d0       	rcall	.+18     	; 0xf4 <LCD_WriteCommand>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	07 d0       	rcall	.+14     	; 0xf4 <LCD_WriteCommand>
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	77 d0       	rcall	.+238    	; 0x1da <delay_ms>
  ec:	00 00       	nop
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_WriteCommand>:
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2b e2       	ldi	r18, 0x2B	; 43
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	2f 7b       	andi	r18, 0xBF	; 191
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
 11c:	8b e2       	ldi	r24, 0x2B	; 43
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2b e2       	ldi	r18, 0x2B	; 43
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	2f 77       	andi	r18, 0x7F	; 127
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	49 d0       	rcall	.+146    	; 0x1da <delay_ms>
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_WriteData>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2b e2       	ldi	r18, 0x2B	; 43
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	20 64       	ori	r18, 0x40	; 64
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2b e2       	ldi	r18, 0x2B	; 43
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	20 68       	ori	r18, 0x80	; 128
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	00 00       	nop
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	2f 77       	andi	r18, 0x7F	; 127
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	1a d0       	rcall	.+52     	; 0x1da <delay_ms>
 1a6:	00 00       	nop
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_Cursor>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	81 31       	cpi	r24, 0x11	; 17
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <LCD_Cursor+0x1a>
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	81 58       	subi	r24, 0x81	; 129
 1c6:	96 df       	rcall	.-212    	; 0xf4 <LCD_WriteCommand>
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <LCD_Cursor+0x20>
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	81 55       	subi	r24, 0x51	; 81
 1ce:	92 df       	rcall	.-220    	; 0xf4 <LCD_WriteCommand>
 1d0:	00 00       	nop
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <delay_ms>:
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <delay_ms+0x6>
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <delay_ms+0x8>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <delay_ms+0xa>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	9e 83       	std	Y+6, r25	; 0x06
 1ea:	8d 83       	std	Y+5, r24	; 0x05
 1ec:	1a 82       	std	Y+2, r1	; 0x02
 1ee:	19 82       	std	Y+1, r1	; 0x01
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <delay_ms+0x3e>
 1f2:	1c 82       	std	Y+4, r1	; 0x04
 1f4:	1b 82       	std	Y+3, r1	; 0x03
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <delay_ms+0x2a>
 1f8:	00 00       	nop
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	9c 81       	ldd	r25, Y+4	; 0x04
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	9c 83       	std	Y+4, r25	; 0x04
 202:	8b 83       	std	Y+3, r24	; 0x03
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	9c 81       	ldd	r25, Y+4	; 0x04
 208:	87 30       	cpi	r24, 0x07	; 7
 20a:	93 40       	sbci	r25, 0x03	; 3
 20c:	ac f3       	brlt	.-22     	; 0x1f8 <delay_ms+0x1e>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	3a 81       	ldd	r19, Y+2	; 0x02
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	34 f3       	brlt	.-52     	; 0x1f2 <delay_ms+0x18>
 226:	00 00       	nop
 228:	26 96       	adiw	r28, 0x06	; 6
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <TimerOn>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	81 e8       	ldi	r24, 0x81	; 129
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	2b e0       	ldi	r18, 0x0B	; 11
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	88 e8       	ldi	r24, 0x88	; 136
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2d e7       	ldi	r18, 0x7D	; 125
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	31 83       	std	Z+1, r19	; 0x01
 258:	20 83       	st	Z, r18
 25a:	8f e6       	ldi	r24, 0x6F	; 111
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	22 e0       	ldi	r18, 0x02	; 2
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	11 82       	std	Z+1, r1	; 0x01
 26c:	10 82       	st	Z, r1
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 272:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 276:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 27a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 27e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 282:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 286:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 28a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 28e:	8f e5       	ldi	r24, 0x5F	; 95
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2f e5       	ldi	r18, 0x5F	; 95
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	20 68       	ori	r18, 0x80	; 128
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
 2a0:	00 00       	nop
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <TimerISR>:
void TimerISR(){
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 2b6:	00 00       	nop
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 2f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 2f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 2f8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 2fc:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	a1 09       	sbc	r26, r1
 304:	b1 09       	sbc	r27, r1
 306:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 30a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 30e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 312:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 316:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 31a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 31e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 322:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 326:	89 2b       	or	r24, r25
 328:	8a 2b       	or	r24, r26
 32a:	8b 2b       	or	r24, r27
 32c:	89 f4       	brne	.+34     	; 0x350 <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 32e:	bc df       	rcall	.-136    	; 0x2a8 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 334:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 338:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 33c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 340:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 344:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 348:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 34c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 350:	00 00       	nop
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 374:	0f 90       	pop	r0
 376:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TimerSet>:
void TimerSet( unsigned long M) {
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <TimerSet+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 83       	std	Y+1, r22	; 0x01
 38e:	7a 83       	std	Y+2, r23	; 0x02
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	ab 81       	ldd	r26, Y+3	; 0x03
 39a:	bc 81       	ldd	r27, Y+4	; 0x04
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 3c0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 3c4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 3c8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <main>:
enum States{INIT, WAIT, INCREMENT, DECREMENT, WAIT2, RESET} state;
void Tick();


int main(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 3e4:	81 e2       	ldi	r24, 0x21	; 33
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	10 82       	st	Z, r1
 3ec:	82 e2       	ldi	r24, 0x22	; 34
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 3f6:	87 e2       	ldi	r24, 0x27	; 39
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
 400:	88 e2       	ldi	r24, 0x28	; 40
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 408:	8a e2       	ldi	r24, 0x2A	; 42
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
 412:	8b e2       	ldi	r24, 0x2B	; 43
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	10 82       	st	Z, r1
	state = INIT;
 41a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
	TimerSet(50);
 41e:	62 e3       	ldi	r22, 0x32	; 50
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	ac df       	rcall	.-168    	; 0x380 <TimerSet>
	TimerOn();
 428:	08 df       	rcall	.-496    	; 0x23a <TimerOn>
	LCD_init();
 42a:	4e de       	rcall	.-868    	; 0xc8 <LCD_init>
 42c:	08 d0       	rcall	.+16     	; 0x43e <Tick>
	
	while (1)
	{
		Tick();
 42e:	00 00       	nop
 430:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		while(!TimerFlag);
 434:	88 23       	and	r24, r24
 436:	e1 f3       	breq	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		TimerFlag = 0;
 43c:	f7 cf       	rjmp	.-18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

0000043e <Tick>:
 43e:	cf 93       	push	r28
	}
 440:	df 93       	push	r29
}

void Tick(){
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
	switch(state){ //transitions
 446:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	91 05       	cpc	r25, r1
 452:	09 f4       	brne	.+2      	; 0x456 <Tick+0x18>
 454:	4a c0       	rjmp	.+148    	; 0x4ea <Tick+0xac>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	91 05       	cpc	r25, r1
 45a:	2c f4       	brge	.+10     	; 0x466 <Tick+0x28>
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	79 f0       	breq	.+30     	; 0x47e <Tick+0x40>
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	a9 f0       	breq	.+42     	; 0x48e <Tick+0x50>
			else{
				state = INIT;
			}
			break;
		default:
			break;
 464:	b0 c0       	rjmp	.+352    	; 0x5c6 <Tick+0x188>
		TimerFlag = 0;
	}
}

void Tick(){
	switch(state){ //transitions
 466:	84 30       	cpi	r24, 0x04	; 4
 468:	91 05       	cpc	r25, r1
 46a:	09 f4       	brne	.+2      	; 0x46e <Tick+0x30>
 46c:	46 c0       	rjmp	.+140    	; 0x4fa <Tick+0xbc>
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	91 05       	cpc	r25, r1
 472:	0c f4       	brge	.+2      	; 0x476 <Tick+0x38>
 474:	3e c0       	rjmp	.+124    	; 0x4f2 <Tick+0xb4>
 476:	05 97       	sbiw	r24, 0x05	; 5
 478:	09 f4       	brne	.+2      	; 0x47c <Tick+0x3e>
 47a:	77 c0       	rjmp	.+238    	; 0x56a <Tick+0x12c>
			else{
				state = INIT;
			}
			break;
		default:
			break;
 47c:	a4 c0       	rjmp	.+328    	; 0x5c6 <Tick+0x188>
}

void Tick(){
	switch(state){ //transitions
		case INIT:
            LCD_Cursor(1);
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	97 de       	rcall	.-722    	; 0x1b0 <LCD_Cursor>
            LCD_WriteData('O');
 482:	8f e4       	ldi	r24, 0x4F	; 79
 484:	66 de       	rcall	.-820    	; 0x152 <LCD_WriteData>
			state = WAIT;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			break;
 48c:	9c c0       	rjmp	.+312    	; 0x5c6 <Tick+0x188>
		case WAIT:
			if((PINA & 0x03) == 0x03){
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	fc 01       	movw	r30, r24
 494:	80 81       	ld	r24, Z
 496:	88 2f       	mov	r24, r24
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	83 70       	andi	r24, 0x03	; 3
 49c:	99 27       	eor	r25, r25
 49e:	03 97       	sbiw	r24, 0x03	; 3
 4a0:	21 f4       	brne	.+8      	; 0x4aa <Tick+0x6c>
				state = RESET;
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
				state = DECREMENT;
			}
			else{
				state = WAIT;
			}
			break;
 4a8:	8e c0       	rjmp	.+284    	; 0x5c6 <Tick+0x188>
			break;
		case WAIT:
			if((PINA & 0x03) == 0x03){
				state = RESET;
			}
			else if((PINA & 0x03) == 0x01){
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	83 70       	andi	r24, 0x03	; 3
 4b8:	99 27       	eor	r25, r25
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <Tick+0x88>
				state = INCREMENT;
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
				state = DECREMENT;
			}
			else{
				state = WAIT;
			}
			break;
 4c4:	80 c0       	rjmp	.+256    	; 0x5c6 <Tick+0x188>
				state = RESET;
			}
			else if((PINA & 0x03) == 0x01){
				state = INCREMENT;
			}
			else if((PINA & 0x03) == 0x02){
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	83 70       	andi	r24, 0x03	; 3
 4d4:	99 27       	eor	r25, r25
 4d6:	02 97       	sbiw	r24, 0x02	; 2
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <Tick+0xa4>
				state = DECREMENT;
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			}
			else{
				state = WAIT;
			}
			break;
 4e0:	72 c0       	rjmp	.+228    	; 0x5c6 <Tick+0x188>
			}
			else if((PINA & 0x03) == 0x02){
				state = DECREMENT;
			}
			else{
				state = WAIT;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			}
			break;
 4e8:	6e c0       	rjmp	.+220    	; 0x5c6 <Tick+0x188>
		case INCREMENT:
			state = WAIT2;
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			break;
 4f0:	6a c0       	rjmp	.+212    	; 0x5c6 <Tick+0x188>
		case DECREMENT:
			state = WAIT2;
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			break;
 4f8:	66 c0       	rjmp	.+204    	; 0x5c6 <Tick+0x188>
		case WAIT2:
			if((PINA & 0x03) == 0x00){
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	80 81       	ld	r24, Z
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	83 70       	andi	r24, 0x03	; 3
 508:	99 27       	eor	r25, r25
 50a:	89 2b       	or	r24, r25
 50c:	21 f4       	brne	.+8      	; 0x516 <Tick+0xd8>
				state = WAIT;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
    			state = INCREMENT;
			}
            else if((PINA & 0x03) == 0x02){
                state = DECREMENT;
            }
			break;
 514:	57 c0       	rjmp	.+174    	; 0x5c4 <Tick+0x186>
			break;
		case WAIT2:
			if((PINA & 0x03) == 0x00){
				state = WAIT;
			}
			else if((PINA & 0x03) == 0x03){
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	83 70       	andi	r24, 0x03	; 3
 524:	99 27       	eor	r25, r25
 526:	03 97       	sbiw	r24, 0x03	; 3
 528:	21 f4       	brne	.+8      	; 0x532 <Tick+0xf4>
				state = RESET;
 52a:	85 e0       	ldi	r24, 0x05	; 5
 52c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
    			state = INCREMENT;
			}
            else if((PINA & 0x03) == 0x02){
                state = DECREMENT;
            }
			break;
 530:	49 c0       	rjmp	.+146    	; 0x5c4 <Tick+0x186>
				state = WAIT;
			}
			else if((PINA & 0x03) == 0x03){
				state = RESET;
			}
			else if((PINA & 0x03) == 0x01){
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	83 70       	andi	r24, 0x03	; 3
 540:	99 27       	eor	r25, r25
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	21 f4       	brne	.+8      	; 0x54e <Tick+0x110>
    			state = INCREMENT;
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			}
            else if((PINA & 0x03) == 0x02){
                state = DECREMENT;
            }
			break;
 54c:	3b c0       	rjmp	.+118    	; 0x5c4 <Tick+0x186>
				state = RESET;
			}
			else if((PINA & 0x03) == 0x01){
    			state = INCREMENT;
			}
            else if((PINA & 0x03) == 0x02){
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	80 81       	ld	r24, Z
 556:	88 2f       	mov	r24, r24
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	83 70       	andi	r24, 0x03	; 3
 55c:	99 27       	eor	r25, r25
 55e:	02 97       	sbiw	r24, 0x02	; 2
 560:	89 f5       	brne	.+98     	; 0x5c4 <Tick+0x186>
                state = DECREMENT;
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
            }
			break;
 568:	2d c0       	rjmp	.+90     	; 0x5c4 <Tick+0x186>
		case RESET:
			if((PINA & 0x03) == 0x03){
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	88 2f       	mov	r24, r24
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	83 70       	andi	r24, 0x03	; 3
 578:	99 27       	eor	r25, r25
 57a:	03 97       	sbiw	r24, 0x03	; 3
 57c:	21 f4       	brne	.+8      	; 0x586 <Tick+0x148>
				state = RESET;
 57e:	85 e0       	ldi	r24, 0x05	; 5
 580:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
				state = RESET;
			}
			else{
				state = INIT;
			}
			break;
 584:	20 c0       	rjmp	.+64     	; 0x5c6 <Tick+0x188>
			break;
		case RESET:
			if((PINA & 0x03) == 0x03){
				state = RESET;
			}
			else if((PINA & 0x02) == 0x02){
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	80 81       	ld	r24, Z
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	82 70       	andi	r24, 0x02	; 2
 594:	99 27       	eor	r25, r25
 596:	89 2b       	or	r24, r25
 598:	21 f0       	breq	.+8      	; 0x5a2 <Tick+0x164>
				state = RESET;
 59a:	85 e0       	ldi	r24, 0x05	; 5
 59c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
				state = RESET;
			}
			else{
				state = INIT;
			}
			break;
 5a0:	12 c0       	rjmp	.+36     	; 0x5c6 <Tick+0x188>
				state = RESET;
			}
			else if((PINA & 0x02) == 0x02){
				state = RESET;
			}
			else if((PINA & 0x01) == 0x01){
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	fc 01       	movw	r30, r24
 5a8:	80 81       	ld	r24, Z
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	81 70       	andi	r24, 0x01	; 1
 5b0:	99 27       	eor	r25, r25
 5b2:	89 2b       	or	r24, r25
 5b4:	21 f0       	breq	.+8      	; 0x5be <Tick+0x180>
				state = RESET;
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			}
			else{
				state = INIT;
			}
			break;
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <Tick+0x188>
			}
			else if((PINA & 0x01) == 0x01){
				state = RESET;
			}
			else{
				state = INIT;
 5be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
			}
			break;
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <Tick+0x188>
    			state = INCREMENT;
			}
            else if((PINA & 0x03) == 0x02){
                state = DECREMENT;
            }
			break;
 5c4:	00 00       	nop
			break;
		default:
			break;
		
	}
	switch(state){ //actions
 5c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 5ca:	88 2f       	mov	r24, r24
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	91 05       	cpc	r25, r1
 5d2:	a1 f0       	breq	.+40     	; 0x5fc <Tick+0x1be>
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	3c f4       	brge	.+14     	; 0x5e8 <Tick+0x1aa>
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <Tick+0x1a2>
 5de:	3e c0       	rjmp	.+124    	; 0x65c <Tick+0x21e>
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <Tick+0x1a8>
 5e4:	3d c0       	rjmp	.+122    	; 0x660 <Tick+0x222>
		    i = 0x00;
            LCD_Cursor(1);
            LCD_WriteData(i + '0');
			break;
		default:
			break;
 5e6:	3f c0       	rjmp	.+126    	; 0x666 <Tick+0x228>
			break;
		default:
			break;
		
	}
	switch(state){ //actions
 5e8:	84 30       	cpi	r24, 0x04	; 4
 5ea:	91 05       	cpc	r25, r1
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <Tick+0x1b2>
 5ee:	3a c0       	rjmp	.+116    	; 0x664 <Tick+0x226>
 5f0:	84 30       	cpi	r24, 0x04	; 4
 5f2:	91 05       	cpc	r25, r1
 5f4:	bc f0       	brlt	.+46     	; 0x624 <Tick+0x1e6>
 5f6:	05 97       	sbiw	r24, 0x05	; 5
 5f8:	41 f1       	breq	.+80     	; 0x64a <Tick+0x20c>
		    i = 0x00;
            LCD_Cursor(1);
            LCD_WriteData(i + '0');
			break;
		default:
			break;
 5fa:	35 c0       	rjmp	.+106    	; 0x666 <Tick+0x228>
		case INIT:
			break;
		case WAIT:
			break;
		case INCREMENT:
			if(i < 0x09){
 5fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 600:	89 30       	cpi	r24, 0x09	; 9
 602:	30 f4       	brcc	.+12     	; 0x610 <Tick+0x1d2>
				i++;
 604:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
 60e:	03 c0       	rjmp	.+6      	; 0x616 <Tick+0x1d8>
			}
			else{
				i = 9;
 610:	89 e0       	ldi	r24, 0x09	; 9
 612:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
			}
            LCD_Cursor(1);
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	cb dd       	rcall	.-1130   	; 0x1b0 <LCD_Cursor>
            LCD_WriteData(i + '0');
 61a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 61e:	80 5d       	subi	r24, 0xD0	; 208
 620:	98 dd       	rcall	.-1232   	; 0x152 <LCD_WriteData>
			break;
 622:	21 c0       	rjmp	.+66     	; 0x666 <Tick+0x228>
		case DECREMENT:
			if(i > 0){
 624:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 628:	88 23       	and	r24, r24
 62a:	31 f0       	breq	.+12     	; 0x638 <Tick+0x1fa>
				i--;
 62c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 630:	81 50       	subi	r24, 0x01	; 1
 632:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
			}
			else{
				i = 0x00;
 636:	02 c0       	rjmp	.+4      	; 0x63c <Tick+0x1fe>
 638:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
			}
            LCD_Cursor(1);
 63c:	81 e0       	ldi	r24, 0x01	; 1
            LCD_WriteData(i + '0');
 63e:	b8 dd       	rcall	.-1168   	; 0x1b0 <LCD_Cursor>
 640:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 644:	80 5d       	subi	r24, 0xD0	; 208
			break;
 646:	85 dd       	rcall	.-1270   	; 0x152 <LCD_WriteData>
            
		case WAIT2:
			break;
		case RESET:
		    i = 0x00;
 648:	0e c0       	rjmp	.+28     	; 0x666 <Tick+0x228>
            LCD_Cursor(1);
 64a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 64e:	81 e0       	ldi	r24, 0x01	; 1
            LCD_WriteData(i + '0');
 650:	af dd       	rcall	.-1186   	; 0x1b0 <LCD_Cursor>
 652:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 656:	80 5d       	subi	r24, 0xD0	; 208
 658:	7c dd       	rcall	.-1288   	; 0x152 <LCD_WriteData>
			break;
 65a:	05 c0       	rjmp	.+10     	; 0x666 <Tick+0x228>
			break;
		
	}
	switch(state){ //actions
		case INIT:
			break;
 65c:	00 00       	nop
 65e:	03 c0       	rjmp	.+6      	; 0x666 <Tick+0x228>
		case WAIT:
			break;
 660:	00 00       	nop
 662:	01 c0       	rjmp	.+2      	; 0x666 <Tick+0x228>
            LCD_Cursor(1);
            LCD_WriteData(i + '0');
			break;
            
		case WAIT2:
			break;
 664:	00 00       	nop

	}



}
 666:	00 00       	nop
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
