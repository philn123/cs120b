
pnguy092_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086f  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	d2 c0       	rjmp	.+420    	; 0x250 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include <avr/io.h>
enum States{START, ONE, WAIT, TWO, WAIT2} state;
void Tick();

int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
  b6:	81 e2       	ldi	r24, 0x21	; 33
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
  be:	82 e2       	ldi	r24, 0x22	; 34
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x01;
  c8:	84 e2       	ldi	r24, 0x24	; 36
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	85 e2       	ldi	r24, 0x25	; 37
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
    while (1) 
    {
		Tick();
  dc:	01 d0       	rcall	.+2      	; 0xe0 <Tick>
    }
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x2e>

000000e0 <Tick>:
}

void Tick(){
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	switch(state){ //transitions
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	71 f1       	breq	.+92     	; 0x152 <Tick+0x72>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	28 f4       	brcc	.+10     	; 0x106 <Tick+0x26>
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	51 f0       	breq	.+20     	; 0x114 <Tick+0x34>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	79 f0       	breq	.+30     	; 0x122 <Tick+0x42>
				state = ONE;
			}
			break;
					
		default:
			break;
 104:	6e c0       	rjmp	.+220    	; 0x1e2 <Tick+0x102>
		Tick();
    }
}

void Tick(){
	switch(state){ //transitions
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	d9 f1       	breq	.+118    	; 0x182 <Tick+0xa2>
 10c:	04 97       	sbiw	r24, 0x04	; 4
 10e:	09 f4       	brne	.+2      	; 0x112 <Tick+0x32>
 110:	50 c0       	rjmp	.+160    	; 0x1b2 <Tick+0xd2>
				state = ONE;
			}
			break;
					
		default:
			break;
 112:	67 c0       	rjmp	.+206    	; 0x1e2 <Tick+0x102>
}

void Tick(){
	switch(state){ //transitions
		case START:
			state = ONE;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 120:	60 c0       	rjmp	.+192    	; 0x1e2 <Tick+0x102>
		case ONE:
			if((PINA & 0x01) == 0x01){
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	89 2b       	or	r24, r25
 134:	39 f0       	breq	.+14     	; 0x144 <Tick+0x64>
				state = WAIT;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else{
				state = ONE;
			}
			break;
 142:	4f c0       	rjmp	.+158    	; 0x1e2 <Tick+0x102>
		case ONE:
			if((PINA & 0x01) == 0x01){
				state = WAIT;
			}
			else{
				state = ONE;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 150:	48 c0       	rjmp	.+144    	; 0x1e2 <Tick+0x102>
		case WAIT:
			if((PINA & 0x01) == 0x01){
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	81 70       	andi	r24, 0x01	; 1
 160:	99 27       	eor	r25, r25
 162:	89 2b       	or	r24, r25
 164:	39 f0       	breq	.+14     	; 0x174 <Tick+0x94>
				state = WAIT;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else{
				state = TWO;
			}
			break;
 172:	37 c0       	rjmp	.+110    	; 0x1e2 <Tick+0x102>
		case WAIT:
			if((PINA & 0x01) == 0x01){
				state = WAIT;
			}
			else{
				state = TWO;
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 180:	30 c0       	rjmp	.+96     	; 0x1e2 <Tick+0x102>
		case TWO:
			if((PINA & 0x01) == 0x01){
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	99 27       	eor	r25, r25
 192:	89 2b       	or	r24, r25
 194:	39 f0       	breq	.+14     	; 0x1a4 <Tick+0xc4>
				state = WAIT2;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else{
				state = TWO;
			}
			break;
 1a2:	1f c0       	rjmp	.+62     	; 0x1e2 <Tick+0x102>
		case TWO:
			if((PINA & 0x01) == 0x01){
				state = WAIT2;
			}
			else{
				state = TWO;
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <Tick+0x102>
		case WAIT2:
			if((PINA & 0x01) == 0x01){
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	99 27       	eor	r25, r25
 1c2:	89 2b       	or	r24, r25
 1c4:	39 f0       	breq	.+14     	; 0x1d4 <Tick+0xf4>
				state = WAIT2;
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else{
				state = ONE;
			}
			break;
 1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <Tick+0x100>
		case WAIT2:
			if((PINA & 0x01) == 0x01){
				state = WAIT2;
			}
			else{
				state = ONE;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 1e0:	00 00       	nop
					
		default:
			break;
	}
	switch(state){ //actions
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	91 05       	cpc	r25, r1
 1ee:	d1 f0       	breq	.+52     	; 0x224 <Tick+0x144>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	91 05       	cpc	r25, r1
 1f4:	28 f4       	brcc	.+10     	; 0x200 <Tick+0x120>
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	49 f0       	breq	.+18     	; 0x20c <Tick+0x12c>
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	69 f0       	breq	.+26     	; 0x218 <Tick+0x138>
			break;
		case WAIT2:
			PORTB = 0x01;
			break;
		default:
			break;	
 1fe:	24 c0       	rjmp	.+72     	; 0x248 <Tick+0x168>
			break;
					
		default:
			break;
	}
	switch(state){ //actions
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	91 05       	cpc	r25, r1
 204:	a9 f0       	breq	.+42     	; 0x230 <Tick+0x150>
 206:	04 97       	sbiw	r24, 0x04	; 4
 208:	c9 f0       	breq	.+50     	; 0x23c <Tick+0x15c>
			break;
		case WAIT2:
			PORTB = 0x01;
			break;
		default:
			break;	
 20a:	1e c0       	rjmp	.+60     	; 0x248 <Tick+0x168>
		default:
			break;
	}
	switch(state){ //actions
		case START:
			PORTB = 0x01;
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
			break;
 216:	18 c0       	rjmp	.+48     	; 0x248 <Tick+0x168>
		case ONE:
			PORTB = 0x01;
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
			break;
 222:	12 c0       	rjmp	.+36     	; 0x248 <Tick+0x168>
		case WAIT:
			PORTB = 0x02;
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	22 e0       	ldi	r18, 0x02	; 2
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
			break;
 22e:	0c c0       	rjmp	.+24     	; 0x248 <Tick+0x168>
		case TWO:
			PORTB = 0x02;
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	22 e0       	ldi	r18, 0x02	; 2
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
			break;
 23a:	06 c0       	rjmp	.+12     	; 0x248 <Tick+0x168>
		case WAIT2:
			PORTB = 0x01;
 23c:	85 e2       	ldi	r24, 0x25	; 37
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
			break;
 246:	00 00       	nop
		default:
			break;	
	}
}
 248:	00 00       	nop
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
