
pnguy092_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000022a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000884  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000302  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7b d0       	rcall	.+246    	; 0x1a0 <main>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
        Tick();
    }
}

void Tick(){
    switch(state){ //transitions
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	41 f1       	breq	.+80     	; 0x106 <Tick+0x58>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <Tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	49 f0       	breq	.+18     	; 0xce <Tick+0x20>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	59 f0       	breq	.+22     	; 0xd6 <Tick+0x28>
  c0:	44 c0       	rjmp	.+136    	; 0x14a <Tick+0x9c>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	41 f1       	breq	.+80     	; 0x116 <Tick+0x68>
  c6:	18 f1       	brcs	.+70     	; 0x10e <Tick+0x60>
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	a1 f1       	breq	.+104    	; 0x134 <Tick+0x86>
  cc:	3e c0       	rjmp	.+124    	; 0x14a <Tick+0x9c>
        case INIT:
        state = WAIT;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
  d4:	4a c0       	rjmp	.+148    	; 0x16a <Tick+0xbc>
        case WAIT:
            if((PINA & 0x03) == 0x03){
  d6:	80 b1       	in	r24, 0x00	; 0
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	21 f4       	brne	.+8      	; 0xe6 <Tick+0x38>
                state = RESET;
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e4:	5b c0       	rjmp	.+182    	; 0x19c <Tick+0xee>
            }
            else if((PINA & 0x03) == 0x01){
  e6:	80 b1       	in	r24, 0x00	; 0
  e8:	83 70       	andi	r24, 0x03	; 3
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	21 f4       	brne	.+8      	; 0xf6 <Tick+0x48>
                state = INCREMENT;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f4:	3d c0       	rjmp	.+122    	; 0x170 <Tick+0xc2>
            }
            else if((PINA & 0x03) == 0x02){
  f6:	80 b1       	in	r24, 0x00	; 0
  f8:	83 70       	andi	r24, 0x03	; 3
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	b1 f5       	brne	.+108    	; 0x16a <Tick+0xbc>
                state = DECREMENT;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 104:	3f c0       	rjmp	.+126    	; 0x184 <Tick+0xd6>
            else{
                state = WAIT;
            }
            break;
        case INCREMENT:
            state = WAIT2;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 10c:	44 c0       	rjmp	.+136    	; 0x196 <Tick+0xe8>
        case DECREMENT:
            state = WAIT2;
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 114:	40 c0       	rjmp	.+128    	; 0x196 <Tick+0xe8>
        case WAIT2:
            if((PINA & 0x03) == 0x00){
 116:	80 b1       	in	r24, 0x00	; 0
 118:	83 70       	andi	r24, 0x03	; 3
 11a:	21 f4       	brne	.+8      	; 0x124 <Tick+0x76>
                state = WAIT;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 122:	23 c0       	rjmp	.+70     	; 0x16a <Tick+0xbc>
            }
            else if((PINA & 0x03) == 0x03){
 124:	80 b1       	in	r24, 0x00	; 0
 126:	83 70       	andi	r24, 0x03	; 3
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	a9 f5       	brne	.+106    	; 0x196 <Tick+0xe8>
                state = RESET;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 132:	34 c0       	rjmp	.+104    	; 0x19c <Tick+0xee>
            else{
                state = WAIT2;
            }
        break;
        case RESET:
            if((PINA & 0x03) == 0x03){
 134:	80 b1       	in	r24, 0x00	; 0
 136:	83 70       	andi	r24, 0x03	; 3
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	81 f1       	breq	.+96     	; 0x19c <Tick+0xee>
                state = RESET;
            }
            else if((PINA & 0x02) == 0x02){
 13c:	01 99       	sbic	0x00, 1	; 0
 13e:	2e c0       	rjmp	.+92     	; 0x19c <Tick+0xee>
                state = RESET;
            }
            else if((PINA & 0x01) == 0x01){
 140:	00 99       	sbic	0x00, 0	; 0
 142:	2c c0       	rjmp	.+88     	; 0x19c <Tick+0xee>
                state = RESET;
            }
            else{
                state = INIT;
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 148:	0e c0       	rjmp	.+28     	; 0x166 <Tick+0xb8>
            break;
        default:
            break;
        
    }
    switch(state){ //actions
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	89 f0       	breq	.+34     	; 0x170 <Tick+0xc2>
 14e:	28 f4       	brcc	.+10     	; 0x15a <Tick+0xac>
 150:	88 23       	and	r24, r24
 152:	49 f0       	breq	.+18     	; 0x166 <Tick+0xb8>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	19 f5       	brne	.+70     	; 0x19e <Tick+0xf0>
 158:	08 c0       	rjmp	.+16     	; 0x16a <Tick+0xbc>
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	e1 f0       	breq	.+56     	; 0x196 <Tick+0xe8>
 15e:	90 f0       	brcs	.+36     	; 0x184 <Tick+0xd6>
 160:	85 30       	cpi	r24, 0x05	; 5
 162:	e9 f4       	brne	.+58     	; 0x19e <Tick+0xf0>
 164:	1b c0       	rjmp	.+54     	; 0x19c <Tick+0xee>
        case INIT:
            PORTC = 0x00;
 166:	18 b8       	out	0x08, r1	; 8
            break;
 168:	08 95       	ret
        case WAIT:
            PORTC = PORTC;
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	88 b9       	out	0x08, r24	; 8
            break;
 16e:	08 95       	ret
        case INCREMENT:
            if(PORTC < 0x09){
 170:	88 b1       	in	r24, 0x08	; 8
 172:	89 30       	cpi	r24, 0x09	; 9
 174:	20 f4       	brcc	.+8      	; 0x17e <Tick+0xd0>
                PORTC = PORTC + 1;
 176:	88 b1       	in	r24, 0x08	; 8
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	88 b9       	out	0x08, r24	; 8
 17c:	08 95       	ret
            }
            else{
                PORTC = 0x09;
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	88 b9       	out	0x08, r24	; 8
 182:	08 95       	ret
            }
        break;
        case DECREMENT:
            if(PORTC > 0){
 184:	88 b1       	in	r24, 0x08	; 8
 186:	88 23       	and	r24, r24
 188:	21 f0       	breq	.+8      	; 0x192 <Tick+0xe4>
                PORTC = PORTC - 1;
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	88 b9       	out	0x08, r24	; 8
 190:	08 95       	ret
            }
            else{
                PORTC = 0x00;
 192:	18 b8       	out	0x08, r1	; 8
 194:	08 95       	ret
            }
            break;
        case WAIT2:
            PORTC = PORTC;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	88 b9       	out	0x08, r24	; 8
            break;
 19a:	08 95       	ret
        case RESET:
            PORTC = 0x00;
 19c:	18 b8       	out	0x08, r1	; 8
 19e:	08 95       	ret

000001a0 <main>:


int main(void)
{
    /* Replace with your application code */
    DDRA = 0x00; PORTA = 0xFF;
 1a0:	11 b8       	out	0x01, r1	; 1
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	82 b9       	out	0x02, r24	; 2
    DDRC = 0xFF; PORTC = 0x00;
 1a6:	87 b9       	out	0x07, r24	; 7
 1a8:	18 b8       	out	0x08, r1	; 8
    state = INIT;
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    while (1)
    {
        Tick();
 1ae:	7f df       	rcall	.-258    	; 0xae <Tick>
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <main+0xe>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
