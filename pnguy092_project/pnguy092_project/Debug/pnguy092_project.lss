
pnguy092_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800130  00800130  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000004b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101e  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000940  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000761  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a0  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f2 c0       	rjmp	.+484    	; 0x21a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 33       	cpi	r26, 0x37	; 55
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d1       	rcall	.+584    	; 0x30c <main>
  c4:	56 c1       	rjmp	.+684    	; 0x372 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_WriteData>:
 116:	10 9a       	sbi	0x02, 0	; 2
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	11 9a       	sbi	0x02, 1	; 2
 11c:	00 00       	nop
 11e:	11 98       	cbi	0x02, 1	; 2
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	d1 cf       	rjmp	.-94     	; 0xc8 <delay_ms>
 126:	08 95       	ret

00000128 <LCD_Custom_Character>:
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	70 f4       	brcc	.+28     	; 0x150 <LCD_Custom_Character+0x28>
 134:	8b 01       	movw	r16, r22
 136:	88 0f       	add	r24, r24
 138:	88 0f       	add	r24, r24
 13a:	88 0f       	add	r24, r24
 13c:	80 5c       	subi	r24, 0xC0	; 192
 13e:	d7 df       	rcall	.-82     	; 0xee <LCD_WriteCommand>
 140:	e8 01       	movw	r28, r16
 142:	08 5f       	subi	r16, 0xF8	; 248
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	89 91       	ld	r24, Y+
 148:	e6 df       	rcall	.-52     	; 0x116 <LCD_WriteData>
 14a:	c0 17       	cp	r28, r16
 14c:	d1 07       	cpc	r29, r17
 14e:	d9 f7       	brne	.-10     	; 0x146 <LCD_Custom_Character+0x1e>
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <LCD_init>:
 15a:	84 e6       	ldi	r24, 0x64	; 100
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	b4 df       	rcall	.-152    	; 0xc8 <delay_ms>
 160:	88 e3       	ldi	r24, 0x38	; 56
 162:	c5 df       	rcall	.-118    	; 0xee <LCD_WriteCommand>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	c3 df       	rcall	.-122    	; 0xee <LCD_WriteCommand>
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	c1 df       	rcall	.-126    	; 0xee <LCD_WriteCommand>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	bf df       	rcall	.-130    	; 0xee <LCD_WriteCommand>
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	a9 df       	rcall	.-174    	; 0xc8 <delay_ms>
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	c6 df       	rcall	.-116    	; 0x106 <LCD_Cursor>
 17a:	68 e2       	ldi	r22, 0x28	; 40
 17c:	71 e0       	ldi	r23, 0x01	; 1
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	d3 df       	rcall	.-90     	; 0x128 <LCD_Custom_Character>
 182:	60 e1       	ldi	r22, 0x10	; 16
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	cf df       	rcall	.-98     	; 0x128 <LCD_Custom_Character>
 18a:	68 e1       	ldi	r22, 0x18	; 24
 18c:	71 e0       	ldi	r23, 0x01	; 1
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	cb df       	rcall	.-106    	; 0x128 <LCD_Custom_Character>
 192:	60 e2       	ldi	r22, 0x20	; 32
 194:	71 e0       	ldi	r23, 0x01	; 1
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	c7 df       	rcall	.-114    	; 0x128 <LCD_Custom_Character>
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	a8 df       	rcall	.-176    	; 0xee <LCD_WriteCommand>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	ba df       	rcall	.-140    	; 0x116 <LCD_WriteData>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	b8 df       	rcall	.-144    	; 0x116 <LCD_WriteData>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	b6 df       	rcall	.-148    	; 0x116 <LCD_WriteData>
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	b4 cf       	rjmp	.-152    	; 0x116 <LCD_WriteData>
 1ae:	08 95       	ret

000001b0 <TimerSet>:
 1b0:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <_avr_timer_M>
 1b4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <_avr_timer_M+0x1>
 1b8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_avr_timer_M+0x2>
 1bc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_avr_timer_M+0x3>
 1c0:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <_avr_timer_cntcurr>
 1c4:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <_avr_timer_cntcurr+0x1>
 1c8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_avr_timer_cntcurr+0x2>
 1cc:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <_avr_timer_cntcurr+0x3>
 1d0:	08 95       	ret

000001d2 <TimerOn>:
 1d2:	8b e0       	ldi	r24, 0x0B	; 11
 1d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d8:	8d e7       	ldi	r24, 0x7D	; 125
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_M>
 1f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_M+0x1>
 1fa:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_M+0x2>
 1fe:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_M+0x3>
 202:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 206:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 20a:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 20e:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
 212:	8f b7       	in	r24, 0x3f	; 63
 214:	80 68       	ori	r24, 0x80	; 128
 216:	8f bf       	out	0x3f, r24	; 63
 218:	08 95       	ret

0000021a <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 22c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <_avr_timer_cntcurr>
 230:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x1>
 234:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x2>
 238:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x3>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	a1 09       	sbc	r26, r1
 240:	b1 09       	sbc	r27, r1
 242:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 246:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 24a:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 24e:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 252:	89 2b       	or	r24, r25
 254:	8a 2b       	or	r24, r26
 256:	8b 2b       	or	r24, r27
 258:	99 f4       	brne	.+38     	; 0x280 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 260:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_M>
 264:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_M+0x1>
 268:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_M+0x2>
 26c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_M+0x3>
 270:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 274:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 278:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 27c:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
	}
}
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <Menu_Tick>:
    0b00100,
    0b00100,
    0b00100
};
*/
void Menu_Tick(){
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
    switch(state){
 29a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <state>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <Menu_Tick+0x20>
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <Menu_Tick+0x18>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	49 f0       	breq	.+18     	; 0x2ba <Menu_Tick+0x28>
 2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <Menu_Tick+0x30>
        case Menu_Init:
            state = Menu_Start;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
            break;
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <Menu_Tick+0x3a>
        case Menu_Start:
            state = Menu_Score;
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 2b8:	15 c0       	rjmp	.+42     	; 0x2e4 <Menu_Tick+0x52>
            break;
        case Menu_Score:
            state = Menu_Start;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
            break;
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <Menu_Tick+0x3a>
        default:
            break;
    }
    
    switch(state){
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	19 f0       	breq	.+6      	; 0x2cc <Menu_Tick+0x3a>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	e1 f4       	brne	.+56     	; 0x302 <Menu_Tick+0x70>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <Menu_Tick+0x52>
        case Menu_Init:
            break;
        case Menu_Start:
           
            LCD_Cursor(17);
 2cc:	81 e1       	ldi	r24, 0x11	; 17
 2ce:	1b df       	rcall	.-458    	; 0x106 <LCD_Cursor>
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	d1 e0       	ldi	r29, 0x01	; 1
 2d4:	0b e0       	ldi	r16, 0x0B	; 11
 2d6:	11 e0       	ldi	r17, 0x01	; 1
            for(unsigned char i = 0; i < 11; i++){
                LCD_WriteData(menu_introduction[i]);
 2d8:	89 91       	ld	r24, Y+
 2da:	1d df       	rcall	.-454    	; 0x116 <LCD_WriteData>
        case Menu_Init:
            break;
        case Menu_Start:
           
            LCD_Cursor(17);
            for(unsigned char i = 0; i < 11; i++){
 2dc:	c0 17       	cp	r28, r16
 2de:	d1 07       	cpc	r29, r17
 2e0:	d9 f7       	brne	.-10     	; 0x2d8 <Menu_Tick+0x46>
                LCD_WriteData(menu_introduction[i]);
            }
            break;
        case Menu_Score:
                LCD_ClearScreen();
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <Menu_Tick+0x70>
                LCD_Cursor(1);
 2e4:	0d df       	rcall	.-486    	; 0x100 <LCD_ClearScreen>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
                LCD_WriteData(score + '0');
 2e8:	0e df       	rcall	.-484    	; 0x106 <LCD_Cursor>
 2ea:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 2ee:	80 5d       	subi	r24, 0xD0	; 208
 2f0:	12 df       	rcall	.-476    	; 0x116 <LCD_WriteData>
                score += 1;
 2f2:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
                eeprom_update_byte((uint8_t*) 4, (uint8_t) score);
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	26 d0       	rcall	.+76     	; 0x34e <eeprom_update_byte>
            break;
    }
    
    
    
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <main>:


int main(void)
{
    /* Replace with your application code */
    DDRA = 0xFF; PORTA = 0x00;
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	81 b9       	out	0x01, r24	; 1
 310:	12 b8       	out	0x02, r1	; 2
    DDRD = 0xFF; PORTD = 0x00;
 312:	8a b9       	out	0x0a, r24	; 10
 314:	1b b8       	out	0x0b, r1	; 11
 
 
    TimerSet(2000);
 316:	60 ed       	ldi	r22, 0xD0	; 208
 318:	77 e0       	ldi	r23, 0x07	; 7
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	48 df       	rcall	.-368    	; 0x1b0 <TimerSet>
    TimerOn();
 320:	58 df       	rcall	.-336    	; 0x1d2 <TimerOn>
    LCD_init();
 322:	1b df       	rcall	.-458    	; 0x15a <LCD_init>
  
    score = eeprom_read_byte((uint8_t*) 4);
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0a d0       	rcall	.+20     	; 0x33e <eeprom_read_byte>
 32a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>

    while (1) 
    {
        Menu_Tick();
 32e:	b1 df       	rcall	.-158    	; 0x292 <Menu_Tick>
 330:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <TimerFlag>
        while(!TimerFlag);
 334:	88 23       	and	r24, r24
 336:	e1 f3       	breq	.-8      	; 0x330 <main+0x24>
 338:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <TimerFlag>
        TimerFlag = 0;
 33c:	f8 cf       	rjmp	.-16     	; 0x32e <main+0x22>

0000033e <eeprom_read_byte>:
 33e:	f9 99       	sbic	0x1f, 1	; 31
 340:	fe cf       	rjmp	.-4      	; 0x33e <eeprom_read_byte>
 342:	92 bd       	out	0x22, r25	; 34
 344:	81 bd       	out	0x21, r24	; 33
 346:	f8 9a       	sbi	0x1f, 0	; 31
 348:	99 27       	eor	r25, r25
 34a:	80 b5       	in	r24, 0x20	; 32
 34c:	08 95       	ret

0000034e <eeprom_update_byte>:
 34e:	26 2f       	mov	r18, r22

00000350 <eeprom_update_r18>:
 350:	f9 99       	sbic	0x1f, 1	; 31
 352:	fe cf       	rjmp	.-4      	; 0x350 <eeprom_update_r18>
 354:	92 bd       	out	0x22, r25	; 34
 356:	81 bd       	out	0x21, r24	; 33
 358:	f8 9a       	sbi	0x1f, 0	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	00 b4       	in	r0, 0x20	; 32
 35e:	02 16       	cp	r0, r18
 360:	39 f0       	breq	.+14     	; 0x370 <eeprom_update_r18+0x20>
 362:	1f ba       	out	0x1f, r1	; 31
 364:	20 bd       	out	0x20, r18	; 32
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	fa 9a       	sbi	0x1f, 2	; 31
 36c:	f9 9a       	sbi	0x1f, 1	; 31
 36e:	0f be       	out	0x3f, r0	; 63
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
