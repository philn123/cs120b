
pnguy092_lab4_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d6  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
   2:	00 00       	nop
   4:	73 c0       	rjmp	.+230    	; 0xec <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c0       	rjmp	.+226    	; 0xec <__bad_interrupt>
   a:	00 00       	nop
   c:	6f c0       	rjmp	.+222    	; 0xec <__bad_interrupt>
   e:	00 00       	nop
  10:	6d c0       	rjmp	.+218    	; 0xec <__bad_interrupt>
  12:	00 00       	nop
  14:	6b c0       	rjmp	.+214    	; 0xec <__bad_interrupt>
  16:	00 00       	nop
  18:	69 c0       	rjmp	.+210    	; 0xec <__bad_interrupt>
  1a:	00 00       	nop
  1c:	67 c0       	rjmp	.+206    	; 0xec <__bad_interrupt>
  1e:	00 00       	nop
  20:	65 c0       	rjmp	.+202    	; 0xec <__bad_interrupt>
  22:	00 00       	nop
  24:	63 c0       	rjmp	.+198    	; 0xec <__bad_interrupt>
  26:	00 00       	nop
  28:	61 c0       	rjmp	.+194    	; 0xec <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5f c0       	rjmp	.+190    	; 0xec <__bad_interrupt>
  2e:	00 00       	nop
  30:	5d c0       	rjmp	.+186    	; 0xec <__bad_interrupt>
  32:	00 00       	nop
  34:	5b c0       	rjmp	.+182    	; 0xec <__bad_interrupt>
  36:	00 00       	nop
  38:	59 c0       	rjmp	.+178    	; 0xec <__bad_interrupt>
  3a:	00 00       	nop
  3c:	57 c0       	rjmp	.+174    	; 0xec <__bad_interrupt>
  3e:	00 00       	nop
  40:	55 c0       	rjmp	.+170    	; 0xec <__bad_interrupt>
  42:	00 00       	nop
  44:	53 c0       	rjmp	.+166    	; 0xec <__bad_interrupt>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4f c0       	rjmp	.+158    	; 0xec <__bad_interrupt>
  4e:	00 00       	nop
  50:	4d c0       	rjmp	.+154    	; 0xec <__bad_interrupt>
  52:	00 00       	nop
  54:	4b c0       	rjmp	.+150    	; 0xec <__bad_interrupt>
  56:	00 00       	nop
  58:	49 c0       	rjmp	.+146    	; 0xec <__bad_interrupt>
  5a:	00 00       	nop
  5c:	47 c0       	rjmp	.+142    	; 0xec <__bad_interrupt>
  5e:	00 00       	nop
  60:	45 c0       	rjmp	.+138    	; 0xec <__bad_interrupt>
  62:	00 00       	nop
  64:	43 c0       	rjmp	.+134    	; 0xec <__bad_interrupt>
  66:	00 00       	nop
  68:	41 c0       	rjmp	.+130    	; 0xec <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3f c0       	rjmp	.+126    	; 0xec <__bad_interrupt>
  6e:	00 00       	nop
  70:	3d c0       	rjmp	.+122    	; 0xec <__bad_interrupt>
  72:	00 00       	nop
  74:	3b c0       	rjmp	.+118    	; 0xec <__bad_interrupt>
  76:	00 00       	nop
  78:	39 c0       	rjmp	.+114    	; 0xec <__bad_interrupt>
  7a:	00 00       	nop
  7c:	37 c0       	rjmp	.+110    	; 0xec <__bad_interrupt>
  7e:	00 00       	nop
  80:	35 c0       	rjmp	.+106    	; 0xec <__bad_interrupt>
  82:	00 00       	nop
  84:	33 c0       	rjmp	.+102    	; 0xec <__bad_interrupt>
  86:	00 00       	nop
  88:	31 c0       	rjmp	.+98     	; 0xec <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b5 00       	.word	0x00b5	; ????
  8e:	bc 00       	.word	0x00bc	; ????
  90:	e6 00       	.word	0x00e6	; ????
  92:	0f 01       	movw	r0, r30
  94:	7e 01       	movw	r14, r28
  96:	a8 01       	movw	r20, r16
  98:	09 02       	muls	r16, r25
  9a:	32 02       	muls	r19, r18
  9c:	a1 02       	muls	r26, r17
  9e:	be 02       	muls	r27, r30
  a0:	f1 02       	muls	r31, r17
  a2:	fa 02       	muls	r31, r26
  a4:	0a 03       	fmul	r16, r18
  a6:	18 03       	fmul	r17, r16
  a8:	26 03       	mulsu	r18, r22
  aa:	31 03       	mulsu	r19, r17
  ac:	3b 03       	fmul	r19, r19
  ae:	46 03       	mulsu	r20, r22
  b0:	51 03       	mulsu	r21, r17

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d0 e4       	ldi	r29, 0x40	; 64
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	ee ed       	ldi	r30, 0xDE	; 222
  c6:	f6 e0       	ldi	r31, 0x06	; 6
  c8:	00 e0       	ldi	r16, 0x00	; 0
  ca:	0b bf       	out	0x3b, r16	; 59
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x14>
  ce:	07 90       	elpm	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	a4 30       	cpi	r26, 0x04	; 4
  d4:	b1 07       	cpc	r27, r17
  d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0x10>

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a4 e0       	ldi	r26, 0x04	; 4
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a8 30       	cpi	r26, 0x08	; 8
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	02 d0       	rcall	.+4      	; 0xee <main>
  ea:	f7 c2       	rjmp	.+1518   	; 0x6da <_exit>

000000ec <__bad_interrupt>:
  ec:	89 cf       	rjmp	.-238    	; 0x0 <__vectors>

000000ee <main>:

void Tick();


int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
  f6:	81 e2       	ldi	r24, 0x21	; 33
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	10 82       	st	Z, r1
  fe:	82 e2       	ldi	r24, 0x22	; 34
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 108:	84 e2       	ldi	r24, 0x24	; 36
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 11a:	87 e2       	ldi	r24, 0x27	; 39
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	10 82       	st	Z, r1
	state = INIT;
 12c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state+0x1>
 130:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
	while (1)
	{
		Tick();
 134:	01 d0       	rcall	.+2      	; 0x138 <Tick>
	}
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0x46>

00000138 <Tick>:
}

void Tick(){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	switch(state){ //transitions
 140:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
 144:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <state+0x1>
 148:	cc 01       	movw	r24, r24
 14a:	a0 e0       	ldi	r26, 0x00	; 0
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	29 e0       	ldi	r18, 0x09	; 9
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	84 1b       	sub	r24, r20
 158:	95 0b       	sbc	r25, r21
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	08 f4       	brcc	.+2      	; 0x162 <Tick+0x2a>
 160:	2a c2       	rjmp	.+1108   	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 162:	8a 5b       	subi	r24, 0xBA	; 186
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	fc 01       	movw	r30, r24
 168:	af c2       	rjmp	.+1374   	; 0x6c8 <__tablejump2__>
		case INIT:
			state = START;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 172:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			break;
 176:	20 c2       	rjmp	.+1088   	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case START:
			if((PINA & 0x07) == 0x04){
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	87 70       	andi	r24, 0x07	; 7
 186:	99 27       	eor	r25, r25
 188:	04 97       	sbiw	r24, 0x04	; 4
 18a:	39 f4       	brne	.+14     	; 0x19a <Tick+0x62>
				state = WAIT;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 194:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 198:	0f c2       	rjmp	.+1054   	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			break;
		case START:
			if((PINA & 0x07) == 0x04){
				state = WAIT;
			}
			else if((PINA & 0x87) == 0x80){
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	87 78       	andi	r24, 0x87	; 135
 1a8:	99 27       	eor	r25, r25
 1aa:	80 38       	cpi	r24, 0x80	; 128
 1ac:	91 05       	cpc	r25, r1
 1ae:	39 f4       	brne	.+14     	; 0x1be <Tick+0x86>
				state = LOCK;
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 1b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = START;
			}
			break;
 1bc:	fd c1       	rjmp	.+1018   	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			}
			else if((PINA & 0x87) == 0x80){
				state = LOCK;
			}
			else{
				state = START;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 1c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 1ca:	f6 c1       	rjmp	.+1004   	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT:
			if((PINA & 0x07) == 0x04){
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	87 70       	andi	r24, 0x07	; 7
 1da:	99 27       	eor	r25, r25
 1dc:	04 97       	sbiw	r24, 0x04	; 4
 1de:	39 f4       	brne	.+14     	; 0x1ee <Tick+0xb6>
				state = WAIT;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 1e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = START;
				
			}
			break;
 1ec:	e5 c1       	rjmp	.+970    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT:
			if((PINA & 0x07) == 0x04){
				state = WAIT;
				
			}
			else if((PINA & 0x07) == 0x00){
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	88 2f       	mov	r24, r24
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	87 70       	andi	r24, 0x07	; 7
 1fc:	99 27       	eor	r25, r25
 1fe:	89 2b       	or	r24, r25
 200:	39 f4       	brne	.+14     	; 0x210 <Tick+0xd8>
				state = HASH;
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 20a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = START;
				
			}
			break;
 20e:	d4 c1       	rjmp	.+936    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			else if((PINA & 0x07) == 0x00){
				state = HASH;
				
			}
			else{
				state = START;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 218:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				
			}
			break;
 21c:	cd c1       	rjmp	.+922    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case HASH:
			if((PINA & 0x07) == code[i]){
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	9c 01       	movw	r18, r24
 22c:	27 70       	andi	r18, 0x07	; 7
 22e:	33 27       	eor	r19, r19
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	80 50       	subi	r24, 0x00	; 0
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	28 17       	cp	r18, r24
 246:	39 07       	cpc	r19, r25
 248:	39 f4       	brne	.+14     	; 0x258 <Tick+0x120>
				state = WAIT3;
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 252:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = START;
			}
			else{
				state = HASH;
			}
			break;
 256:	b0 c1       	rjmp	.+864    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			break;
		case HASH:
			if((PINA & 0x07) == code[i]){
				state = WAIT3;
			}
			else if(i == 4){
 258:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	39 f4       	brne	.+14     	; 0x26e <Tick+0x136>
				state = UNLOCKED;
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 268:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = START;
			}
			else{
				state = HASH;
			}
			break;
 26c:	a5 c1       	rjmp	.+842    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = WAIT3;
			}
			else if(i == 4){
				state = UNLOCKED;
			}
			else if((PINA & 0x87) == 0x80){
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	87 78       	andi	r24, 0x87	; 135
 27c:	99 27       	eor	r25, r25
 27e:	80 38       	cpi	r24, 0x80	; 128
 280:	91 05       	cpc	r25, r1
 282:	39 f4       	brne	.+14     	; 0x292 <Tick+0x15a>
				state = LOCK;
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 28c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = START;
			}
			else{
				state = HASH;
			}
			break;
 290:	93 c1       	rjmp	.+806    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = UNLOCKED;
			}
			else if((PINA & 0x87) == 0x80){
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x00){
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	87 78       	andi	r24, 0x87	; 135
 2a0:	99 27       	eor	r25, r25
 2a2:	89 2b       	or	r24, r25
 2a4:	39 f4       	brne	.+14     	; 0x2b4 <Tick+0x17c>
				state = HASH;
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 2ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = START;
			}
			else{
				state = HASH;
			}
			break;
 2b2:	82 c1       	rjmp	.+772    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x00){
				state = HASH;
			}
			else if((PINA & 0x87) != code[i]){
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	88 2f       	mov	r24, r24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9c 01       	movw	r18, r24
 2c2:	27 78       	andi	r18, 0x87	; 135
 2c4:	33 27       	eor	r19, r19
 2c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	80 50       	subi	r24, 0x00	; 0
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	28 17       	cp	r18, r24
 2dc:	39 07       	cpc	r19, r25
 2de:	39 f0       	breq	.+14     	; 0x2ee <Tick+0x1b6>
				state = START;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 2e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = HASH;
			}
			break;
 2ec:	65 c1       	rjmp	.+714    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			}
			else if((PINA & 0x87) != code[i]){
				state = START;
			}
			else{
				state = HASH;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 2f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 2fa:	5e c1       	rjmp	.+700    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case UNLOCKED:
			if((PINA & 0x87) == 0x80){
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	88 2f       	mov	r24, r24
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	87 78       	andi	r24, 0x87	; 135
 30a:	99 27       	eor	r25, r25
 30c:	80 38       	cpi	r24, 0x80	; 128
 30e:	91 05       	cpc	r25, r1
 310:	39 f4       	brne	.+14     	; 0x320 <Tick+0x1e8>
				state = LOCK;
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 31a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = WAIT2;
			}
			else{
				state = UNLOCKED;
			}
			break;
 31e:	4c c1       	rjmp	.+664    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			break;
		case UNLOCKED:
			if((PINA & 0x87) == 0x80){
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x04){
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	87 78       	andi	r24, 0x87	; 135
 32e:	99 27       	eor	r25, r25
 330:	04 97       	sbiw	r24, 0x04	; 4
 332:	39 f4       	brne	.+14     	; 0x342 <Tick+0x20a>
				state = WAIT2;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 33c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = UNLOCKED;
			}
			break;
 340:	3b c1       	rjmp	.+630    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			}
			else if((PINA & 0x87) == 0x04){
				state = WAIT2;
			}
			else{
				state = UNLOCKED;
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 34a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 34e:	34 c1       	rjmp	.+616    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		
		case LOCK:
			if((PINA & 0x87) == 0x80){ //if they keep holding then keep it here
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	87 78       	andi	r24, 0x87	; 135
 35e:	99 27       	eor	r25, r25
 360:	80 38       	cpi	r24, 0x80	; 128
 362:	91 05       	cpc	r25, r1
 364:	39 f4       	brne	.+14     	; 0x374 <Tick+0x23c>
				state = LOCK;
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 36e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 372:	22 c1       	rjmp	.+580    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		
		case LOCK:
			if((PINA & 0x87) == 0x80){ //if they keep holding then keep it here
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x01){
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	80 81       	ld	r24, Z
 37c:	88 2f       	mov	r24, r24
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	87 70       	andi	r24, 0x07	; 7
 382:	99 27       	eor	r25, r25
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	39 f4       	brne	.+14     	; 0x396 <Tick+0x25e>
				state = LOCK;
 388:	85 e0       	ldi	r24, 0x05	; 5
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 390:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 394:	11 c1       	rjmp	.+546    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x01){
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x02){
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	87 70       	andi	r24, 0x07	; 7
 3a4:	99 27       	eor	r25, r25
 3a6:	02 97       	sbiw	r24, 0x02	; 2
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <Tick+0x280>
				state = LOCK;
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 3b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 3b6:	00 c1       	rjmp	.+512    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x02){
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x04){
 3b8:	80 e2       	ldi	r24, 0x20	; 32
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	87 70       	andi	r24, 0x07	; 7
 3c6:	99 27       	eor	r25, r25
 3c8:	04 97       	sbiw	r24, 0x04	; 4
 3ca:	39 f4       	brne	.+14     	; 0x3da <Tick+0x2a2>
				state = LOCK;
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 3d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 3d8:	ef c0       	rjmp	.+478    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x04){
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x07){
 3da:	80 e2       	ldi	r24, 0x20	; 32
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	87 70       	andi	r24, 0x07	; 7
 3e8:	99 27       	eor	r25, r25
 3ea:	07 97       	sbiw	r24, 0x07	; 7
 3ec:	39 f4       	brne	.+14     	; 0x3fc <Tick+0x2c4>
				state = LOCK;
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 3f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = LOCK;
			}
			else{
				state = START;
			}
			break;
 3fa:	de c0       	rjmp	.+444    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x07){
				state = LOCK;
			}
			else if((PINA & 0x07) == 0x87){
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	80 81       	ld	r24, Z
				state = LOCK;
			}
			else{
				state = START;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 40c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 410:	d3 c0       	rjmp	.+422    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT2:
			if((PINA & 0x07) == 0x04){
 412:	80 e2       	ldi	r24, 0x20	; 32
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	80 81       	ld	r24, Z
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	87 70       	andi	r24, 0x07	; 7
 420:	99 27       	eor	r25, r25
 422:	04 97       	sbiw	r24, 0x04	; 4
 424:	39 f4       	brne	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				state = WAIT2;
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 42e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = UNLOCKED;
			
			}
			break;
 432:	c2 c0       	rjmp	.+388    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT2:
			if((PINA & 0x07) == 0x04){
				state = WAIT2;
			
			}
			else if((PINA & 0x07) == 0x00){
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	80 81       	ld	r24, Z
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	87 70       	andi	r24, 0x07	; 7
 442:	99 27       	eor	r25, r25
 444:	89 2b       	or	r24, r25
 446:	39 f4       	brne	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				state = LOCK2;
 448:	87 e0       	ldi	r24, 0x07	; 7
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 450:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = UNLOCKED;
			
			}
			break;
 454:	b1 c0       	rjmp	.+354    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			else if((PINA & 0x07) == 0x00){
				state = LOCK2;
			
			}
			else{
				state = UNLOCKED;
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 45e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			
			}
			break;
 462:	aa c0       	rjmp	.+340    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case LOCK2:
			if((PINA & 0x07) == code[j]){
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9c 01       	movw	r18, r24
 472:	27 70       	andi	r18, 0x07	; 7
 474:	33 27       	eor	r19, r19
 476:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <j>
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	80 50       	subi	r24, 0x00	; 0
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	fc 01       	movw	r30, r24
 484:	80 81       	ld	r24, Z
 486:	88 2f       	mov	r24, r24
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	28 17       	cp	r18, r24
 48c:	39 07       	cpc	r19, r25
 48e:	39 f4       	brne	.+14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				state = WAIT4;
 490:	89 e0       	ldi	r24, 0x09	; 9
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 498:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = UNLOCKED;
			}
			else{
				state = LOCK2;
			}
			break;
 49c:	8d c0       	rjmp	.+282    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			break;
		case LOCK2:
			if((PINA & 0x07) == code[j]){
				state = WAIT4;
			}
			else if(j == 4){
 49e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <j>
 4a2:	84 30       	cpi	r24, 0x04	; 4
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
				state = LOCK;
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 4ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = UNLOCKED;
			}
			else{
				state = LOCK2;
			}
			break;
 4b2:	82 c0       	rjmp	.+260    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = WAIT4;
			}
			else if(j == 4){
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x80){
 4b4:	80 e2       	ldi	r24, 0x20	; 32
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	87 78       	andi	r24, 0x87	; 135
 4c2:	99 27       	eor	r25, r25
 4c4:	80 38       	cpi	r24, 0x80	; 128
 4c6:	91 05       	cpc	r25, r1
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				state = LOCK;
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 4d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = UNLOCKED;
			}
			else{
				state = LOCK2;
			}
			break;
 4d6:	70 c0       	rjmp	.+224    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x80){
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x00){
 4d8:	80 e2       	ldi	r24, 0x20	; 32
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	80 81       	ld	r24, Z
 4e0:	88 2f       	mov	r24, r24
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	87 78       	andi	r24, 0x87	; 135
 4e6:	99 27       	eor	r25, r25
 4e8:	89 2b       	or	r24, r25
 4ea:	39 f4       	brne	.+14     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				state = LOCK2;
 4ec:	87 e0       	ldi	r24, 0x07	; 7
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 4f4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
				state = UNLOCKED;
			}
			else{
				state = LOCK2;
			}
			break;
 4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				state = LOCK;
			}
			else if((PINA & 0x87) == 0x00){
				state = LOCK2;
			}
			else if((PINA & 0x87) != code[j]){
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	80 81       	ld	r24, Z
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9c 01       	movw	r18, r24
 508:	27 78       	andi	r18, 0x87	; 135
 50a:	33 27       	eor	r19, r19
 50c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <j>
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	80 50       	subi	r24, 0x00	; 0
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	28 17       	cp	r18, r24
 522:	39 07       	cpc	r19, r25
 524:	39 f0       	breq	.+14     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
				state = UNLOCKED;
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 52e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = LOCK2;
			}
			break;
 532:	42 c0       	rjmp	.+132    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			}
			else if((PINA & 0x87) != code[j]){
				state = UNLOCKED;
			}
			else{
				state = LOCK2;
 534:	87 e0       	ldi	r24, 0x07	; 7
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 53c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 540:	3b c0       	rjmp	.+118    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT3:
			if((PINA & 0x87) == 0x00){
 542:	80 e2       	ldi	r24, 0x20	; 32
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	80 81       	ld	r24, Z
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	87 78       	andi	r24, 0x87	; 135
 550:	99 27       	eor	r25, r25
 552:	89 2b       	or	r24, r25
 554:	61 f4       	brne	.+24     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
				i++;
 556:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				state = HASH;
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 568:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = WAIT3;
			}
			break;
 56c:	25 c0       	rjmp	.+74     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			if((PINA & 0x87) == 0x00){
				i++;
				state = HASH;
			}
			else{
				state = WAIT3;
 56e:	88 e0       	ldi	r24, 0x08	; 8
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 576:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 57a:	1e c0       	rjmp	.+60     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		case WAIT4:
			if((PINA & 0x87) == 0x00){
 57c:	80 e2       	ldi	r24, 0x20	; 32
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	87 78       	andi	r24, 0x87	; 135
 58a:	99 27       	eor	r25, r25
 58c:	89 2b       	or	r24, r25
 58e:	61 f4       	brne	.+24     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
				j++;
 590:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <j>
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <j>
				state = LOCK2;
 59a:	87 e0       	ldi	r24, 0x07	; 7
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 5a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			else{
				state = WAIT4;
			}
			break;
 5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			if((PINA & 0x87) == 0x00){
				j++;
				state = LOCK2;
			}
			else{
				state = WAIT4;
 5a8:	89 e0       	ldi	r24, 0x09	; 9
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 5b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
			}
			break;
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		
		default:
		break;
 5b6:	00 00       	nop
		
		
		
	}
	
	switch(state){ //actions
 5b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
 5bc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <state+0x1>
 5c0:	cc 01       	movw	r24, r24
 5c2:	a0 e0       	ldi	r26, 0x00	; 0
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	28 e0       	ldi	r18, 0x08	; 8
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	84 1b       	sub	r24, r20
 5d0:	95 0b       	sbc	r25, r21
 5d2:	28 17       	cp	r18, r24
 5d4:	39 07       	cpc	r19, r25
 5d6:	08 f4       	brcc	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d8:	72 c0       	rjmp	.+228    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 5da:	80 5b       	subi	r24, 0xB0	; 176
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	fc 01       	movw	r30, r24
 5e0:	73 c0       	rjmp	.+230    	; 0x6c8 <__tablejump2__>
		case INIT:
			PORTC = 0x00;
 5e2:	88 e2       	ldi	r24, 0x28	; 40
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	fc 01       	movw	r30, r24
 5e8:	10 82       	st	Z, r1
			PORTB = 0x00;
 5ea:	85 e2       	ldi	r24, 0x25	; 37
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	fc 01       	movw	r30, r24
 5f0:	10 82       	st	Z, r1
			break;
 5f2:	66 c0       	rjmp	.+204    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case START:
			PORTC = 0x01;
 5f4:	88 e2       	ldi	r24, 0x28	; 40
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
			PORTB = PORTB;
 5fe:	85 e2       	ldi	r24, 0x25	; 37
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	25 e2       	ldi	r18, 0x25	; 37
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	f9 01       	movw	r30, r18
 608:	20 81       	ld	r18, Z
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
			i = 0;
 60e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			break;
 612:	56 c0       	rjmp	.+172    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case WAIT:
			PORTC = 0x02;
 614:	88 e2       	ldi	r24, 0x28	; 40
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	22 e0       	ldi	r18, 0x02	; 2
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
			PORTB = PORTB;
 61e:	85 e2       	ldi	r24, 0x25	; 37
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	25 e2       	ldi	r18, 0x25	; 37
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	f9 01       	movw	r30, r18
 628:	20 81       	ld	r18, Z
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
			break;
 62e:	48 c0       	rjmp	.+144    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case HASH:
			PORTC = 0x03;
 630:	88 e2       	ldi	r24, 0x28	; 40
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	23 e0       	ldi	r18, 0x03	; 3
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
			PORTB = PORTB;
 63a:	85 e2       	ldi	r24, 0x25	; 37
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	25 e2       	ldi	r18, 0x25	; 37
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
			break;
 64a:	3a c0       	rjmp	.+116    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case UNLOCKED:
			PORTB = 0x01;
 64c:	85 e2       	ldi	r24, 0x25	; 37
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
			PORTC = 0x04;
 656:	88 e2       	ldi	r24, 0x28	; 40
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	24 e0       	ldi	r18, 0x04	; 4
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
			break;
 660:	2f c0       	rjmp	.+94     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case LOCK:
			PORTB = 0x00;
 662:	85 e2       	ldi	r24, 0x25	; 37
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	fc 01       	movw	r30, r24
 668:	10 82       	st	Z, r1
			PORTC = 0x05;
 66a:	88 e2       	ldi	r24, 0x28	; 40
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	25 e0       	ldi	r18, 0x05	; 5
 670:	fc 01       	movw	r30, r24
 672:	20 83       	st	Z, r18
			break;
 674:	25 c0       	rjmp	.+74     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case WAIT2:
			PORTB = 0x01;
 676:	85 e2       	ldi	r24, 0x25	; 37
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
			PORTC = 0x06;
 680:	88 e2       	ldi	r24, 0x28	; 40
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	26 e0       	ldi	r18, 0x06	; 6
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
			break;
 68a:	1a c0       	rjmp	.+52     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case LOCK2:
			PORTB = 0x01;
 68c:	85 e2       	ldi	r24, 0x25	; 37
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	21 e0       	ldi	r18, 0x01	; 1
 692:	fc 01       	movw	r30, r24
 694:	20 83       	st	Z, r18
			PORTC = 0x07;
 696:	88 e2       	ldi	r24, 0x28	; 40
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	27 e0       	ldi	r18, 0x07	; 7
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
			break;
 6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		case WAIT3:
			PORTB = PORTB;
 6a2:	85 e2       	ldi	r24, 0x25	; 37
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	25 e2       	ldi	r18, 0x25	; 37
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	f9 01       	movw	r30, r18
 6ac:	20 81       	ld	r18, Z
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
			PORTC = 0x08;
 6b2:	88 e2       	ldi	r24, 0x28	; 40
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	28 e0       	ldi	r18, 0x08	; 8
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18
			break;
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		default:
			break;
 6be:	00 00       	nop
		
		
	}
	
}
 6c0:	00 00       	nop
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <__tablejump2__>:
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	00 24       	eor	r0, r0
 6ce:	00 1c       	adc	r0, r0
 6d0:	0b be       	out	0x3b, r0	; 59
 6d2:	07 90       	elpm	r0, Z+
 6d4:	f6 91       	elpm	r31, Z
 6d6:	e0 2d       	mov	r30, r0
 6d8:	09 94       	ijmp

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
