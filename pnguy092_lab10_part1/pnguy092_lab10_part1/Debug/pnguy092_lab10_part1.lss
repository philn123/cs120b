
pnguy092_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000388  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b1 d0       	rcall	.+354    	; 0x226 <main>
  c4:	c3 c0       	rjmp	.+390    	; 0x24c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
}
void TimerOff() {
    TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
void TimerISR() {
    TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
    // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
    _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
    if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
}
void TimerOff() {
    TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
void TimerISR() {
    TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
ISR(TIMER1_COMPA_vect) {
    // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
    _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
    if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
        TimerISR(); // Call the ISR that the user uses
        _avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 172:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
    }
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
// Set TimerISR() to tick every M ms
void TimerSet( unsigned long M) {
    _avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    _avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 19c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <ThreeLed>:
        TimerFlag = 0;
    }
}

void ThreeLed(){
    switch(state3){
 1aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state3>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <ThreeLed+0xe>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <ThreeLed+0x1a>
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <ThreeLed+0x16>
        case TStart:
            state3 = TGo;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state3>
            break;
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <ThreeLed+0x1a>
            state3 = TGo;
            break;
        default:
            break;
    }
    switch(state3){
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	89 f4       	brne	.+34     	; 0x1e6 <ThreeLed+0x3c>
        case TStart:
            break;
        case TGo:
            if(three_leds == 0x04){
 1c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <three_leds>
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <ThreeLed+0x2a>
                three_leds = 0x01;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <three_leds>
 1d2:	08 95       	ret
            }
            else if(three_leds == 0x00){
 1d4:	81 11       	cpse	r24, r1
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <ThreeLed+0x36>
                three_leds = 0x01;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <three_leds>
 1de:	08 95       	ret
            }
            else{
                three_leds = three_leds << 1;   
 1e0:	88 0f       	add	r24, r24
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <three_leds>
 1e6:	08 95       	ret

000001e8 <BlinkingLed>:
    }
    
    
}
void BlinkingLed(){
    switch(blink_state){
 1e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <blink_state>
 1ec:	88 23       	and	r24, r24
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <BlinkingLed+0xe>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	39 f0       	breq	.+14     	; 0x202 <BlinkingLed+0x1a>
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <BlinkingLed+0x16>
        case BStart:
            blink_state = Blink;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <blink_state>
            break;
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <BlinkingLed+0x1a>
            blink_state = Blink;
            break;
        default:
            break;
    }
    switch(blink_state){
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	51 f4       	brne	.+20     	; 0x216 <BlinkingLed+0x2e>
        case BStart:
            break;
        case Blink:
            if(blinking_led == 0x00){
 202:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 206:	81 11       	cpse	r24, r1
 208:	04 c0       	rjmp	.+8      	; 0x212 <BlinkingLed+0x2a>
                blinking_led = 0x08;
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
                break;
 210:	08 95       	ret
            }
            else{
                blinking_led = 0x00;
 212:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 216:	08 95       	ret

00000218 <CombineLed>:
        default:
            break;
    }
}
void CombineLed(){
    PORTB = blinking_led | three_leds;
 218:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <three_leds>
 220:	89 2b       	or	r24, r25
 222:	85 b9       	out	0x05, r24	; 5
 224:	08 95       	ret

00000226 <main>:


int main(void)
{
    /* Replace with your application code */
    DDRB = 0xFF; PORTB = 0x00;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	84 b9       	out	0x04, r24	; 4
 22a:	15 b8       	out	0x05, r1	; 5
    TimerSet(100);
 22c:	64 e6       	ldi	r22, 0x64	; 100
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	a9 df       	rcall	.-174    	; 0x188 <TimerSet>
    TimerOn();    
 236:	48 df       	rcall	.-368    	; 0xc8 <TimerOn>
    
    while (1) 
    {
        ThreeLed();
 238:	b8 df       	rcall	.-144    	; 0x1aa <ThreeLed>
        BlinkingLed();
 23a:	d6 df       	rcall	.-84     	; 0x1e8 <BlinkingLed>
 23c:	ed df       	rcall	.-38     	; 0x218 <CombineLed>
        CombineLed();
 23e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
        while(!TimerFlag);
 242:	88 23       	and	r24, r24
 244:	e1 f3       	breq	.-8      	; 0x23e <main+0x18>
 246:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
        TimerFlag = 0;
 24a:	f6 cf       	rjmp	.-20     	; 0x238 <main+0x12>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
    }
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
