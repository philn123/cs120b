
pnguy092_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	27 c1       	rjmp	.+590    	; 0x2fa <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
enum States{INIT, WAIT, INCREMENT, DECREMENT, WAIT2, RESET} state;
void Tick();


int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    DDRA = 0x00; PORTA = 0xFF;
  b6:	81 e2       	ldi	r24, 0x21	; 33
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
  be:	82 e2       	ldi	r24, 0x22	; 34
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
    DDRC = 0xFF; PORTC = 0x07;
  c8:	87 e2       	ldi	r24, 0x27	; 39
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	88 e2       	ldi	r24, 0x28	; 40
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
    state = INIT;
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    while (1) 
    {
        Tick();
  e4:	01 d0       	rcall	.+2      	; 0xe8 <Tick>
    }
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x36>

000000e8 <Tick>:
}

void Tick(){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
    switch(state){ //transitions
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <Tick+0x18>
  fe:	55 c0       	rjmp	.+170    	; 0x1aa <Tick+0xc2>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	91 05       	cpc	r25, r1
 104:	28 f4       	brcc	.+10     	; 0x110 <Tick+0x28>
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	79 f0       	breq	.+30     	; 0x128 <Tick+0x40>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	a1 f0       	breq	.+40     	; 0x136 <Tick+0x4e>
            else{
                state = WAIT;
            }
            break;
        default:
           break;
 10e:	8f c0       	rjmp	.+286    	; 0x22e <Tick+0x146>
        Tick();
    }
}

void Tick(){
    switch(state){ //transitions
 110:	84 30       	cpi	r24, 0x04	; 4
 112:	91 05       	cpc	r25, r1
 114:	09 f4       	brne	.+2      	; 0x118 <Tick+0x30>
 116:	57 c0       	rjmp	.+174    	; 0x1c6 <Tick+0xde>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	91 05       	cpc	r25, r1
 11c:	08 f4       	brcc	.+2      	; 0x120 <Tick+0x38>
 11e:	4c c0       	rjmp	.+152    	; 0x1b8 <Tick+0xd0>
 120:	05 97       	sbiw	r24, 0x05	; 5
 122:	09 f4       	brne	.+2      	; 0x126 <Tick+0x3e>
 124:	79 c0       	rjmp	.+242    	; 0x218 <Tick+0x130>
            else{
                state = WAIT;
            }
            break;
        default:
           break;
 126:	83 c0       	rjmp	.+262    	; 0x22e <Tick+0x146>
}

void Tick(){
    switch(state){ //transitions
        case INIT:
            state = WAIT;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 134:	7c c0       	rjmp	.+248    	; 0x22e <Tick+0x146>
        case WAIT:
            if((PINA & 0x03) == 0x03){
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	83 70       	andi	r24, 0x03	; 3
 144:	99 27       	eor	r25, r25
 146:	03 97       	sbiw	r24, 0x03	; 3
 148:	39 f4       	brne	.+14     	; 0x158 <Tick+0x70>
                state = RESET;
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
                state = DECREMENT;
            }
            else{
                state = WAIT;
            }
            break;
 156:	6b c0       	rjmp	.+214    	; 0x22e <Tick+0x146>
            break;
        case WAIT:
            if((PINA & 0x03) == 0x03){
                state = RESET;
            }
            else if((PINA & 0x03) == 0x01){
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	83 70       	andi	r24, 0x03	; 3
 166:	99 27       	eor	r25, r25
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	39 f4       	brne	.+14     	; 0x17a <Tick+0x92>
                state = INCREMENT;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
                state = DECREMENT;
            }
            else{
                state = WAIT;
            }
            break;
 178:	5a c0       	rjmp	.+180    	; 0x22e <Tick+0x146>
                state = RESET;
            }
            else if((PINA & 0x03) == 0x01){
                state = INCREMENT;
            }
            else if((PINA & 0x03) == 0x02){
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	83 70       	andi	r24, 0x03	; 3
 188:	99 27       	eor	r25, r25
 18a:	02 97       	sbiw	r24, 0x02	; 2
 18c:	39 f4       	brne	.+14     	; 0x19c <Tick+0xb4>
                state = DECREMENT;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = WAIT;
            }
            break;
 19a:	49 c0       	rjmp	.+146    	; 0x22e <Tick+0x146>
            }
            else if((PINA & 0x03) == 0x02){
                state = DECREMENT;
            }
            else{
                state = WAIT;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 1a8:	42 c0       	rjmp	.+132    	; 0x22e <Tick+0x146>
        case INCREMENT:
            state = WAIT2;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 1b6:	3b c0       	rjmp	.+118    	; 0x22e <Tick+0x146>
        case DECREMENT:
            state = WAIT2;
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 1c4:	34 c0       	rjmp	.+104    	; 0x22e <Tick+0x146>
        case WAIT2:
            if((PINA & 0x03) == 0x00){
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	83 70       	andi	r24, 0x03	; 3
 1d4:	99 27       	eor	r25, r25
 1d6:	89 2b       	or	r24, r25
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <Tick+0x100>
                state = WAIT;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
                state = RESET;
            }
            else{
                state = WAIT2;
            }
            break;
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <Tick+0x146>
            break;
        case WAIT2:
            if((PINA & 0x03) == 0x00){
                state = WAIT;
            }
            else if((PINA & 0x03) == 0x03){
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	83 70       	andi	r24, 0x03	; 3
 1f6:	99 27       	eor	r25, r25
 1f8:	03 97       	sbiw	r24, 0x03	; 3
 1fa:	39 f4       	brne	.+14     	; 0x20a <Tick+0x122>
                state = RESET;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = WAIT2;
            }
            break;
 208:	12 c0       	rjmp	.+36     	; 0x22e <Tick+0x146>
            }
            else if((PINA & 0x03) == 0x03){
                state = RESET;
            }
            else{
                state = WAIT2;
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 216:	0b c0       	rjmp	.+22     	; 0x22e <Tick+0x146>
        case RESET:
            if((PINA & 0x03) == 0x03 || 0x02 || 0x01){
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
                state = RESET;
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = WAIT;
            }
            break;
 22c:	00 00       	nop
        default:
           break;
    }
    switch(state){ //actions
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 232:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 05       	cpc	r25, r1
 23a:	11 f1       	breq	.+68     	; 0x280 <Tick+0x198>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	91 05       	cpc	r25, r1
 240:	28 f4       	brcc	.+10     	; 0x24c <Tick+0x164>
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	71 f0       	breq	.+28     	; 0x262 <Tick+0x17a>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	91 f0       	breq	.+36     	; 0x26e <Tick+0x186>
            break;
        case RESET:
            PORTC = 0x00;
            break;
        default:
            break;
 24a:	53 c0       	rjmp	.+166    	; 0x2f2 <Tick+0x20a>
            }
            break;
        default:
           break;
    }
    switch(state){ //actions
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	91 05       	cpc	r25, r1
 250:	09 f4       	brne	.+2      	; 0x254 <Tick+0x16c>
 252:	41 c0       	rjmp	.+130    	; 0x2d6 <Tick+0x1ee>
 254:	84 30       	cpi	r24, 0x04	; 4
 256:	91 05       	cpc	r25, r1
 258:	48 f1       	brcs	.+82     	; 0x2ac <Tick+0x1c4>
 25a:	05 97       	sbiw	r24, 0x05	; 5
 25c:	09 f4       	brne	.+2      	; 0x260 <Tick+0x178>
 25e:	44 c0       	rjmp	.+136    	; 0x2e8 <Tick+0x200>
            break;
        case RESET:
            PORTC = 0x00;
            break;
        default:
            break;
 260:	48 c0       	rjmp	.+144    	; 0x2f2 <Tick+0x20a>
        default:
           break;
    }
    switch(state){ //actions
        case INIT:
            PORTC = 0x07;
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	27 e0       	ldi	r18, 0x07	; 7
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
            break;
 26c:	42 c0       	rjmp	.+132    	; 0x2f2 <Tick+0x20a>
        case WAIT:
            PORTC = PORTC;
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	28 e2       	ldi	r18, 0x28	; 40
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
            break;
 27e:	39 c0       	rjmp	.+114    	; 0x2f2 <Tick+0x20a>
        case INCREMENT:
            if(PORTC < 0x09){
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	89 30       	cpi	r24, 0x09	; 9
 28a:	50 f4       	brcc	.+20     	; 0x2a0 <Tick+0x1b8>
                PORTC = PORTC + 1;
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	28 e2       	ldi	r18, 0x28	; 40
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	f9 01       	movw	r30, r18
 296:	20 81       	ld	r18, Z
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
            }
            else{
                PORTC = 0x09;
            }
            break;
 29e:	29 c0       	rjmp	.+82     	; 0x2f2 <Tick+0x20a>
        case INCREMENT:
            if(PORTC < 0x09){
                PORTC = PORTC + 1;
            }
            else{
                PORTC = 0x09;
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	29 e0       	ldi	r18, 0x09	; 9
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
            }
            break;
 2aa:	23 c0       	rjmp	.+70     	; 0x2f2 <Tick+0x20a>
        case DECREMENT:
            if(PORTC > 0){
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	51 f0       	breq	.+20     	; 0x2cc <Tick+0x1e4>
                PORTC = PORTC - 1;
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	28 e2       	ldi	r18, 0x28	; 40
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
            }
            else{
                PORTC = 0x00;
            }
            break;
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <Tick+0x20a>
        case DECREMENT:
            if(PORTC > 0){
                PORTC = PORTC - 1;
            }
            else{
                PORTC = 0x00;
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	10 82       	st	Z, r1
            }
            break;
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <Tick+0x20a>
        case WAIT2:
            PORTC = PORTC;
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	28 e2       	ldi	r18, 0x28	; 40
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
            break;
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <Tick+0x20a>
        case RESET:
            PORTC = 0x00;
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	10 82       	st	Z, r1
            break;
 2f0:	00 00       	nop

    }



}
 2f2:	00 00       	nop
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
