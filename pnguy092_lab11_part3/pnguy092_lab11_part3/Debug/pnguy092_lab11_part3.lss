
pnguy092_lab11_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000582  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc4  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078c  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c2  00000000  00000000  00002f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	c3 c0       	rjmp	.+390    	; 0x1bc <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b7 01       	movw	r22, r14
  8e:	59 02       	muls	r21, r25
  90:	59 02       	muls	r21, r25
  92:	59 02       	muls	r21, r25
  94:	59 02       	muls	r21, r25
  96:	59 02       	muls	r21, r25
  98:	59 02       	muls	r21, r25
  9a:	59 02       	muls	r21, r25
  9c:	59 02       	muls	r21, r25
  9e:	59 02       	muls	r21, r25
  a0:	59 02       	muls	r21, r25
  a2:	59 02       	muls	r21, r25
  a4:	59 02       	muls	r21, r25
  a6:	59 02       	muls	r21, r25
  a8:	59 02       	muls	r21, r25
  aa:	59 02       	muls	r21, r25
  ac:	59 02       	muls	r21, r25
  ae:	59 02       	muls	r21, r25
  b0:	59 02       	muls	r21, r25
  b2:	59 02       	muls	r21, r25
  b4:	59 02       	muls	r21, r25
  b6:	59 02       	muls	r21, r25
  b8:	59 02       	muls	r21, r25
  ba:	59 02       	muls	r21, r25
  bc:	59 02       	muls	r21, r25
  be:	59 02       	muls	r21, r25
  c0:	59 02       	muls	r21, r25
  c2:	59 02       	muls	r21, r25
  c4:	59 02       	muls	r21, r25
  c6:	59 02       	muls	r21, r25
  c8:	59 02       	muls	r21, r25
  ca:	59 02       	muls	r21, r25
  cc:	59 02       	muls	r21, r25
  ce:	59 02       	muls	r21, r25
  d0:	59 02       	muls	r21, r25
  d2:	4f 02       	muls	r20, r31
  d4:	59 02       	muls	r21, r25
  d6:	59 02       	muls	r21, r25
  d8:	59 02       	muls	r21, r25
  da:	59 02       	muls	r21, r25
  dc:	59 02       	muls	r21, r25
  de:	59 02       	muls	r21, r25
  e0:	3c 02       	muls	r19, r28
  e2:	59 02       	muls	r21, r25
  e4:	59 02       	muls	r21, r25
  e6:	59 02       	muls	r21, r25
  e8:	59 02       	muls	r21, r25
  ea:	59 02       	muls	r21, r25
  ec:	46 02       	muls	r20, r22
  ee:	bb 01       	movw	r22, r22
  f0:	c4 01       	movw	r24, r8
  f2:	ce 01       	movw	r24, r28
  f4:	d8 01       	movw	r26, r16
  f6:	e2 01       	movw	r28, r4
  f8:	ec 01       	movw	r28, r24
  fa:	f6 01       	movw	r30, r12
  fc:	00 02       	muls	r16, r16
  fe:	0a 02       	muls	r16, r26
 100:	59 02       	muls	r21, r25
 102:	59 02       	muls	r21, r25
 104:	59 02       	muls	r21, r25
 106:	59 02       	muls	r21, r25
 108:	59 02       	muls	r21, r25
 10a:	59 02       	muls	r21, r25
 10c:	59 02       	muls	r21, r25
 10e:	14 02       	muls	r17, r20
 110:	1e 02       	muls	r17, r30
 112:	28 02       	muls	r18, r24
 114:	32 02       	muls	r19, r18

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e2 e8       	ldi	r30, 0x82	; 130
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a5 31       	cpi	r26, 0x15	; 21
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	bc d1       	rcall	.+888    	; 0x4c6 <main>
 14e:	17 c2       	rjmp	.+1070   	; 0x57e <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <TimerSet>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
 152:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 156:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 15e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 162:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
 166:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
 16a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
 16e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
 172:	08 95       	ret

00000174 <TimerOn>:
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17a:	8d e7       	ldi	r24, 0x7D	; 125
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 190:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 1a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 1ac:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 1b0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 1b4:	8f b7       	in	r24, 0x3f	; 63
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8f bf       	out	0x3f, r24	; 63
 1ba:	08 95       	ret

000001bc <__vector_13>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 1d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 1d6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 1da:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
 1e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 1e8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 1ec:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 1f0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 1f4:	89 2b       	or	r24, r25
 1f6:	8a 2b       	or	r24, r26
 1f8:	8b 2b       	or	r24, r27
 1fa:	99 f4       	brne	.+38     	; 0x222 <__vector_13+0x66>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 20e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 212:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 216:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 21a:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 21e:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <delay_ms>:
 234:	18 16       	cp	r1, r24
 236:	19 06       	cpc	r1, r25
 238:	5c f0       	brlt	.+22     	; 0x250 <delay_ms+0x1c>
 23a:	08 95       	ret
 23c:	00 00       	nop
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	31 09       	sbc	r19, r1
 242:	e1 f7       	brne	.-8      	; 0x23c <delay_ms+0x8>
 244:	4f 5f       	subi	r20, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	84 17       	cp	r24, r20
 24a:	95 07       	cpc	r25, r21
 24c:	19 f4       	brne	.+6      	; 0x254 <delay_ms+0x20>
 24e:	08 95       	ret
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	27 e0       	ldi	r18, 0x07	; 7
 256:	33 e0       	ldi	r19, 0x03	; 3
 258:	f1 cf       	rjmp	.-30     	; 0x23c <delay_ms+0x8>

0000025a <LCD_WriteCommand>:
 25a:	10 98       	cbi	0x02, 0	; 2
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	11 9a       	sbi	0x02, 1	; 2
 260:	00 00       	nop
 262:	11 98       	cbi	0x02, 1	; 2
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	e5 cf       	rjmp	.-54     	; 0x234 <delay_ms>
 26a:	08 95       	ret

0000026c <LCD_ClearScreen>:
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	f5 cf       	rjmp	.-22     	; 0x25a <LCD_WriteCommand>
 270:	08 95       	ret

00000272 <LCD_Cursor>:
 272:	81 31       	cpi	r24, 0x11	; 17
 274:	18 f4       	brcc	.+6      	; 0x27c <LCD_Cursor+0xa>
 276:	81 58       	subi	r24, 0x81	; 129
 278:	f0 cf       	rjmp	.-32     	; 0x25a <LCD_WriteCommand>
 27a:	08 95       	ret
 27c:	81 55       	subi	r24, 0x51	; 81
 27e:	ed cf       	rjmp	.-38     	; 0x25a <LCD_WriteCommand>
 280:	08 95       	ret

00000282 <LCD_init>:
 282:	84 e6       	ldi	r24, 0x64	; 100
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	d6 df       	rcall	.-84     	; 0x234 <delay_ms>
 288:	88 e3       	ldi	r24, 0x38	; 56
 28a:	e7 df       	rcall	.-50     	; 0x25a <LCD_WriteCommand>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	e5 df       	rcall	.-54     	; 0x25a <LCD_WriteCommand>
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	e3 df       	rcall	.-58     	; 0x25a <LCD_WriteCommand>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	e1 df       	rcall	.-62     	; 0x25a <LCD_WriteCommand>
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	cb cf       	rjmp	.-106    	; 0x234 <delay_ms>
 29e:	08 95       	ret

000002a0 <LCD_WriteData>:
 2a0:	10 9a       	sbi	0x02, 0	; 2
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	11 9a       	sbi	0x02, 1	; 2
 2a6:	00 00       	nop
 2a8:	11 98       	cbi	0x02, 1	; 2
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	c2 cf       	rjmp	.-124    	; 0x234 <delay_ms>
 2b0:	08 95       	ret

000002b2 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 2b2:	8f ee       	ldi	r24, 0xEF	; 239
 2b4:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2b6:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 2b8:	30 9b       	sbis	0x06, 0	; 6
 2ba:	29 c0       	rjmp	.+82     	; 0x30e <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 2bc:	31 9b       	sbis	0x06, 1	; 6
 2be:	29 c0       	rjmp	.+82     	; 0x312 <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 2c0:	32 9b       	sbis	0x06, 2	; 6
 2c2:	29 c0       	rjmp	.+82     	; 0x316 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 2c4:	33 9b       	sbis	0x06, 3	; 6
 2c6:	29 c0       	rjmp	.+82     	; 0x31a <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 2c8:	8f ed       	ldi	r24, 0xDF	; 223
 2ca:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2cc:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 2ce:	30 9b       	sbis	0x06, 0	; 6
 2d0:	26 c0       	rjmp	.+76     	; 0x31e <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 2d2:	31 9b       	sbis	0x06, 1	; 6
 2d4:	26 c0       	rjmp	.+76     	; 0x322 <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 2d6:	32 9b       	sbis	0x06, 2	; 6
 2d8:	26 c0       	rjmp	.+76     	; 0x326 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 2da:	33 9b       	sbis	0x06, 3	; 6
 2dc:	26 c0       	rjmp	.+76     	; 0x32a <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 2de:	8f eb       	ldi	r24, 0xBF	; 191
 2e0:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2e2:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 2e4:	30 9b       	sbis	0x06, 0	; 6
 2e6:	23 c0       	rjmp	.+70     	; 0x32e <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 2e8:	31 9b       	sbis	0x06, 1	; 6
 2ea:	23 c0       	rjmp	.+70     	; 0x332 <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 2ec:	32 9b       	sbis	0x06, 2	; 6
 2ee:	23 c0       	rjmp	.+70     	; 0x336 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 2f0:	33 9b       	sbis	0x06, 3	; 6
 2f2:	23 c0       	rjmp	.+70     	; 0x33a <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 2f4:	8f e7       	ldi	r24, 0x7F	; 127
 2f6:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2f8:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 2fa:	30 9b       	sbis	0x06, 0	; 6
 2fc:	20 c0       	rjmp	.+64     	; 0x33e <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 2fe:	31 9b       	sbis	0x06, 1	; 6
 300:	20 c0       	rjmp	.+64     	; 0x342 <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 302:	32 9b       	sbis	0x06, 2	; 6
 304:	20 c0       	rjmp	.+64     	; 0x346 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 306:	33 9b       	sbis	0x06, 3	; 6
 308:	20 c0       	rjmp	.+64     	; 0x34a <GetKeypadKey+0x98>
	
	return '\0';
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 30e:	81 e3       	ldi	r24, 0x31	; 49
 310:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 312:	84 e3       	ldi	r24, 0x34	; 52
 314:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 316:	87 e3       	ldi	r24, 0x37	; 55
 318:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 31a:	8a e2       	ldi	r24, 0x2A	; 42
 31c:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 32e:	83 e3       	ldi	r24, 0x33	; 51
 330:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 332:	86 e3       	ldi	r24, 0x36	; 54
 334:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 336:	89 e3       	ldi	r24, 0x39	; 57
 338:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 33a:	83 e2       	ldi	r24, 0x23	; 35
 33c:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 33e:	81 e4       	ldi	r24, 0x41	; 65
 340:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 346:	83 e4       	ldi	r24, 0x43	; 67
 348:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 34a:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 34c:	08 95       	ret

0000034e <SM1Tick>:
#include "keypad.h"

enum States{SM1_out};
unsigned char tmpB = 0x00;

int SM1Tick(int state){
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
    unsigned char x;
    x = GetKeypadKey();
 354:	ae df       	rcall	.-164    	; 0x2b2 <GetKeypadKey>
    switch(state){
 356:	20 97       	sbiw	r28, 0x00	; 0
 358:	09 f0       	breq	.+2      	; 0x35c <SM1Tick+0xe>
 35a:	b1 c0       	rjmp	.+354    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
        case SM1_out:
        switch(x){
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	85 34       	cpi	r24, 0x45	; 69
 360:	91 05       	cpc	r25, r1
 362:	08 f0       	brcs	.+2      	; 0x366 <SM1Tick+0x18>
 364:	a6 c0       	rjmp	.+332    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 366:	fc 01       	movw	r30, r24
 368:	ea 5b       	subi	r30, 0xBA	; 186
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	ff c0       	rjmp	.+510    	; 0x56c <__tablejump2__>
            case '\0': tmpB = 0x1F; break; // All 5 LEDs on
 36e:	8f e1       	ldi	r24, 0x1F	; 31
 370:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 374:	a1 c0       	rjmp	.+322    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
            case '1': tmpB = 0x01;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break; // hex equivalent
 37c:	7a df       	rcall	.-268    	; 0x272 <LCD_Cursor>
 37e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 382:	80 5d       	subi	r24, 0xD0	; 208
 384:	8d df       	rcall	.-230    	; 0x2a0 <LCD_WriteData>
 386:	98 c0       	rjmp	.+304    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
            case '2': tmpB = 0x02;
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	70 df       	rcall	.-288    	; 0x272 <LCD_Cursor>
 392:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 396:	80 5d       	subi	r24, 0xD0	; 208
 398:	83 df       	rcall	.-250    	; 0x2a0 <LCD_WriteData>
            case '3': tmpB = 0x03;
 39a:	8e c0       	rjmp	.+284    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 39c:	83 e0       	ldi	r24, 0x03	; 3
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 39e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	66 df       	rcall	.-308    	; 0x272 <LCD_Cursor>
 3a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	79 df       	rcall	.-270    	; 0x2a0 <LCD_WriteData>
            case '4': tmpB = 0x04;
 3ae:	84 c0       	rjmp	.+264    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3b0:	84 e0       	ldi	r24, 0x04	; 4
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 3b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	5c df       	rcall	.-328    	; 0x272 <LCD_Cursor>
 3ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 3be:	80 5d       	subi	r24, 0xD0	; 208
            case '5': tmpB = 0x05;
 3c0:	6f df       	rcall	.-290    	; 0x2a0 <LCD_WriteData>
 3c2:	7a c0       	rjmp	.+244    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3c4:	85 e0       	ldi	r24, 0x05	; 5
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 3c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	52 df       	rcall	.-348    	; 0x272 <LCD_Cursor>
 3ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 3d2:	80 5d       	subi	r24, 0xD0	; 208
            case '6': tmpB = 0x06;
 3d4:	65 df       	rcall	.-310    	; 0x2a0 <LCD_WriteData>
 3d6:	70 c0       	rjmp	.+224    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	48 df       	rcall	.-368    	; 0x272 <LCD_Cursor>
 3e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 3e6:	80 5d       	subi	r24, 0xD0	; 208
            case '7': tmpB = 0x07;
 3e8:	5b df       	rcall	.-330    	; 0x2a0 <LCD_WriteData>
 3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 3ec:	87 e0       	ldi	r24, 0x07	; 7
 3ee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	3e df       	rcall	.-388    	; 0x272 <LCD_Cursor>
 3f6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case '8': tmpB = 0x08;
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	51 df       	rcall	.-350    	; 0x2a0 <LCD_WriteData>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 3fe:	5c c0       	rjmp	.+184    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	34 df       	rcall	.-408    	; 0x272 <LCD_Cursor>
 40a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case '9': tmpB = 0x09;
 40e:	80 5d       	subi	r24, 0xD0	; 208
 410:	47 df       	rcall	.-370    	; 0x2a0 <LCD_WriteData>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 412:	52 c0       	rjmp	.+164    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	2a df       	rcall	.-428    	; 0x272 <LCD_Cursor>
 41e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case 'A': tmpB = 0x0A;
 422:	80 5d       	subi	r24, 0xD0	; 208
 424:	3d df       	rcall	.-390    	; 0x2a0 <LCD_WriteData>
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x37); break;
 426:	48 c0       	rjmp	.+144    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 428:	8a e0       	ldi	r24, 0x0A	; 10
 42a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	20 df       	rcall	.-448    	; 0x272 <LCD_Cursor>
 432:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case 'B': tmpB = 0x0B;
 436:	89 5c       	subi	r24, 0xC9	; 201
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x37); break;
 438:	33 df       	rcall	.-410    	; 0x2a0 <LCD_WriteData>
 43a:	3e c0       	rjmp	.+124    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 43c:	8b e0       	ldi	r24, 0x0B	; 11
 43e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	16 df       	rcall	.-468    	; 0x272 <LCD_Cursor>
 446:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case 'C': tmpB = 0x0C;
 44a:	89 5c       	subi	r24, 0xC9	; 201
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x37); break;
 44c:	29 df       	rcall	.-430    	; 0x2a0 <LCD_WriteData>
 44e:	34 c0       	rjmp	.+104    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 450:	8c e0       	ldi	r24, 0x0C	; 12
 452:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0c df       	rcall	.-488    	; 0x272 <LCD_Cursor>
            case 'D': tmpB = 0x0D;
 45a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x37); break;
 45e:	89 5c       	subi	r24, 0xC9	; 201
 460:	1f df       	rcall	.-450    	; 0x2a0 <LCD_WriteData>
 462:	2a c0       	rjmp	.+84     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	02 df       	rcall	.-508    	; 0x272 <LCD_Cursor>
            case '*': tmpB = 0x0E;
 46e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 472:	89 5c       	subi	r24, 0xC9	; 201
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x1C); break;
 474:	15 df       	rcall	.-470    	; 0x2a0 <LCD_WriteData>
 476:	20 c0       	rjmp	.+64     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 478:	8e e0       	ldi	r24, 0x0E	; 14
 47a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	f8 de       	rcall	.-528    	; 0x272 <LCD_Cursor>
 482:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
            case '0': tmpB = 0x00;
 486:	84 5e       	subi	r24, 0xE4	; 228
 488:	0b df       	rcall	.-490    	; 0x2a0 <LCD_WriteData>
            LCD_Cursor(1); LCD_WriteData(tmpB + '0'); break;
 48a:	16 c0       	rjmp	.+44     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 48c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tmpB>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	ef de       	rcall	.-546    	; 0x272 <LCD_Cursor>
 494:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	02 df       	rcall	.-508    	; 0x2a0 <LCD_WriteData>
            case '#': tmpB = 0x0F;
 49c:	0d c0       	rjmp	.+26     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 49e:	8f e0       	ldi	r24, 0x0F	; 15
 4a0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
            LCD_Cursor(1); LCD_WriteData(tmpB + 0x14); break;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	e5 de       	rcall	.-566    	; 0x272 <LCD_Cursor>
 4a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 4ac:	8c 5e       	subi	r24, 0xEC	; 236
 4ae:	f8 de       	rcall	.-528    	; 0x2a0 <LCD_WriteData>
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b2:	8b e1       	ldi	r24, 0x1B	; 27
            default: tmpB = 0x1B; break; // Should never occur. Middle LED off.
 4b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 4b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
        }
        PORTB = tmpB;
 4bc:	85 b9       	out	0x05, r24	; 5
 4be:	ce 01       	movw	r24, r28
        break;
    }
    return state;
    
    
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <main>:
 4c6:	8f ef       	ldi	r24, 0xFF	; 255

int main()
{
    DDRA = 0xFF; PORTA = 0x00;
 4c8:	81 b9       	out	0x01, r24	; 1
 4ca:	12 b8       	out	0x02, r1	; 2
    DDRD = 0xFF; PORTD = 0x00;
 4cc:	8a b9       	out	0x0a, r24	; 10
 4ce:	1b b8       	out	0x0b, r1	; 11
    DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 4d0:	84 b9       	out	0x04, r24	; 4
 4d2:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 4d4:	80 ef       	ldi	r24, 0xF0	; 240
 4d6:	87 b9       	out	0x07, r24	; 7
 4d8:	8f e0       	ldi	r24, 0x0F	; 15
 4da:	88 b9       	out	0x08, r24	; 8
    
    static task task1;
    task *tasks[] = {&task1};
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;
 4dc:	e4 e0       	ldi	r30, 0x04	; 4
 4de:	f1 e0       	ldi	r31, 0x01	; 1
 4e0:	10 82       	st	Z, r1
    task1.period = SM1Tick_period;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	a0 e0       	ldi	r26, 0x00	; 0
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	81 83       	std	Z+1, r24	; 0x01
 4ec:	92 83       	std	Z+2, r25	; 0x02
 4ee:	a3 83       	std	Z+3, r26	; 0x03
 4f0:	b4 83       	std	Z+4, r27	; 0x04
    task1.elapsedTime = SM1Tick_period;
 4f2:	85 83       	std	Z+5, r24	; 0x05
 4f4:	96 83       	std	Z+6, r25	; 0x06
 4f6:	a7 83       	std	Z+7, r26	; 0x07
 4f8:	b0 87       	std	Z+8, r27	; 0x08
    task1.TickFct = &SM1Tick;
 4fa:	87 ea       	ldi	r24, 0xA7	; 167
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	92 87       	std	Z+10, r25	; 0x0a
 500:	81 87       	std	Z+9, r24	; 0x09
    
    
    /* Replace with your application code */
    TimerSet(GCD);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	23 de       	rcall	.-954    	; 0x152 <TimerSet>
    TimerOn();
 50c:	33 de       	rcall	.-922    	; 0x174 <TimerOn>
    LCD_init();
 50e:	b9 de       	rcall	.-654    	; 0x282 <LCD_init>
 510:	ad de       	rcall	.-678    	; 0x26c <LCD_ClearScreen>
    LCD_ClearScreen();
 512:	c4 e0       	ldi	r28, 0x04	; 4
 514:	d1 e0       	ldi	r29, 0x01	; 1
    
    while(1) {
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 516:	4d 81       	ldd	r20, Y+5	; 0x05
 518:	5e 81       	ldd	r21, Y+6	; 0x06
 51a:	6f 81       	ldd	r22, Y+7	; 0x07
 51c:	78 85       	ldd	r23, Y+8	; 0x08
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	9a 81       	ldd	r25, Y+2	; 0x02
 522:	ab 81       	ldd	r26, Y+3	; 0x03
 524:	bc 81       	ldd	r27, Y+4	; 0x04
 526:	48 17       	cp	r20, r24
 528:	59 07       	cpc	r21, r25
 52a:	6a 07       	cpc	r22, r26
 52c:	7b 07       	cpc	r23, r27
 52e:	60 f0       	brcs	.+24     	; 0x548 <main+0x82>
 530:	88 81       	ld	r24, Y
 532:	e9 85       	ldd	r30, Y+9	; 0x09
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 534:	fa 85       	ldd	r31, Y+10	; 0x0a
 536:	08 2e       	mov	r0, r24
 538:	00 0c       	add	r0, r0
 53a:	99 0b       	sbc	r25, r25
 53c:	09 95       	icall
 53e:	88 83       	st	Y, r24
 540:	1d 82       	std	Y+5, r1	; 0x05
 542:	1e 82       	std	Y+6, r1	; 0x06
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 544:	1f 82       	std	Y+7, r1	; 0x07
 546:	18 86       	std	Y+8, r1	; 0x08
 548:	8d 81       	ldd	r24, Y+5	; 0x05
 54a:	9e 81       	ldd	r25, Y+6	; 0x06
            }
            tasks[i]->elapsedTime += 1;
 54c:	af 81       	ldd	r26, Y+7	; 0x07
 54e:	b8 85       	ldd	r27, Y+8	; 0x08
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	a1 1d       	adc	r26, r1
 554:	b1 1d       	adc	r27, r1
 556:	8d 83       	std	Y+5, r24	; 0x05
 558:	9e 83       	std	Y+6, r25	; 0x06
 55a:	af 83       	std	Y+7, r26	; 0x07
 55c:	b8 87       	std	Y+8, r27	; 0x08
 55e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
        }
        while(!TimerFlag);
 562:	88 23       	and	r24, r24
 564:	e1 f3       	breq	.-8      	; 0x55e <main+0x98>
 566:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
        TimerFlag = 0;
 56a:	d5 cf       	rjmp	.-86     	; 0x516 <main+0x50>

0000056c <__tablejump2__>:
 56c:	ee 0f       	add	r30, r30
    }
 56e:	ff 1f       	adc	r31, r31
 570:	00 24       	eor	r0, r0
 572:	00 1c       	adc	r0, r0
 574:	0b be       	out	0x3b, r0	; 59
 576:	07 90       	elpm	r0, Z+
 578:	f6 91       	elpm	r31, Z
 57a:	e0 2d       	mov	r30, r0
 57c:	09 94       	ijmp

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
