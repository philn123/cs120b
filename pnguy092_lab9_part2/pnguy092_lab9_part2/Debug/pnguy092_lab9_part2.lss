
pnguy092_lab9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000005c8  0000065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800124  00800124  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099c  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084f  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fa d0       	rcall	.+500    	; 0x2b8 <main>
  c4:	7f c2       	rjmp	.+1278   	; 0x5c4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:
#include <avr/io.h>

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
    
    // Keeps track of the currently set frequency
    // Will only update the registers when the frequency
    // changes, plays music uninterrupted.
    static double current_frequency;
    if (frequency != current_frequency) {
  d4:	9b 01       	movw	r18, r22
  d6:	ac 01       	movw	r20, r24
  d8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <__data_end>
  dc:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <__data_end+0x1>
  e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
  e4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x3>
  e8:	f4 d0       	rcall	.+488    	; 0x2d2 <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_PWM+0x28>
  ee:	52 c0       	rjmp	.+164    	; 0x194 <set_PWM+0xcc>

        if (!frequency) TCCR3B &= 0x08; //stops timer/counter
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	eb d0       	rcall	.+470    	; 0x2d2 <__cmpsf2>
  fc:	81 11       	cpse	r24, r1
  fe:	06 c0       	rjmp	.+12     	; 0x10c <set_PWM+0x44>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 70       	andi	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	05 c0       	rjmp	.+10     	; 0x116 <set_PWM+0x4e>
        else TCCR3B |= 0x03; // resumes/continues timer/counter
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
        
        // prevents OCR3A from overflowing, using prescaler 64
        // 0.954 is smallest frequency that will not result in overflow
        if (frequency < 0.954) OCR3A = 0xFFFF;
 116:	28 e5       	ldi	r18, 0x58	; 88
 118:	39 e3       	ldi	r19, 0x39	; 57
 11a:	44 e7       	ldi	r20, 0x74	; 116
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	d7 d0       	rcall	.+430    	; 0x2d2 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	3c f4       	brge	.+14     	; 0x136 <set_PWM+0x6e>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 130:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 134:	23 c0       	rjmp	.+70     	; 0x17c <set_PWM+0xb4>
        
        // prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
        else if (frequency > 31250) OCR3A = 0x0000;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	34 e2       	ldi	r19, 0x24	; 36
 13a:	44 ef       	ldi	r20, 0xF4	; 244
 13c:	56 e4       	ldi	r21, 0x46	; 70
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	d9 d1       	rcall	.+946    	; 0x4f6 <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	2c f4       	brge	.+10     	; 0x152 <set_PWM+0x8a>
 148:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 14c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 150:	15 c0       	rjmp	.+42     	; 0x17c <set_PWM+0xb4>
        
        // set OCR3A based on desired frequency
        else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	cf d1       	rcall	.+926    	; 0x4fe <__mulsf3>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	74 e2       	ldi	r23, 0x24	; 36
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	9a e4       	ldi	r25, 0x4A	; 74
 16c:	b6 d0       	rcall	.+364    	; 0x2da <__divsf3>
 16e:	1d d1       	rcall	.+570    	; 0x3aa <__fixsfsi>
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
 174:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 178:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

        TCNT3 = 0; // resets counter
 17c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 180:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
        current_frequency = frequency;
 184:	c0 92 24 01 	sts	0x0124, r12	; 0x800124 <__data_end>
 188:	d0 92 25 01 	sts	0x0125, r13	; 0x800125 <__data_end+0x1>
 18c:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <__data_end+0x2>
 190:	f0 92 27 01 	sts	0x0127, r15	; 0x800127 <__data_end+0x3>
    }
}
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <PWM_on>:
void PWM_on() {
    TCCR3A = (1 << COM3A0);
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    // COM3A0: Toggle PB6 on compare match between counter and OCR3A
    TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    // WGM32: When counter (TCNT3) matches OCR3A, reset counter
    // CS31 & CS30: Set a prescaler of 64
    set_PWM(0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	cb 01       	movw	r24, r22
 1b0:	8b cf       	rjmp	.-234    	; 0xc8 <set_PWM>
 1b2:	08 95       	ret

000001b4 <PWM_off>:
}
void PWM_off() {
    TCCR3A = 0x00;
 1b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    TCCR3B = 0x00;
 1b8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1bc:	08 95       	ret

000001be <Tick>:
    }
}

void Tick(){
    
    switch(state){
 1be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	41 f1       	breq	.+80     	; 0x216 <Tick+0x58>
 1c6:	28 f4       	brcc	.+10     	; 0x1d2 <Tick+0x14>
 1c8:	88 23       	and	r24, r24
 1ca:	49 f0       	breq	.+18     	; 0x1de <Tick+0x20>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <Tick+0x28>
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <Tick+0x7e>
 1d2:	84 30       	cpi	r24, 0x04	; 4
 1d4:	41 f1       	breq	.+80     	; 0x226 <Tick+0x68>
 1d6:	18 f1       	brcs	.+70     	; 0x21e <Tick+0x60>
 1d8:	85 30       	cpi	r24, 0x05	; 5
 1da:	49 f1       	breq	.+82     	; 0x22e <Tick+0x70>
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <Tick+0x7e>
        case Start:
            state = Init;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            break;
 1e4:	08 95       	ret
        case Init:
            if((PINA & 0x07) == 0x01){
 1e6:	80 b1       	in	r24, 0x00	; 0
 1e8:	87 70       	andi	r24, 0x07	; 7
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <Tick+0x38>
                state = Up;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 1f4:	2e c0       	rjmp	.+92     	; 0x252 <Tick+0x94>
            }
            else if((PINA & 0x07) == 0x02){
 1f6:	80 b1       	in	r24, 0x00	; 0
 1f8:	87 70       	andi	r24, 0x07	; 7
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	21 f4       	brne	.+8      	; 0x206 <Tick+0x48>
                state = Down;
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 204:	32 c0       	rjmp	.+100    	; 0x26a <Tick+0xac>
            }
            else if((PINA & 0x07) == 0x04){
 206:	80 b1       	in	r24, 0x00	; 0
 208:	87 70       	andi	r24, 0x07	; 7
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	09 f0       	breq	.+2      	; 0x210 <Tick+0x52>
 20e:	53 c0       	rjmp	.+166    	; 0x2b6 <Tick+0xf8>
                state = Toggle;
 210:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 214:	36 c0       	rjmp	.+108    	; 0x282 <Tick+0xc4>
            else{
                state = Init;
            }
            break;
        case Up:
            state = Wait;
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            break;
 21c:	3e c0       	rjmp	.+124    	; 0x29a <Tick+0xdc>
        case Down:
            state = Wait;
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            break;
 224:	3a c0       	rjmp	.+116    	; 0x29a <Tick+0xdc>
        case Toggle:
            state = Wait;
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            break;
 22c:	36 c0       	rjmp	.+108    	; 0x29a <Tick+0xdc>
        case Wait:
            if((PINA & 0x07) != 0x00){
 22e:	80 b1       	in	r24, 0x00	; 0
 230:	87 70       	andi	r24, 0x07	; 7
 232:	99 f5       	brne	.+102    	; 0x29a <Tick+0xdc>
                state = Wait;
            }
            else{
                state = Init;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 23a:	08 95       	ret
        default:
            break;
        
    }
    
    switch(state){
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	a9 f0       	breq	.+42     	; 0x26a <Tick+0xac>
 240:	18 f4       	brcc	.+6      	; 0x248 <Tick+0x8a>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	31 f0       	breq	.+12     	; 0x252 <Tick+0x94>
 246:	08 95       	ret
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	d9 f0       	breq	.+54     	; 0x282 <Tick+0xc4>
 24c:	85 30       	cpi	r24, 0x05	; 5
 24e:	99 f5       	brne	.+102    	; 0x2b6 <Tick+0xf8>
 250:	24 c0       	rjmp	.+72     	; 0x29a <Tick+0xdc>
        case Start:
            break;
        case Init:
            break;
        case Up:
            if(position < 8){
 252:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <position>
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	20 f4       	brcc	.+8      	; 0x262 <Tick+0xa4>
                position++;
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <position>
 260:	08 95       	ret
            }
            else{
                position = 8;
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <position>
 268:	08 95       	ret
            }
            break;
        case Down:
            if(position > 1){
 26a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <position>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	20 f0       	brcs	.+8      	; 0x27a <Tick+0xbc>
                position--;
 272:	81 50       	subi	r24, 0x01	; 1
 274:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <position>
 278:	08 95       	ret
            }
            else{
                position = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <position>
 280:	08 95       	ret
            }
            break;
        case Toggle:
            if(temp){
 282:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <temp>
 286:	88 23       	and	r24, r24
 288:	21 f0       	breq	.+8      	; 0x292 <Tick+0xd4>
                PWM_off();
 28a:	94 df       	rcall	.-216    	; 0x1b4 <PWM_off>
                temp = 0;
 28c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <temp>
            }
            else{
                PWM_on();
 290:	04 c0       	rjmp	.+8      	; 0x29a <Tick+0xdc>
 292:	85 df       	rcall	.-246    	; 0x19e <PWM_on>
                temp = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <temp>
            }
        case Wait:
            set_PWM(array[position]);
 29a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <position>
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e0 50       	subi	r30, 0x00	; 0
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	60 81       	ld	r22, Z
 2ae:	71 81       	ldd	r23, Z+1	; 0x01
 2b0:	82 81       	ldd	r24, Z+2	; 0x02
 2b2:	93 81       	ldd	r25, Z+3	; 0x03
 2b4:	09 cf       	rjmp	.-494    	; 0xc8 <set_PWM>
 2b6:	08 95       	ret

000002b8 <main>:
unsigned char position = 0;

int main(void)
{
    /* Replace with your application code */
    DDRA = 0x00; PORTA = 0xFF;
 2b8:	11 b8       	out	0x01, r1	; 1
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00;
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	15 b8       	out	0x05, r1	; 5
    state = Start;
 2c2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state>
    PWM_on();
 2c6:	6b df       	rcall	.-298    	; 0x19e <PWM_on>
    temp = 1; //means sound is on
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <temp>
    while (1) 
    {
        Tick();
 2ce:	77 df       	rcall	.-274    	; 0x1be <Tick>
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <main+0x16>

000002d2 <__cmpsf2>:
 2d2:	9c d0       	rcall	.+312    	; 0x40c <__fp_cmp>
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <__cmpsf2+0x6>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret

000002da <__divsf3>:
 2da:	0c d0       	rcall	.+24     	; 0x2f4 <__divsf3x>
 2dc:	d2 c0       	rjmp	.+420    	; 0x482 <__fp_round>
 2de:	ca d0       	rcall	.+404    	; 0x474 <__fp_pscB>
 2e0:	40 f0       	brcs	.+16     	; 0x2f2 <__divsf3+0x18>
 2e2:	c1 d0       	rcall	.+386    	; 0x466 <__fp_pscA>
 2e4:	30 f0       	brcs	.+12     	; 0x2f2 <__divsf3+0x18>
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <__divsf3+0x16>
 2e8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <__divsf3+0x18>
 2ec:	b3 c0       	rjmp	.+358    	; 0x454 <__fp_inf>
 2ee:	51 11       	cpse	r21, r1
 2f0:	fc c0       	rjmp	.+504    	; 0x4ea <__fp_szero>
 2f2:	b6 c0       	rjmp	.+364    	; 0x460 <__fp_nan>

000002f4 <__divsf3x>:
 2f4:	d7 d0       	rcall	.+430    	; 0x4a4 <__fp_split3>
 2f6:	98 f3       	brcs	.-26     	; 0x2de <__divsf3+0x4>

000002f8 <__divsf3_pse>:
 2f8:	99 23       	and	r25, r25
 2fa:	c9 f3       	breq	.-14     	; 0x2ee <__divsf3+0x14>
 2fc:	55 23       	and	r21, r21
 2fe:	b1 f3       	breq	.-20     	; 0x2ec <__divsf3+0x12>
 300:	95 1b       	sub	r25, r21
 302:	55 0b       	sbc	r21, r21
 304:	bb 27       	eor	r27, r27
 306:	aa 27       	eor	r26, r26
 308:	62 17       	cp	r22, r18
 30a:	73 07       	cpc	r23, r19
 30c:	84 07       	cpc	r24, r20
 30e:	38 f0       	brcs	.+14     	; 0x31e <__divsf3_pse+0x26>
 310:	9f 5f       	subi	r25, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	44 1f       	adc	r20, r20
 31a:	aa 1f       	adc	r26, r26
 31c:	a9 f3       	breq	.-22     	; 0x308 <__divsf3_pse+0x10>
 31e:	33 d0       	rcall	.+102    	; 0x386 <__divsf3_pse+0x8e>
 320:	0e 2e       	mov	r0, r30
 322:	3a f0       	brmi	.+14     	; 0x332 <__divsf3_pse+0x3a>
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	30 d0       	rcall	.+96     	; 0x388 <__divsf3_pse+0x90>
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	e6 95       	lsr	r30
 32e:	00 1c       	adc	r0, r0
 330:	ca f7       	brpl	.-14     	; 0x324 <__divsf3_pse+0x2c>
 332:	29 d0       	rcall	.+82     	; 0x386 <__divsf3_pse+0x8e>
 334:	fe 2f       	mov	r31, r30
 336:	27 d0       	rcall	.+78     	; 0x386 <__divsf3_pse+0x8e>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	bb 1f       	adc	r27, r27
 340:	26 17       	cp	r18, r22
 342:	37 07       	cpc	r19, r23
 344:	48 07       	cpc	r20, r24
 346:	ab 07       	cpc	r26, r27
 348:	b0 e8       	ldi	r27, 0x80	; 128
 34a:	09 f0       	breq	.+2      	; 0x34e <__divsf3_pse+0x56>
 34c:	bb 0b       	sbc	r27, r27
 34e:	80 2d       	mov	r24, r0
 350:	bf 01       	movw	r22, r30
 352:	ff 27       	eor	r31, r31
 354:	93 58       	subi	r25, 0x83	; 131
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	2a f0       	brmi	.+10     	; 0x364 <__divsf3_pse+0x6c>
 35a:	9e 3f       	cpi	r25, 0xFE	; 254
 35c:	51 05       	cpc	r21, r1
 35e:	68 f0       	brcs	.+26     	; 0x37a <__divsf3_pse+0x82>
 360:	79 c0       	rjmp	.+242    	; 0x454 <__fp_inf>
 362:	c3 c0       	rjmp	.+390    	; 0x4ea <__fp_szero>
 364:	5f 3f       	cpi	r21, 0xFF	; 255
 366:	ec f3       	brlt	.-6      	; 0x362 <__divsf3_pse+0x6a>
 368:	98 3e       	cpi	r25, 0xE8	; 232
 36a:	dc f3       	brlt	.-10     	; 0x362 <__divsf3_pse+0x6a>
 36c:	86 95       	lsr	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f7 95       	ror	r31
 376:	9f 5f       	subi	r25, 0xFF	; 255
 378:	c9 f7       	brne	.-14     	; 0x36c <__divsf3_pse+0x74>
 37a:	88 0f       	add	r24, r24
 37c:	91 1d       	adc	r25, r1
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret
 386:	e1 e0       	ldi	r30, 0x01	; 1
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	bb 1f       	adc	r27, r27
 390:	62 17       	cp	r22, r18
 392:	73 07       	cpc	r23, r19
 394:	84 07       	cpc	r24, r20
 396:	ba 07       	cpc	r27, r26
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__divsf3_pse+0xaa>
 39a:	62 1b       	sub	r22, r18
 39c:	73 0b       	sbc	r23, r19
 39e:	84 0b       	sbc	r24, r20
 3a0:	ba 0b       	sbc	r27, r26
 3a2:	ee 1f       	adc	r30, r30
 3a4:	88 f7       	brcc	.-30     	; 0x388 <__divsf3_pse+0x90>
 3a6:	e0 95       	com	r30
 3a8:	08 95       	ret

000003aa <__fixsfsi>:
 3aa:	04 d0       	rcall	.+8      	; 0x3b4 <__fixunssfsi>
 3ac:	68 94       	set
 3ae:	b1 11       	cpse	r27, r1
 3b0:	9c c0       	rjmp	.+312    	; 0x4ea <__fp_szero>
 3b2:	08 95       	ret

000003b4 <__fixunssfsi>:
 3b4:	7f d0       	rcall	.+254    	; 0x4b4 <__fp_splitA>
 3b6:	88 f0       	brcs	.+34     	; 0x3da <__fixunssfsi+0x26>
 3b8:	9f 57       	subi	r25, 0x7F	; 127
 3ba:	90 f0       	brcs	.+36     	; 0x3e0 <__fixunssfsi+0x2c>
 3bc:	b9 2f       	mov	r27, r25
 3be:	99 27       	eor	r25, r25
 3c0:	b7 51       	subi	r27, 0x17	; 23
 3c2:	a0 f0       	brcs	.+40     	; 0x3ec <__fixunssfsi+0x38>
 3c4:	d1 f0       	breq	.+52     	; 0x3fa <__fixunssfsi+0x46>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	1a f0       	brmi	.+6      	; 0x3d6 <__fixunssfsi+0x22>
 3d0:	ba 95       	dec	r27
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <__fixunssfsi+0x12>
 3d4:	12 c0       	rjmp	.+36     	; 0x3fa <__fixunssfsi+0x46>
 3d6:	b1 30       	cpi	r27, 0x01	; 1
 3d8:	81 f0       	breq	.+32     	; 0x3fa <__fixunssfsi+0x46>
 3da:	86 d0       	rcall	.+268    	; 0x4e8 <__fp_zero>
 3dc:	b1 e0       	ldi	r27, 0x01	; 1
 3de:	08 95       	ret
 3e0:	83 c0       	rjmp	.+262    	; 0x4e8 <__fp_zero>
 3e2:	67 2f       	mov	r22, r23
 3e4:	78 2f       	mov	r23, r24
 3e6:	88 27       	eor	r24, r24
 3e8:	b8 5f       	subi	r27, 0xF8	; 248
 3ea:	39 f0       	breq	.+14     	; 0x3fa <__fixunssfsi+0x46>
 3ec:	b9 3f       	cpi	r27, 0xF9	; 249
 3ee:	cc f3       	brlt	.-14     	; 0x3e2 <__fixunssfsi+0x2e>
 3f0:	86 95       	lsr	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b3 95       	inc	r27
 3f8:	d9 f7       	brne	.-10     	; 0x3f0 <__fixunssfsi+0x3c>
 3fa:	3e f4       	brtc	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fc:	90 95       	com	r25
 3fe:	80 95       	com	r24
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	08 95       	ret

0000040c <__fp_cmp>:
 40c:	99 0f       	add	r25, r25
 40e:	00 08       	sbc	r0, r0
 410:	55 0f       	add	r21, r21
 412:	aa 0b       	sbc	r26, r26
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	fe ef       	ldi	r31, 0xFE	; 254
 418:	16 16       	cp	r1, r22
 41a:	17 06       	cpc	r1, r23
 41c:	e8 07       	cpc	r30, r24
 41e:	f9 07       	cpc	r31, r25
 420:	c0 f0       	brcs	.+48     	; 0x452 <__fp_cmp+0x46>
 422:	12 16       	cp	r1, r18
 424:	13 06       	cpc	r1, r19
 426:	e4 07       	cpc	r30, r20
 428:	f5 07       	cpc	r31, r21
 42a:	98 f0       	brcs	.+38     	; 0x452 <__fp_cmp+0x46>
 42c:	62 1b       	sub	r22, r18
 42e:	73 0b       	sbc	r23, r19
 430:	84 0b       	sbc	r24, r20
 432:	95 0b       	sbc	r25, r21
 434:	39 f4       	brne	.+14     	; 0x444 <__fp_cmp+0x38>
 436:	0a 26       	eor	r0, r26
 438:	61 f0       	breq	.+24     	; 0x452 <__fp_cmp+0x46>
 43a:	23 2b       	or	r18, r19
 43c:	24 2b       	or	r18, r20
 43e:	25 2b       	or	r18, r21
 440:	21 f4       	brne	.+8      	; 0x44a <__fp_cmp+0x3e>
 442:	08 95       	ret
 444:	0a 26       	eor	r0, r26
 446:	09 f4       	brne	.+2      	; 0x44a <__fp_cmp+0x3e>
 448:	a1 40       	sbci	r26, 0x01	; 1
 44a:	a6 95       	lsr	r26
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	81 1d       	adc	r24, r1
 450:	81 1d       	adc	r24, r1
 452:	08 95       	ret

00000454 <__fp_inf>:
 454:	97 f9       	bld	r25, 7
 456:	9f 67       	ori	r25, 0x7F	; 127
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	08 95       	ret

00000460 <__fp_nan>:
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	80 ec       	ldi	r24, 0xC0	; 192
 464:	08 95       	ret

00000466 <__fp_pscA>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	16 16       	cp	r1, r22
 46c:	17 06       	cpc	r1, r23
 46e:	18 06       	cpc	r1, r24
 470:	09 06       	cpc	r0, r25
 472:	08 95       	ret

00000474 <__fp_pscB>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	14 06       	cpc	r1, r20
 47e:	05 06       	cpc	r0, r21
 480:	08 95       	ret

00000482 <__fp_round>:
 482:	09 2e       	mov	r0, r25
 484:	03 94       	inc	r0
 486:	00 0c       	add	r0, r0
 488:	11 f4       	brne	.+4      	; 0x48e <__fp_round+0xc>
 48a:	88 23       	and	r24, r24
 48c:	52 f0       	brmi	.+20     	; 0x4a2 <__fp_round+0x20>
 48e:	bb 0f       	add	r27, r27
 490:	40 f4       	brcc	.+16     	; 0x4a2 <__fp_round+0x20>
 492:	bf 2b       	or	r27, r31
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0x18>
 496:	60 ff       	sbrs	r22, 0
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__fp_round+0x20>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	08 95       	ret

000004a4 <__fp_split3>:
 4a4:	57 fd       	sbrc	r21, 7
 4a6:	90 58       	subi	r25, 0x80	; 128
 4a8:	44 0f       	add	r20, r20
 4aa:	55 1f       	adc	r21, r21
 4ac:	59 f0       	breq	.+22     	; 0x4c4 <__fp_splitA+0x10>
 4ae:	5f 3f       	cpi	r21, 0xFF	; 255
 4b0:	71 f0       	breq	.+28     	; 0x4ce <__fp_splitA+0x1a>
 4b2:	47 95       	ror	r20

000004b4 <__fp_splitA>:
 4b4:	88 0f       	add	r24, r24
 4b6:	97 fb       	bst	r25, 7
 4b8:	99 1f       	adc	r25, r25
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <__fp_splitA+0x20>
 4bc:	9f 3f       	cpi	r25, 0xFF	; 255
 4be:	79 f0       	breq	.+30     	; 0x4de <__fp_splitA+0x2a>
 4c0:	87 95       	ror	r24
 4c2:	08 95       	ret
 4c4:	12 16       	cp	r1, r18
 4c6:	13 06       	cpc	r1, r19
 4c8:	14 06       	cpc	r1, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	f2 cf       	rjmp	.-28     	; 0x4b2 <__fp_split3+0xe>
 4ce:	46 95       	lsr	r20
 4d0:	f1 df       	rcall	.-30     	; 0x4b4 <__fp_splitA>
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__fp_splitA+0x30>
 4d4:	16 16       	cp	r1, r22
 4d6:	17 06       	cpc	r1, r23
 4d8:	18 06       	cpc	r1, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	f1 cf       	rjmp	.-30     	; 0x4c0 <__fp_splitA+0xc>
 4de:	86 95       	lsr	r24
 4e0:	71 05       	cpc	r23, r1
 4e2:	61 05       	cpc	r22, r1
 4e4:	08 94       	sec
 4e6:	08 95       	ret

000004e8 <__fp_zero>:
 4e8:	e8 94       	clt

000004ea <__fp_szero>:
 4ea:	bb 27       	eor	r27, r27
 4ec:	66 27       	eor	r22, r22
 4ee:	77 27       	eor	r23, r23
 4f0:	cb 01       	movw	r24, r22
 4f2:	97 f9       	bld	r25, 7
 4f4:	08 95       	ret

000004f6 <__gesf2>:
 4f6:	8a df       	rcall	.-236    	; 0x40c <__fp_cmp>
 4f8:	08 f4       	brcc	.+2      	; 0x4fc <__gesf2+0x6>
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	08 95       	ret

000004fe <__mulsf3>:
 4fe:	0b d0       	rcall	.+22     	; 0x516 <__mulsf3x>
 500:	c0 cf       	rjmp	.-128    	; 0x482 <__fp_round>
 502:	b1 df       	rcall	.-158    	; 0x466 <__fp_pscA>
 504:	28 f0       	brcs	.+10     	; 0x510 <__mulsf3+0x12>
 506:	b6 df       	rcall	.-148    	; 0x474 <__fp_pscB>
 508:	18 f0       	brcs	.+6      	; 0x510 <__mulsf3+0x12>
 50a:	95 23       	and	r25, r21
 50c:	09 f0       	breq	.+2      	; 0x510 <__mulsf3+0x12>
 50e:	a2 cf       	rjmp	.-188    	; 0x454 <__fp_inf>
 510:	a7 cf       	rjmp	.-178    	; 0x460 <__fp_nan>
 512:	11 24       	eor	r1, r1
 514:	ea cf       	rjmp	.-44     	; 0x4ea <__fp_szero>

00000516 <__mulsf3x>:
 516:	c6 df       	rcall	.-116    	; 0x4a4 <__fp_split3>
 518:	a0 f3       	brcs	.-24     	; 0x502 <__mulsf3+0x4>

0000051a <__mulsf3_pse>:
 51a:	95 9f       	mul	r25, r21
 51c:	d1 f3       	breq	.-12     	; 0x512 <__mulsf3+0x14>
 51e:	95 0f       	add	r25, r21
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	55 1f       	adc	r21, r21
 524:	62 9f       	mul	r22, r18
 526:	f0 01       	movw	r30, r0
 528:	72 9f       	mul	r23, r18
 52a:	bb 27       	eor	r27, r27
 52c:	f0 0d       	add	r31, r0
 52e:	b1 1d       	adc	r27, r1
 530:	63 9f       	mul	r22, r19
 532:	aa 27       	eor	r26, r26
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	aa 1f       	adc	r26, r26
 53a:	64 9f       	mul	r22, r20
 53c:	66 27       	eor	r22, r22
 53e:	b0 0d       	add	r27, r0
 540:	a1 1d       	adc	r26, r1
 542:	66 1f       	adc	r22, r22
 544:	82 9f       	mul	r24, r18
 546:	22 27       	eor	r18, r18
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	62 1f       	adc	r22, r18
 54e:	73 9f       	mul	r23, r19
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	83 9f       	mul	r24, r19
 558:	a0 0d       	add	r26, r0
 55a:	61 1d       	adc	r22, r1
 55c:	22 1f       	adc	r18, r18
 55e:	74 9f       	mul	r23, r20
 560:	33 27       	eor	r19, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	23 1f       	adc	r18, r19
 568:	84 9f       	mul	r24, r20
 56a:	60 0d       	add	r22, r0
 56c:	21 1d       	adc	r18, r1
 56e:	82 2f       	mov	r24, r18
 570:	76 2f       	mov	r23, r22
 572:	6a 2f       	mov	r22, r26
 574:	11 24       	eor	r1, r1
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	8a f0       	brmi	.+34     	; 0x59e <__mulsf3_pse+0x84>
 57c:	e1 f0       	breq	.+56     	; 0x5b6 <__mulsf3_pse+0x9c>
 57e:	88 23       	and	r24, r24
 580:	4a f0       	brmi	.+18     	; 0x594 <__mulsf3_pse+0x7a>
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	a9 f7       	brne	.-22     	; 0x57e <__mulsf3_pse+0x64>
 594:	9e 3f       	cpi	r25, 0xFE	; 254
 596:	51 05       	cpc	r21, r1
 598:	70 f0       	brcs	.+28     	; 0x5b6 <__mulsf3_pse+0x9c>
 59a:	5c cf       	rjmp	.-328    	; 0x454 <__fp_inf>
 59c:	a6 cf       	rjmp	.-180    	; 0x4ea <__fp_szero>
 59e:	5f 3f       	cpi	r21, 0xFF	; 255
 5a0:	ec f3       	brlt	.-6      	; 0x59c <__mulsf3_pse+0x82>
 5a2:	98 3e       	cpi	r25, 0xE8	; 232
 5a4:	dc f3       	brlt	.-10     	; 0x59c <__mulsf3_pse+0x82>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f7 95       	ror	r31
 5b0:	e7 95       	ror	r30
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	c1 f7       	brne	.-16     	; 0x5a6 <__mulsf3_pse+0x8c>
 5b6:	fe 2b       	or	r31, r30
 5b8:	88 0f       	add	r24, r24
 5ba:	91 1d       	adc	r25, r1
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
