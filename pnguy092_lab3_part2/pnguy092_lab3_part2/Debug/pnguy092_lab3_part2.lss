
pnguy092_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ba  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4e d0       	rcall	.+156    	; 0x136 <main>
  9a:	37 c1       	rjmp	.+622    	; 0x30a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SetBit>:
 * Author : Phillip
 */ 

#include <avr/io.h>

unsigned char SetBit( unsigned char x, unsigned char k, unsigned char b) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <SetBit+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	88 23       	and	r24, r24
  b4:	71 f0       	breq	.+28     	; 0xd2 <SetBit+0x34>
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SetBit+0x28>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SetBit+0x24>
  ca:	98 2f       	mov	r25, r24
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 2b       	or	r24, r25
  d0:	0e c0       	rjmp	.+28     	; 0xee <SetBit+0x50>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <SetBit+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <SetBit+0x40>
  e6:	98 2f       	mov	r25, r24
  e8:	90 95       	com	r25
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	89 23       	and	r24, r25
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <GetBit>:
unsigned char GetBit( unsigned char x, unsigned char k) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <GetBit+0x6>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	22 2f       	mov	r18, r18
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GetBit+0x20>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GetBit+0x1c>
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	89 2b       	or	r24, r25
 126:	09 f4       	brne	.+2      	; 0x12a <GetBit+0x30>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	82 2f       	mov	r24, r18
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:


int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x6>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x00; PORTA = 0xFF;
 140:	81 e2       	ldi	r24, 0x21	; 33
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	10 82       	st	Z, r1
 148:	82 e2       	ldi	r24, 0x22	; 34
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 152:	87 e2       	ldi	r24, 0x27	; 39
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
	
    /* Replace with your application code */
    while (1) 
    {
		unsigned char output = 0x00;
 164:	19 82       	std	Y+1, r1	; 0x01
		unsigned char val = PINA & 0x0F;
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	8a 83       	std	Y+2, r24	; 0x02
		
		if(val == 1 || val == 2){
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	19 f0       	breq	.+6      	; 0x17e <main+0x48>
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	31 f4       	brne	.+12     	; 0x18a <main+0x54>
			output = SetBit(output, 5, 1);
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	65 e0       	ldi	r22, 0x05	; 5
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	8c df       	rcall	.-232    	; 0x9e <SetBit>
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	8f c0       	rjmp	.+286    	; 0x2a8 <main+0x172>
		}
		else if(val == 3 || val == 4){
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	19 f0       	breq	.+6      	; 0x196 <main+0x60>
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	59 f4       	brne	.+22     	; 0x1ac <main+0x76>
			output = SetBit(output, 5, 1);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	80 df       	rcall	.-256    	; 0x9e <SetBit>
 19e:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 4, 1);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	7b df       	rcall	.-266    	; 0x9e <SetBit>
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	7e c0       	rjmp	.+252    	; 0x2a8 <main+0x172>
		}
		else if(val == 5 || val == 6){
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	85 30       	cpi	r24, 0x05	; 5
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <main+0x82>
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	86 30       	cpi	r24, 0x06	; 6
 1b6:	81 f4       	brne	.+32     	; 0x1d8 <main+0xa2>
			output = SetBit(output, 5, 1);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	6f df       	rcall	.-290    	; 0x9e <SetBit>
 1c0:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 4, 1);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	6a df       	rcall	.-300    	; 0x9e <SetBit>
 1ca:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 3, 1);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	65 df       	rcall	.-310    	; 0x9e <SetBit>
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	68 c0       	rjmp	.+208    	; 0x2a8 <main+0x172>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
		}
		else if(val == 7 || val == 8 || val == 9){
 1da:	87 30       	cpi	r24, 0x07	; 7
 1dc:	31 f0       	breq	.+12     	; 0x1ea <main+0xb4>
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	19 f0       	breq	.+6      	; 0x1ea <main+0xb4>
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	89 30       	cpi	r24, 0x09	; 9
 1e8:	a9 f4       	brne	.+42     	; 0x214 <main+0xde>
			output = SetBit(output, 5, 1);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	56 df       	rcall	.-340    	; 0x9e <SetBit>
 1f2:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 4, 1);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	51 df       	rcall	.-350    	; 0x9e <SetBit>
 1fc:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 3, 1);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	4c df       	rcall	.-360    	; 0x9e <SetBit>
 206:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 2, 1);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	47 df       	rcall	.-370    	; 0x9e <SetBit>
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	4a c0       	rjmp	.+148    	; 0x2a8 <main+0x172>
 214:	8a 81       	ldd	r24, Y+2	; 0x02
		}
		else if(val == 10 || val == 11 || val == 12){
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	31 f0       	breq	.+12     	; 0x226 <main+0xf0>
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	8b 30       	cpi	r24, 0x0B	; 11
 21e:	19 f0       	breq	.+6      	; 0x226 <main+0xf0>
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	8c 30       	cpi	r24, 0x0C	; 12
			output = SetBit(output, 5, 1);
 224:	d1 f4       	brne	.+52     	; 0x25a <main+0x124>
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	38 df       	rcall	.-400    	; 0x9e <SetBit>
			output = SetBit(output, 4, 1);
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	64 e0       	ldi	r22, 0x04	; 4
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	33 df       	rcall	.-410    	; 0x9e <SetBit>
			output = SetBit(output, 3, 1);
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	2e df       	rcall	.-420    	; 0x9e <SetBit>
			output = SetBit(output, 2, 1);
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	29 df       	rcall	.-430    	; 0x9e <SetBit>
 24c:	89 83       	std	Y+1, r24	; 0x01
			output = SetBit(output, 1, 1);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	24 df       	rcall	.-440    	; 0x9e <SetBit>
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	27 c0       	rjmp	.+78     	; 0x2a8 <main+0x172>
		}
		else if(val == 13 || val == 14 || val == 15){
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	8d 30       	cpi	r24, 0x0D	; 13
 25e:	31 f0       	breq	.+12     	; 0x26c <main+0x136>
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	8e 30       	cpi	r24, 0x0E	; 14
 264:	19 f0       	breq	.+6      	; 0x26c <main+0x136>
 266:	8a 81       	ldd	r24, Y+2	; 0x02
			output = SetBit(output, 5, 1);
 268:	8f 30       	cpi	r24, 0x0F	; 15
 26a:	f1 f4       	brne	.+60     	; 0x2a8 <main+0x172>
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	65 e0       	ldi	r22, 0x05	; 5
 270:	89 81       	ldd	r24, Y+1	; 0x01
			output = SetBit(output, 4, 1);
 272:	15 df       	rcall	.-470    	; 0x9e <SetBit>
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	89 81       	ldd	r24, Y+1	; 0x01
			output = SetBit(output, 3, 1);
 27c:	10 df       	rcall	.-480    	; 0x9e <SetBit>
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	89 81       	ldd	r24, Y+1	; 0x01
			output = SetBit(output, 2, 1);
 286:	0b df       	rcall	.-490    	; 0x9e <SetBit>
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	89 81       	ldd	r24, Y+1	; 0x01
			output = SetBit(output, 1, 1);
 290:	06 df       	rcall	.-500    	; 0x9e <SetBit>
 292:	89 83       	std	Y+1, r24	; 0x01
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	89 81       	ldd	r24, Y+1	; 0x01
			output = SetBit(output, 0, 1);
 29a:	01 df       	rcall	.-510    	; 0x9e <SetBit>
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	fc de       	rcall	.-520    	; 0x9e <SetBit>
		}
		
		if(val <= 4){
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
			output = SetBit(output, 6, 1);
 2aa:	85 30       	cpi	r24, 0x05	; 5
 2ac:	28 f4       	brcc	.+10     	; 0x2b8 <main+0x182>
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	66 e0       	ldi	r22, 0x06	; 6
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
		}
		if(GetBit(PINA, 4) == 1 && GetBit(PINA, 5) == 1 && GetBit(PINA, 6) != 1){
 2b4:	f4 de       	rcall	.-536    	; 0x9e <SetBit>
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	80 81       	ld	r24, Z
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	1b df       	rcall	.-458    	; 0xfa <GetBit>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	b1 f4       	brne	.+44     	; 0x2f4 <main+0x1be>
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	80 81       	ld	r24, Z
 2d0:	65 e0       	ldi	r22, 0x05	; 5
 2d2:	13 df       	rcall	.-474    	; 0xfa <GetBit>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	71 f4       	brne	.+28     	; 0x2f4 <main+0x1be>
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	66 e0       	ldi	r22, 0x06	; 6
 2e2:	0b df       	rcall	.-490    	; 0xfa <GetBit>
 2e4:	81 30       	cpi	r24, 0x01	; 1
			output = SetBit(output, 7, 1);
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <main+0x1be>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	d7 de       	rcall	.-594    	; 0x9e <SetBit>
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <main+0x1c8>
		}
		else{
			output = SetBit(output, 7, 0);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	67 e0       	ldi	r22, 0x07	; 7
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	d1 de       	rcall	.-606    	; 0x9e <SetBit>
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	88 e2       	ldi	r24, 0x28	; 40
		}
		
		PORTC = output;
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	29 81       	ldd	r18, Y+1	; 0x01
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
 308:	2d cf       	rjmp	.-422    	; 0x164 <main+0x2e>

0000030a <_exit>:
		
		
		
    }
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
