
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  0080017a  0080017a  00001404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001478  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f3  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009aa  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e08  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00003e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000779  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000987  00000000  00000000  00004a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000053c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c2       	rjmp	.+1450   	; 0x5e0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ef       	ldi	r30, 0xF6	; 246
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 37       	cpi	r26, 0x7A	; 122
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e7       	ldi	r26, 0x7A	; 122
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3d       	cpi	r26, 0xD4	; 212
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f1 d3       	rcall	.+2018   	; 0x8a6 <main>
      c4:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	04 d0       	rcall	.+8      	; 0xde <LCD_WriteCommand>
      d6:	00 00       	nop
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <LCD_WriteCommand>:
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	1f 92       	push	r1
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	89 83       	std	Y+1, r24	; 0x01
      ea:	85 e2       	ldi	r24, 0x25	; 37
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	25 e2       	ldi	r18, 0x25	; 37
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	2e 7f       	andi	r18, 0xFE	; 254
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
      fc:	8b e2       	ldi	r24, 0x2B	; 43
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	29 81       	ldd	r18, Y+1	; 0x01
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
     106:	85 e2       	ldi	r24, 0x25	; 37
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	25 e2       	ldi	r18, 0x25	; 37
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	f9 01       	movw	r30, r18
     110:	20 81       	ld	r18, Z
     112:	22 60       	ori	r18, 0x02	; 2
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
     118:	00 00       	nop
     11a:	85 e2       	ldi	r24, 0x25	; 37
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	25 e2       	ldi	r18, 0x25	; 37
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	2d 7f       	andi	r18, 0xFD	; 253
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	7e d0       	rcall	.+252    	; 0x22e <delay_ms>
     132:	00 00       	nop
     134:	0f 90       	pop	r0
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <LCD_WriteData>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	1f 92       	push	r1
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	89 83       	std	Y+1, r24	; 0x01
     148:	85 e2       	ldi	r24, 0x25	; 37
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	25 e2       	ldi	r18, 0x25	; 37
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	21 60       	ori	r18, 0x01	; 1
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	8b e2       	ldi	r24, 0x2B	; 43
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
     164:	85 e2       	ldi	r24, 0x25	; 37
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	25 e2       	ldi	r18, 0x25	; 37
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	22 60       	ori	r18, 0x02	; 2
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	00 00       	nop
     178:	85 e2       	ldi	r24, 0x25	; 37
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	25 e2       	ldi	r18, 0x25	; 37
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	f9 01       	movw	r30, r18
     182:	20 81       	ld	r18, Z
     184:	2d 7f       	andi	r18, 0xFD	; 253
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	4f d0       	rcall	.+158    	; 0x22e <delay_ms>
     190:	00 00       	nop
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <LCD_Write_Single_Line>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <LCD_Write_Single_Line+0x6>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <LCD_Write_Single_Line+0x8>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <LCD_Write_Single_Line+0xa>
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	8a 83       	std	Y+2, r24	; 0x02
     1aa:	7c 83       	std	Y+4, r23	; 0x04
     1ac:	6b 83       	std	Y+3, r22	; 0x03
     1ae:	5e 83       	std	Y+6, r21	; 0x06
     1b0:	4d 83       	std	Y+5, r20	; 0x05
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ba:	02 97       	sbiw	r24, 0x02	; 2
     1bc:	99 f4       	brne	.+38     	; 0x1e4 <LCD_Write_Single_Line+0x4a>
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	80 5f       	subi	r24, 0xF0	; 240
     1c2:	89 83       	std	Y+1, r24	; 0x01
     1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <LCD_Write_Single_Line+0x4a>
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	98 0f       	add	r25, r24
     1cc:	99 83       	std	Y+1, r25	; 0x01
     1ce:	1a d0       	rcall	.+52     	; 0x204 <LCD_Cursor>
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	9e 81       	ldd	r25, Y+6	; 0x06
     1d4:	9c 01       	movw	r18, r24
     1d6:	2f 5f       	subi	r18, 0xFF	; 255
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	3e 83       	std	Y+6, r19	; 0x06
     1dc:	2d 83       	std	Y+5, r18	; 0x05
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	ac df       	rcall	.-168    	; 0x13c <LCD_WriteData>
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
     1e6:	9e 81       	ldd	r25, Y+6	; 0x06
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	59 f7       	brne	.-42     	; 0x1c6 <LCD_Write_Single_Line+0x2c>
     1f0:	00 00       	nop
     1f2:	26 96       	adiw	r28, 0x06	; 6
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <LCD_Cursor>:
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	81 31       	cpi	r24, 0x11	; 17
     214:	20 f4       	brcc	.+8      	; 0x21e <LCD_Cursor+0x1a>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	81 58       	subi	r24, 0x81	; 129
     21a:	61 df       	rcall	.-318    	; 0xde <LCD_WriteCommand>
     21c:	03 c0       	rjmp	.+6      	; 0x224 <LCD_Cursor+0x20>
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	81 55       	subi	r24, 0x51	; 81
     222:	5d df       	rcall	.-326    	; 0xde <LCD_WriteCommand>
     224:	00 00       	nop
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <delay_ms>:
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <delay_ms+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <delay_ms+0x8>
     236:	00 d0       	rcall	.+0      	; 0x238 <delay_ms+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9e 83       	std	Y+6, r25	; 0x06
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	13 c0       	rjmp	.+38     	; 0x26c <delay_ms+0x3e>
     246:	1c 82       	std	Y+4, r1	; 0x04
     248:	1b 82       	std	Y+3, r1	; 0x03
     24a:	06 c0       	rjmp	.+12     	; 0x258 <delay_ms+0x2a>
     24c:	00 00       	nop
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	87 30       	cpi	r24, 0x07	; 7
     25e:	93 40       	sbci	r25, 0x03	; 3
     260:	ac f3       	brlt	.-22     	; 0x24c <delay_ms+0x1e>
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	3a 81       	ldd	r19, Y+2	; 0x02
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	9e 81       	ldd	r25, Y+6	; 0x06
     274:	28 17       	cp	r18, r24
     276:	39 07       	cpc	r19, r25
     278:	34 f3       	brlt	.-52     	; 0x246 <delay_ms+0x18>
     27a:	00 00       	nop
     27c:	26 96       	adiw	r28, 0x06	; 6
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <LCD_Custom_Character>:
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <LCD_Custom_Character+0x6>
     294:	00 d0       	rcall	.+0      	; 0x296 <LCD_Custom_Character+0x8>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	8a 83       	std	Y+2, r24	; 0x02
     29c:	7c 83       	std	Y+4, r23	; 0x04
     29e:	6b 83       	std	Y+3, r22	; 0x03
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	88 30       	cpi	r24, 0x08	; 8
     2a4:	d0 f4       	brcc	.+52     	; 0x2da <LCD_Custom_Character+0x4c>
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	08 96       	adiw	r24, 0x08	; 8
     2ae:	88 0f       	add	r24, r24
     2b0:	88 0f       	add	r24, r24
     2b2:	88 0f       	add	r24, r24
     2b4:	14 df       	rcall	.-472    	; 0xde <LCD_WriteCommand>
     2b6:	19 82       	std	Y+1, r1	; 0x01
     2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <LCD_Custom_Character+0x46>
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	2b 81       	ldd	r18, Y+3	; 0x03
     2c2:	3c 81       	ldd	r19, Y+4	; 0x04
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	37 df       	rcall	.-402    	; 0x13c <LCD_WriteData>
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	8f 5f       	subi	r24, 0xFF	; 255
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	80 f3       	brcs	.-32     	; 0x2ba <LCD_Custom_Character+0x2c>
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	00 df       	rcall	.-512    	; 0xde <LCD_WriteCommand>
     2de:	00 00       	nop
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <LCD_init>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	84 e6       	ldi	r24, 0x64	; 100
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	99 df       	rcall	.-206    	; 0x22e <delay_ms>
     2fc:	88 e3       	ldi	r24, 0x38	; 56
     2fe:	ef de       	rcall	.-546    	; 0xde <LCD_WriteCommand>
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	ed de       	rcall	.-550    	; 0xde <LCD_WriteCommand>
     304:	8f e0       	ldi	r24, 0x0F	; 15
     306:	eb de       	rcall	.-554    	; 0xde <LCD_WriteCommand>
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	e9 de       	rcall	.-558    	; 0xde <LCD_WriteCommand>
     30c:	8a e0       	ldi	r24, 0x0A	; 10
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	8e df       	rcall	.-228    	; 0x22e <delay_ms>
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	ba df       	rcall	.-140    	; 0x28e <LCD_Custom_Character>
     31a:	68 e0       	ldi	r22, 0x08	; 8
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	b6 df       	rcall	.-148    	; 0x28e <LCD_Custom_Character>
     322:	60 e1       	ldi	r22, 0x10	; 16
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	b2 df       	rcall	.-156    	; 0x28e <LCD_Custom_Character>
     32a:	68 e1       	ldi	r22, 0x18	; 24
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	ae df       	rcall	.-164    	; 0x28e <LCD_Custom_Character>
     332:	60 e2       	ldi	r22, 0x20	; 32
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	85 e0       	ldi	r24, 0x05	; 5
     338:	aa df       	rcall	.-172    	; 0x28e <LCD_Custom_Character>
     33a:	68 e2       	ldi	r22, 0x28	; 40
     33c:	71 e0       	ldi	r23, 0x01	; 1
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	a6 df       	rcall	.-180    	; 0x28e <LCD_Custom_Character>
     342:	00 00       	nop
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <LCD_Game_Menu>:
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	c4 de       	rcall	.-632    	; 0xde <LCD_WriteCommand>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	55 df       	rcall	.-342    	; 0x204 <LCD_Cursor>
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	ef de       	rcall	.-546    	; 0x13c <LCD_WriteData>
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	51 df       	rcall	.-350    	; 0x204 <LCD_Cursor>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	eb de       	rcall	.-554    	; 0x13c <LCD_WriteData>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	e9 de       	rcall	.-558    	; 0x13c <LCD_WriteData>
     36a:	84 e0       	ldi	r24, 0x04	; 4
     36c:	e7 de       	rcall	.-562    	; 0x13c <LCD_WriteData>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	e5 de       	rcall	.-566    	; 0x13c <LCD_WriteData>
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	47 df       	rcall	.-370    	; 0x204 <LCD_Cursor>
     376:	85 e0       	ldi	r24, 0x05	; 5
     378:	e1 de       	rcall	.-574    	; 0x13c <LCD_WriteData>
     37a:	4c e3       	ldi	r20, 0x3C	; 60
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0a df       	rcall	.-492    	; 0x19a <LCD_Write_Single_Line>
     386:	87 e1       	ldi	r24, 0x17	; 23
     388:	3d df       	rcall	.-390    	; 0x204 <LCD_Cursor>
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	d7 de       	rcall	.-594    	; 0x13c <LCD_WriteData>
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	a6 de       	rcall	.-692    	; 0xde <LCD_WriteCommand>
     392:	00 00       	nop
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <TimerSet>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <TimerSet+0x6>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <TimerSet+0x8>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	69 83       	std	Y+1, r22	; 0x01
     3a8:	7a 83       	std	Y+2, r23	; 0x02
     3aa:	8b 83       	std	Y+3, r24	; 0x03
     3ac:	9c 83       	std	Y+4, r25	; 0x04
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	ab 81       	ldd	r26, Y+3	; 0x03
     3b4:	bc 81       	ldd	r27, Y+4	; 0x04
     3b6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_M>
     3ba:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_M+0x1>
     3be:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_M+0x2>
     3c2:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_M+0x3>
     3c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     3ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     3ce:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     3d2:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     3d6:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <_avr_timer_cntcurr>
     3da:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <_avr_timer_cntcurr+0x1>
     3de:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <_avr_timer_cntcurr+0x2>
     3e2:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <_avr_timer_cntcurr+0x3>
     3e6:	00 00       	nop
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <TimerOn>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	81 e8       	ldi	r24, 0x81	; 129
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	2b e0       	ldi	r18, 0x0B	; 11
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
     408:	88 e8       	ldi	r24, 0x88	; 136
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	2d e7       	ldi	r18, 0x7D	; 125
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	fc 01       	movw	r30, r24
     412:	31 83       	std	Z+1, r19	; 0x01
     414:	20 83       	st	Z, r18
     416:	8f e6       	ldi	r24, 0x6F	; 111
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	22 e0       	ldi	r18, 0x02	; 2
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
     420:	84 e8       	ldi	r24, 0x84	; 132
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	11 82       	std	Z+1, r1	; 0x01
     428:	10 82       	st	Z, r1
     42a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     42e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     432:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     436:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     43a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <_avr_timer_cntcurr>
     43e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <_avr_timer_cntcurr+0x1>
     442:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <_avr_timer_cntcurr+0x2>
     446:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <_avr_timer_cntcurr+0x3>
     44a:	8f e5       	ldi	r24, 0x5F	; 95
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2f e5       	ldi	r18, 0x5F	; 95
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	20 68       	ori	r18, 0x80	; 128
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
     45c:	00 00       	nop
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <TimerISR>:

void TimerISR() {
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	1f 92       	push	r1
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
     478:	19 82       	std	Y+1, r1	; 0x01
     47a:	a6 c0       	rjmp	.+332    	; 0x5c8 <TimerISR+0x164>
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	c9 01       	movw	r24, r18
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	8e 56       	subi	r24, 0x6E	; 110
     496:	9e 4f       	sbci	r25, 0xFE	; 254
     498:	fc 01       	movw	r30, r24
     49a:	20 81       	ld	r18, Z
     49c:	31 81       	ldd	r19, Z+1	; 0x01
     49e:	42 81       	ldd	r20, Z+2	; 0x02
     4a0:	53 81       	ldd	r21, Z+3	; 0x03
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	68 2f       	mov	r22, r24
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	86 0f       	add	r24, r22
     4b0:	97 1f       	adc	r25, r23
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	82 57       	subi	r24, 0x72	; 114
     4bc:	9e 4f       	sbci	r25, 0xFE	; 254
     4be:	fc 01       	movw	r30, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	a2 81       	ldd	r26, Z+2	; 0x02
     4c6:	b3 81       	ldd	r27, Z+3	; 0x03
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	4a 07       	cpc	r20, r26
     4ce:	5b 07       	cpc	r21, r27
     4d0:	08 f4       	brcc	.+2      	; 0x4d4 <TimerISR+0x70>
     4d2:	49 c0       	rjmp	.+146    	; 0x566 <TimerISR+0x102>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	08 2f       	mov	r16, r24
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	c9 01       	movw	r24, r18
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	8a 56       	subi	r24, 0x6A	; 106
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	fc 01       	movw	r30, r24
     4f8:	40 81       	ld	r20, Z
     4fa:	51 81       	ldd	r21, Z+1	; 0x01
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	28 2f       	mov	r18, r24
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	c9 01       	movw	r24, r18
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	82 0f       	add	r24, r18
     50a:	93 1f       	adc	r25, r19
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	84 57       	subi	r24, 0x74	; 116
     516:	9e 4f       	sbci	r25, 0xFE	; 254
     518:	fc 01       	movw	r30, r24
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	fa 01       	movw	r30, r20
     520:	09 95       	icall
     522:	9c 01       	movw	r18, r24
     524:	c8 01       	movw	r24, r16
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	80 0f       	add	r24, r16
     52c:	91 1f       	adc	r25, r17
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	84 57       	subi	r24, 0x74	; 116
     538:	9e 4f       	sbci	r25, 0xFE	; 254
     53a:	fc 01       	movw	r30, r24
     53c:	31 83       	std	Z+1, r19	; 0x01
     53e:	20 83       	st	Z, r18
            tasks[i].elapsedTime = 0;
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	c9 01       	movw	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	8e 56       	subi	r24, 0x6E	; 110
     55a:	9e 4f       	sbci	r25, 0xFE	; 254
     55c:	fc 01       	movw	r30, r24
     55e:	10 82       	st	Z, r1
     560:	11 82       	std	Z+1, r1	; 0x01
     562:	12 82       	std	Z+2, r1	; 0x02
     564:	13 82       	std	Z+3, r1	; 0x03
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	68 2f       	mov	r22, r24
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	28 2f       	mov	r18, r24
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	c9 01       	movw	r24, r18
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	8e 56       	subi	r24, 0x6E	; 110
     586:	9e 4f       	sbci	r25, 0xFE	; 254
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	a2 81       	ldd	r26, Z+2	; 0x02
     590:	b3 81       	ldd	r27, Z+3	; 0x03
     592:	25 e0       	ldi	r18, 0x05	; 5
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	28 0f       	add	r18, r24
     59c:	39 1f       	adc	r19, r25
     59e:	4a 1f       	adc	r20, r26
     5a0:	5b 1f       	adc	r21, r27
     5a2:	cb 01       	movw	r24, r22
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	86 0f       	add	r24, r22
     5aa:	97 1f       	adc	r25, r23
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	8e 56       	subi	r24, 0x6E	; 110
     5b6:	9e 4f       	sbci	r25, 0xFE	; 254
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
     5bc:	31 83       	std	Z+1, r19	; 0x01
     5be:	42 83       	std	Z+2, r20	; 0x02
     5c0:	53 83       	std	Z+3, r21	; 0x03

void TimerISR() {
	TimerFlag = 1;
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	86 e0       	ldi	r24, 0x06	; 6
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	98 17       	cp	r25, r24
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <TimerISR+0x16e>
     5d0:	55 cf       	rjmp	.-342    	; 0x47c <TimerISR+0x18>
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
    
}
     5d2:	00 00       	nop
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     5f0:	0f 92       	push	r0
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     612:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <_avr_timer_cntcurr>
     616:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <_avr_timer_cntcurr+0x1>
     61a:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <_avr_timer_cntcurr+0x2>
     61e:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <_avr_timer_cntcurr+0x3>
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	a1 09       	sbc	r26, r1
     626:	b1 09       	sbc	r27, r1
     628:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <_avr_timer_cntcurr>
     62c:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <_avr_timer_cntcurr+0x1>
     630:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <_avr_timer_cntcurr+0x2>
     634:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     638:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <_avr_timer_cntcurr>
     63c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <_avr_timer_cntcurr+0x1>
     640:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <_avr_timer_cntcurr+0x2>
     644:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <_avr_timer_cntcurr+0x3>
     648:	89 2b       	or	r24, r25
     64a:	8a 2b       	or	r24, r26
     64c:	8b 2b       	or	r24, r27
     64e:	89 f4       	brne	.+34     	; 0x672 <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
     650:	09 df       	rcall	.-494    	; 0x464 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     652:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     656:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     65a:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     65e:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     662:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <_avr_timer_cntcurr>
     666:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <_avr_timer_cntcurr+0x1>
     66a:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <_avr_timer_cntcurr+0x2>
     66e:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <_avr_timer_cntcurr+0x3>
	}
}
     672:	00 00       	nop
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     696:	0f 90       	pop	r0
     698:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <Set_Bit>:
#define DATA 2		//Data pin location
#define SHIFT 3	//Shift Clock pin location
#define STORE 4	//Store Clock pin location


unsigned char Set_Bit(unsigned char output, unsigned char in){
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <Set_Bit+0x6>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	6a 83       	std	Y+2, r22	; 0x02
    return (output | (1 << in));   
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <Set_Bit+0x1e>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	2a 95       	dec	r18
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <Set_Bit+0x1a>
     6c4:	98 2f       	mov	r25, r24
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	89 2b       	or	r24, r25
}
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <Clear_Bit>:
unsigned char Clear_Bit(unsigned char output, unsigned char in){
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	00 d0       	rcall	.+0      	; 0x6da <Clear_Bit+0x6>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	6a 83       	std	Y+2, r22	; 0x02
    return (output & ~(1 << in));
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	28 2f       	mov	r18, r24
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <Clear_Bit+0x1e>
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	2a 95       	dec	r18
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <Clear_Bit+0x1a>
     6f6:	98 2f       	mov	r25, r24
     6f8:	90 95       	com	r25
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	89 23       	and	r24, r25
} 
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <Shift_Init>:

void Shift_Init() {
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
    DDRC = Set_Bit(DDRC, DATA);
     714:	07 e2       	ldi	r16, 0x27	; 39
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	87 e2       	ldi	r24, 0x27	; 39
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	bf df       	rcall	.-130    	; 0x6a2 <Set_Bit>
     724:	f8 01       	movw	r30, r16
     726:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, SHIFT);
     728:	07 e2       	ldi	r16, 0x27	; 39
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	87 e2       	ldi	r24, 0x27	; 39
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	b5 df       	rcall	.-150    	; 0x6a2 <Set_Bit>
     738:	f8 01       	movw	r30, r16
     73a:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, STORE);
     73c:	07 e2       	ldi	r16, 0x27	; 39
     73e:	10 e0       	ldi	r17, 0x00	; 0
     740:	87 e2       	ldi	r24, 0x27	; 39
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	64 e0       	ldi	r22, 0x04	; 4
     74a:	ab df       	rcall	.-170    	; 0x6a2 <Set_Bit>
     74c:	f8 01       	movw	r30, r16
     74e:	80 83       	st	Z, r24
}
     750:	00 00       	nop
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <Shift_Data_High>:

//Set Data line high
void Shift_Data_High() {
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, DATA);
     768:	08 e2       	ldi	r16, 0x28	; 40
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	88 e2       	ldi	r24, 0x28	; 40
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	80 81       	ld	r24, Z
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	95 df       	rcall	.-214    	; 0x6a2 <Set_Bit>
     778:	f8 01       	movw	r30, r16
     77a:	80 83       	st	Z, r24
}
     77c:	00 00       	nop
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <Shift_Data_Low>:

//Set Data line low
void Shift_Data_Low() {
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
    PORTC = Clear_Bit(PORTC, DATA);
     794:	08 e2       	ldi	r16, 0x28	; 40
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	88 e2       	ldi	r24, 0x28	; 40
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	98 df       	rcall	.-208    	; 0x6d4 <Clear_Bit>
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 83       	st	Z, r24
}
     7a8:	00 00       	nop
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <Shift_Pulse>:

//Pulse Shift Clock
void Shift_Pulse() {
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, SHIFT);
     7c0:	08 e2       	ldi	r16, 0x28	; 40
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	69 df       	rcall	.-302    	; 0x6a2 <Set_Bit>
     7d0:	f8 01       	movw	r30, r16
     7d2:	80 83       	st	Z, r24
    PORTC = Clear_Bit(PORTC, SHIFT);
     7d4:	08 e2       	ldi	r16, 0x28	; 40
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	88 e2       	ldi	r24, 0x28	; 40
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	78 df       	rcall	.-272    	; 0x6d4 <Clear_Bit>
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 83       	st	Z, r24
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <Shift_Store>:

//Pulse Store Clock
void Shift_Store() {
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <Shift_Store+0xa>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <Shift_Store+0xc>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, STORE);
     804:	08 e2       	ldi	r16, 0x28	; 40
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	88 e2       	ldi	r24, 0x28	; 40
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	64 e0       	ldi	r22, 0x04	; 4
     812:	47 df       	rcall	.-370    	; 0x6a2 <Set_Bit>
     814:	f8 01       	movw	r30, r16
     816:	80 83       	st	Z, r24
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <Shift_Store+0x30>
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     82c:	08 e2       	ldi	r16, 0x28	; 40
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	88 e2       	ldi	r24, 0x28	; 40
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	64 e0       	ldi	r22, 0x04	; 4
     83a:	4c df       	rcall	.-360    	; 0x6d4 <Clear_Bit>
     83c:	f8 01       	movw	r30, r16
     83e:	80 83       	st	Z, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <Shift_Store+0x58>
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
    _delay_loop_2(1);
}
     854:	00 00       	nop
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <Shift_transmit_data>:


void Shift_transmit_data(unsigned char data) {
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <Shift_transmit_data+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	8a 83       	std	Y+2, r24	; 0x02
    for(unsigned char i=0;i<8;i++) {
     874:	19 82       	std	Y+1, r1	; 0x01
     876:	0d c0       	rjmp	.+26     	; 0x892 <Shift_transmit_data+0x2a>
        if(data & 0x80) {
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	88 23       	and	r24, r24
     87c:	14 f4       	brge	.+4      	; 0x882 <Shift_transmit_data+0x1a>
            Shift_Data_High();
     87e:	6e df       	rcall	.-292    	; 0x75c <Shift_Data_High>
     880:	01 c0       	rjmp	.+2      	; 0x884 <Shift_transmit_data+0x1c>
            } else {
            Shift_Data_Low();
     882:	82 df       	rcall	.-252    	; 0x788 <Shift_Data_Low>
        }

        Shift_Pulse();
     884:	97 df       	rcall	.-210    	; 0x7b4 <Shift_Pulse>
     886:	8a 81       	ldd	r24, Y+2	; 0x02
        data=data << 1;
     888:	88 0f       	add	r24, r24
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	89 81       	ldd	r24, Y+1	; 0x01
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	88 30       	cpi	r24, 0x08	; 8
     896:	80 f3       	brcs	.-32     	; 0x878 <Shift_transmit_data+0x10>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     898:	ad df       	rcall	.-166    	; 0x7f4 <Shift_Store>
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <main>:
     8a6:	cf 93       	push	r28
unsigned long zen_high_score = 0;    
    
    

int main(void)
{
     8a8:	df 93       	push	r29
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
     8b0:	8a e2       	ldi	r24, 0x2A	; 42
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	2f ef       	ldi	r18, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	fc 01       	movw	r30, r24
     8c0:	10 82       	st	Z, r1
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
     8c2:	87 e2       	ldi	r24, 0x27	; 39
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
     8cc:	88 e2       	ldi	r24, 0x28	; 40
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	10 82       	st	Z, r1
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
     8d4:	81 e2       	ldi	r24, 0x21	; 33
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
     8dc:	82 e2       	ldi	r24, 0x22	; 34
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
     8e6:	84 e2       	ldi	r24, 0x24	; 36
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2f ef       	ldi	r18, 0xFF	; 255
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	85 e2       	ldi	r24, 0x25	; 37
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	10 82       	st	Z, r1
    
    //Initialize LCD and Matrix
    LCD_init();
     8f8:	fa dc       	rcall	.-1548   	; 0x2ee <LCD_init>
    
    Shift_Init();   
     8fa:	06 df       	rcall	.-500    	; 0x708 <Shift_Init>
    Shift_transmit_data(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	b4 df       	rcall	.-152    	; 0x868 <Shift_transmit_data>
    Shift_transmit_data(255);
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	b2 df       	rcall	.-156    	; 0x868 <Shift_transmit_data>
    zen_high_score = eeprom_read_byte((uint8_t*) 1);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	ec d4       	rcall	.+2520   	; 0x12e2 <eeprom_read_byte>
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <zen_high_score>
     916:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <zen_high_score+0x1>
     91a:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <zen_high_score+0x2>
     91e:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <zen_high_score+0x3>
     922:	19 82       	std	Y+1, r1	; 0x01
    
    
    //Task Code
    unsigned char tasks_increment = 0;
     924:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LFT_INIT;
     926:	28 2f       	mov	r18, r24
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	c9 01       	movw	r24, r18
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	82 0f       	add	r24, r18
     932:	93 1f       	adc	r25, r19
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	84 57       	subi	r24, 0x74	; 116
     93e:	9e 4f       	sbci	r25, 0xFE	; 254
     940:	fc 01       	movw	r30, r24
     942:	11 82       	std	Z+1, r1	; 0x01
     944:	10 82       	st	Z, r1
     946:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	c9 01       	movw	r24, r18
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	9c 01       	movw	r18, r24
     960:	22 57       	subi	r18, 0x72	; 114
     962:	3e 4f       	sbci	r19, 0xFE	; 254
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	80 83       	st	Z, r24
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	a2 83       	std	Z+2, r26	; 0x02
     974:	b3 83       	std	Z+3, r27	; 0x03
     976:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     978:	68 2f       	mov	r22, r24
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	28 2f       	mov	r18, r24
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	c9 01       	movw	r24, r18
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	82 57       	subi	r24, 0x72	; 114
     996:	9e 4f       	sbci	r25, 0xFE	; 254
     998:	fc 01       	movw	r30, r24
     99a:	20 81       	ld	r18, Z
     99c:	31 81       	ldd	r19, Z+1	; 0x01
     99e:	42 81       	ldd	r20, Z+2	; 0x02
     9a0:	53 81       	ldd	r21, Z+3	; 0x03
     9a2:	cb 01       	movw	r24, r22
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	86 0f       	add	r24, r22
     9aa:	97 1f       	adc	r25, r23
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	8e 56       	subi	r24, 0x6E	; 110
     9b6:	9e 4f       	sbci	r25, 0xFE	; 254
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
     9bc:	31 83       	std	Z+1, r19	; 0x01
     9be:	42 83       	std	Z+2, r20	; 0x02
     9c0:	53 83       	std	Z+3, r21	; 0x03
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Left_Tick;
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	c9 01       	movw	r24, r18
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	82 0f       	add	r24, r18
     9d0:	93 1f       	adc	r25, r19
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	8a 56       	subi	r24, 0x6A	; 106
     9dc:	9e 4f       	sbci	r25, 0xFE	; 254
     9de:	29 e0       	ldi	r18, 0x09	; 9
     9e0:	37 e0       	ldi	r19, 0x07	; 7
     9e2:	fc 01       	movw	r30, r24
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = RGHT_INIT;
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	c9 01       	movw	r24, r18
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	84 57       	subi	r24, 0x74	; 116
     a08:	9e 4f       	sbci	r25, 0xFE	; 254
     a0a:	fc 01       	movw	r30, r24
     a0c:	11 82       	std	Z+1, r1	; 0x01
     a0e:	10 82       	st	Z, r1
     a10:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	c9 01       	movw	r24, r18
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	9c 01       	movw	r18, r24
     a2a:	22 57       	subi	r18, 0x72	; 114
     a2c:	3e 4f       	sbci	r19, 0xFE	; 254
     a2e:	8e e1       	ldi	r24, 0x1E	; 30
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	80 83       	st	Z, r24
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	a2 83       	std	Z+2, r26	; 0x02
     a3e:	b3 83       	std	Z+3, r27	; 0x03
     a40:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     a42:	68 2f       	mov	r22, r24
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	c9 01       	movw	r24, r18
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	82 57       	subi	r24, 0x72	; 114
     a60:	9e 4f       	sbci	r25, 0xFE	; 254
     a62:	fc 01       	movw	r30, r24
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	42 81       	ldd	r20, Z+2	; 0x02
     a6a:	53 81       	ldd	r21, Z+3	; 0x03
     a6c:	cb 01       	movw	r24, r22
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	86 0f       	add	r24, r22
     a74:	97 1f       	adc	r25, r23
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	8e 56       	subi	r24, 0x6E	; 110
     a80:	9e 4f       	sbci	r25, 0xFE	; 254
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
     a86:	31 83       	std	Z+1, r19	; 0x01
     a88:	42 83       	std	Z+2, r20	; 0x02
     a8a:	53 83       	std	Z+3, r21	; 0x03
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Right_Tick;
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	8a 56       	subi	r24, 0x6A	; 106
     aa6:	9e 4f       	sbci	r25, 0xFE	; 254
     aa8:	20 e4       	ldi	r18, 0x40	; 64
     aaa:	37 e0       	ldi	r19, 0x07	; 7
     aac:	fc 01       	movw	r30, r24
     aae:	31 83       	std	Z+1, r19	; 0x01
     ab0:	20 83       	st	Z, r18
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	89 83       	std	Y+1, r24	; 0x01
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = UP_INIT;
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	c9 01       	movw	r24, r18
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	84 57       	subi	r24, 0x74	; 116
     ad2:	9e 4f       	sbci	r25, 0xFE	; 254
     ad4:	fc 01       	movw	r30, r24
     ad6:	11 82       	std	Z+1, r1	; 0x01
     ad8:	10 82       	st	Z, r1
     ada:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     adc:	28 2f       	mov	r18, r24
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	c9 01       	movw	r24, r18
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	82 0f       	add	r24, r18
     ae8:	93 1f       	adc	r25, r19
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	9c 01       	movw	r18, r24
     af4:	22 57       	subi	r18, 0x72	; 114
     af6:	3e 4f       	sbci	r19, 0xFE	; 254
     af8:	8e e1       	ldi	r24, 0x1E	; 30
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	80 83       	st	Z, r24
     b04:	91 83       	std	Z+1, r25	; 0x01
     b06:	a2 83       	std	Z+2, r26	; 0x02
     b08:	b3 83       	std	Z+3, r27	; 0x03
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     b0c:	68 2f       	mov	r22, r24
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	28 2f       	mov	r18, r24
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	c9 01       	movw	r24, r18
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	82 57       	subi	r24, 0x72	; 114
     b2a:	9e 4f       	sbci	r25, 0xFE	; 254
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 81       	ld	r18, Z
     b30:	31 81       	ldd	r19, Z+1	; 0x01
     b32:	42 81       	ldd	r20, Z+2	; 0x02
     b34:	53 81       	ldd	r21, Z+3	; 0x03
     b36:	cb 01       	movw	r24, r22
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	86 0f       	add	r24, r22
     b3e:	97 1f       	adc	r25, r23
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	8e 56       	subi	r24, 0x6E	; 110
     b4a:	9e 4f       	sbci	r25, 0xFE	; 254
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
     b50:	31 83       	std	Z+1, r19	; 0x01
     b52:	42 83       	std	Z+2, r20	; 0x02
     b54:	53 83       	std	Z+3, r21	; 0x03
     b56:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Up_Tick;
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	c9 01       	movw	r24, r18
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	8a 56       	subi	r24, 0x6A	; 106
     b70:	9e 4f       	sbci	r25, 0xFE	; 254
     b72:	27 e7       	ldi	r18, 0x77	; 119
     b74:	37 e0       	ldi	r19, 0x07	; 7
     b76:	fc 01       	movw	r30, r24
     b78:	31 83       	std	Z+1, r19	; 0x01
     b7a:	20 83       	st	Z, r18
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = DOWN_INIT;
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	c9 01       	movw	r24, r18
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	84 57       	subi	r24, 0x74	; 116
     b9c:	9e 4f       	sbci	r25, 0xFE	; 254
     b9e:	fc 01       	movw	r30, r24
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	c9 01       	movw	r24, r18
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	9c 01       	movw	r18, r24
     bbe:	22 57       	subi	r18, 0x72	; 114
     bc0:	3e 4f       	sbci	r19, 0xFE	; 254
     bc2:	8e e1       	ldi	r24, 0x1E	; 30
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	80 83       	st	Z, r24
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	a2 83       	std	Z+2, r26	; 0x02
     bd2:	b3 83       	std	Z+3, r27	; 0x03
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     bd6:	68 2f       	mov	r22, r24
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	c9 01       	movw	r24, r18
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	82 57       	subi	r24, 0x72	; 114
     bf4:	9e 4f       	sbci	r25, 0xFE	; 254
     bf6:	fc 01       	movw	r30, r24
     bf8:	20 81       	ld	r18, Z
     bfa:	31 81       	ldd	r19, Z+1	; 0x01
     bfc:	42 81       	ldd	r20, Z+2	; 0x02
     bfe:	53 81       	ldd	r21, Z+3	; 0x03
     c00:	cb 01       	movw	r24, r22
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	86 0f       	add	r24, r22
     c08:	97 1f       	adc	r25, r23
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	8e 56       	subi	r24, 0x6E	; 110
     c14:	9e 4f       	sbci	r25, 0xFE	; 254
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
     c1a:	31 83       	std	Z+1, r19	; 0x01
     c1c:	42 83       	std	Z+2, r20	; 0x02
     c1e:	53 83       	std	Z+3, r21	; 0x03
     c20:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Down_Tick;
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	82 0f       	add	r24, r18
     c2e:	93 1f       	adc	r25, r19
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	8a 56       	subi	r24, 0x6A	; 106
     c3a:	9e 4f       	sbci	r25, 0xFE	; 254
     c3c:	2e ea       	ldi	r18, 0xAE	; 174
     c3e:	37 e0       	ldi	r19, 0x07	; 7
     c40:	fc 01       	movw	r30, r24
     c42:	31 83       	std	Z+1, r19	; 0x01
     c44:	20 83       	st	Z, r18
     c46:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = RGB_INIT;
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	84 57       	subi	r24, 0x74	; 116
     c66:	9e 4f       	sbci	r25, 0xFE	; 254
     c68:	fc 01       	movw	r30, r24
     c6a:	11 82       	std	Z+1, r1	; 0x01
     c6c:	10 82       	st	Z, r1
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 10;
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	c9 01       	movw	r24, r18
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	9c 01       	movw	r18, r24
     c88:	22 57       	subi	r18, 0x72	; 114
     c8a:	3e 4f       	sbci	r19, 0xFE	; 254
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	80 83       	st	Z, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	a2 83       	std	Z+2, r26	; 0x02
     c9c:	b3 83       	std	Z+3, r27	; 0x03
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     ca0:	68 2f       	mov	r22, r24
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	c9 01       	movw	r24, r18
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	82 57       	subi	r24, 0x72	; 114
     cbe:	9e 4f       	sbci	r25, 0xFE	; 254
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 81       	ld	r18, Z
     cc4:	31 81       	ldd	r19, Z+1	; 0x01
     cc6:	42 81       	ldd	r20, Z+2	; 0x02
     cc8:	53 81       	ldd	r21, Z+3	; 0x03
     cca:	cb 01       	movw	r24, r22
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	86 0f       	add	r24, r22
     cd2:	97 1f       	adc	r25, r23
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	8e 56       	subi	r24, 0x6E	; 110
     cde:	9e 4f       	sbci	r25, 0xFE	; 254
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
     ce4:	31 83       	std	Z+1, r19	; 0x01
     ce6:	42 83       	std	Z+2, r20	; 0x02
     ce8:	53 83       	std	Z+3, r21	; 0x03
     cea:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	c9 01       	movw	r24, r18
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	8a 56       	subi	r24, 0x6A	; 106
     d04:	9e 4f       	sbci	r25, 0xFE	; 254
     d06:	24 e1       	ldi	r18, 0x14	; 20
     d08:	39 e0       	ldi	r19, 0x09	; 9
     d0a:	fc 01       	movw	r30, r24
     d0c:	31 83       	std	Z+1, r19	; 0x01
     d0e:	20 83       	st	Z, r18
     d10:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LCD_Menu_Init;
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	c9 01       	movw	r24, r18
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	84 57       	subi	r24, 0x74	; 116
     d30:	9e 4f       	sbci	r25, 0xFE	; 254
     d32:	fc 01       	movw	r30, r24
     d34:	11 82       	std	Z+1, r1	; 0x01
     d36:	10 82       	st	Z, r1
     d38:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	c9 01       	movw	r24, r18
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	9c 01       	movw	r18, r24
     d52:	22 57       	subi	r18, 0x72	; 114
     d54:	3e 4f       	sbci	r19, 0xFE	; 254
     d56:	82 e3       	ldi	r24, 0x32	; 50
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	80 83       	st	Z, r24
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	a2 83       	std	Z+2, r26	; 0x02
     d66:	b3 83       	std	Z+3, r27	; 0x03
     d68:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	c9 01       	movw	r24, r18
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	82 57       	subi	r24, 0x72	; 114
     d88:	9e 4f       	sbci	r25, 0xFE	; 254
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 81       	ld	r18, Z
     d8e:	31 81       	ldd	r19, Z+1	; 0x01
     d90:	42 81       	ldd	r20, Z+2	; 0x02
     d92:	53 81       	ldd	r21, Z+3	; 0x03
     d94:	cb 01       	movw	r24, r22
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	86 0f       	add	r24, r22
     d9c:	97 1f       	adc	r25, r23
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	8e 56       	subi	r24, 0x6E	; 110
     da8:	9e 4f       	sbci	r25, 0xFE	; 254
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
     dae:	31 83       	std	Z+1, r19	; 0x01
     db0:	42 83       	std	Z+2, r20	; 0x02
     db2:	53 83       	std	Z+3, r21	; 0x03
     db4:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	8a 56       	subi	r24, 0x6A	; 106
     dce:	9e 4f       	sbci	r25, 0xFE	; 254
     dd0:	25 ee       	ldi	r18, 0xE5	; 229
     dd2:	37 e0       	ldi	r19, 0x07	; 7
     dd4:	fc 01       	movw	r30, r24
     dd6:	31 83       	std	Z+1, r19	; 0x01
     dd8:	20 83       	st	Z, r18
     dda:	85 e0       	ldi	r24, 0x05	; 5
    
    //Timer
    TimerSet(tasksPeriodGCD);
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	d9 da       	rcall	.-2638   	; 0x39a <TimerSet>
    TimerOn();
     de8:	06 db       	rcall	.-2548   	; 0x3f6 <TimerOn>
     dea:	83 e5       	ldi	r24, 0x53	; 83
    
    
    while (1) 
    {
        sleep_mode();
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	23 e5       	ldi	r18, 0x53	; 83
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	f9 01       	movw	r30, r18
     df4:	20 81       	ld	r18, Z
     df6:	21 60       	ori	r18, 0x01	; 1
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18
     dfc:	88 95       	sleep
     dfe:	83 e5       	ldi	r24, 0x53	; 83
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	23 e5       	ldi	r18, 0x53	; 83
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	f9 01       	movw	r30, r18
     e08:	20 81       	ld	r18, Z
     e0a:	2e 7f       	andi	r18, 0xFE	; 254
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
     e10:	ec cf       	rjmp	.-40     	; 0xdea <main+0x544>

00000e12 <Left_Tick>:
    }        
     e12:	cf 93       	push	r28
    return 0;
}

int Left_Tick(int state){
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <Left_Tick+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	19 f0       	breq	.+6      	; 0xe2e <Left_Tick+0x1c>
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	31 f0       	breq	.+12     	; 0xe38 <Left_Tick+0x26>
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <Left_Tick+0x30>
        case LFT_INIT:
            state = LFT_WAIT;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
            break;
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <Left_Tick+0x30>
        case LFT_WAIT:
            state = LFT_WAIT;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
            break;
     e40:	00 00       	nop
    }
    switch(state){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	99 f0       	breq	.+38     	; 0xe70 <Left_Tick+0x5e>
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	91 f4       	brne	.+36     	; 0xe72 <Left_Tick+0x60>
        case LFT_INIT:
            break;
        case LFT_WAIT:
            if(LEFT_BUTTON == 0x00){
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	88 70       	andi	r24, 0x08	; 8
     e5c:	99 27       	eor	r25, r25
     e5e:	89 2b       	or	r24, r25
     e60:	21 f4       	brne	.+8      	; 0xe6a <Left_Tick+0x58>
                LEFT = true;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <LEFT>
                break;
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <Left_Tick+0x60>
            }
            else{
                LEFT = false;
     e6a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <LEFT>
                break;
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <Left_Tick+0x60>
            state = LFT_WAIT;
            break;
    }
    switch(state){
        case LFT_INIT:
            break;
     e70:	00 00       	nop
                LEFT = false;
                break;
            }
    }
    
    return state;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <Right_Tick>:

int Right_Tick(int state){
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	00 d0       	rcall	.+0      	; 0xe86 <Right_Tick+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	19 f0       	breq	.+6      	; 0xe9c <Right_Tick+0x1c>
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	31 f0       	breq	.+12     	; 0xea6 <Right_Tick+0x26>
     e9a:	0a c0       	rjmp	.+20     	; 0xeb0 <Right_Tick+0x30>
        case RGHT_INIT:
            state = RGHT_WAIT;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	89 83       	std	Y+1, r24	; 0x01
            break;
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <Right_Tick+0x30>
        case RGHT_WAIT:
            state = RGHT_WAIT;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
            break;
     eae:	00 00       	nop
    }
    switch(state){
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	99 f0       	breq	.+38     	; 0xede <Right_Tick+0x5e>
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	91 f4       	brne	.+36     	; 0xee0 <Right_Tick+0x60>
        case RGHT_INIT:
            break;
        case RGHT_WAIT:
            if(RIGHT_BUTTON == 0x00){
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	99 27       	eor	r25, r25
     ecc:	89 2b       	or	r24, r25
     ece:	21 f4       	brne	.+8      	; 0xed8 <Right_Tick+0x58>
                RIGHT = true;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <RIGHT>
                break;
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <Right_Tick+0x60>
            }
            else{
                RIGHT = false;
     ed8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <RIGHT>
                break;
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <Right_Tick+0x60>
            state = RGHT_WAIT;
            break;
    }
    switch(state){
        case RGHT_INIT:
            break;
     ede:	00 00       	nop
                RIGHT = false;
                break;
            }
    }
    
    return state;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <Up_Tick>:

int Up_Tick(int state){
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <Up_Tick+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	19 f0       	breq	.+6      	; 0xf0a <Up_Tick+0x1c>
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	31 f0       	breq	.+12     	; 0xf14 <Up_Tick+0x26>
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <Up_Tick+0x30>
        case UP_INIT:
            state = UP_WAIT;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
            break;
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <Up_Tick+0x30>
        case UP_WAIT:
            state = UP_WAIT;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
            break;
     f1c:	00 00       	nop
    }
    switch(state){
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	99 f0       	breq	.+38     	; 0xf4c <Up_Tick+0x5e>
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	91 f4       	brne	.+36     	; 0xf4e <Up_Tick+0x60>
        case UP_INIT:
            break;
        case UP_WAIT:
            if(UP_BUTTON == 0x00){
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	82 70       	andi	r24, 0x02	; 2
     f38:	99 27       	eor	r25, r25
     f3a:	89 2b       	or	r24, r25
     f3c:	21 f4       	brne	.+8      	; 0xf46 <Up_Tick+0x58>
                UP = true;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <UP>
                break;
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <Up_Tick+0x60>
            }
            else{
                UP = false;
     f46:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <UP>
                break;
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <Up_Tick+0x60>
            state = UP_WAIT;
            break;
    }
    switch(state){
        case UP_INIT:
            break;
     f4c:	00 00       	nop
                UP = false;
                break;
            }
    }
    
    return state;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <Down_Tick>:

int Down_Tick(int state){
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	00 d0       	rcall	.+0      	; 0xf62 <Down_Tick+0x6>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	19 f0       	breq	.+6      	; 0xf78 <Down_Tick+0x1c>
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	31 f0       	breq	.+12     	; 0xf82 <Down_Tick+0x26>
     f76:	0a c0       	rjmp	.+20     	; 0xf8c <Down_Tick+0x30>
        case DOWN_INIT:
            state = DOWN_WAIT;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
            break;
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <Down_Tick+0x30>
        case DOWN_WAIT:
            state = DOWN_WAIT;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
            break;
     f8a:	00 00       	nop
    }
    switch(state){
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	99 f0       	breq	.+38     	; 0xfba <Down_Tick+0x5e>
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	91 f4       	brne	.+36     	; 0xfbc <Down_Tick+0x60>
        case DOWN_INIT:
            break;
        case DOWN_WAIT:
            if(DOWN_BUTTON == 0x00){
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	fc 01       	movw	r30, r24
     f9e:	80 81       	ld	r24, Z
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	84 70       	andi	r24, 0x04	; 4
     fa6:	99 27       	eor	r25, r25
     fa8:	89 2b       	or	r24, r25
     faa:	21 f4       	brne	.+8      	; 0xfb4 <Down_Tick+0x58>
                DOWN = true;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <DOWN>
                break;
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <Down_Tick+0x60>
            }
            else{
                DOWN = false;
     fb4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <DOWN>
                break;
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <Down_Tick+0x60>
            state = DOWN_WAIT;
            break;
    }
    switch(state){
        case DOWN_INIT:
            break;
     fba:	00 00       	nop
                DOWN = false;
                break;
            }
    }
    
    return state;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <LCD_Menu_Tick>:

int LCD_Menu_Tick(int state){
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <LCD_Menu_Tick+0x6>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
    static unsigned char current_song_choice = 0;
    switch(state){ //transitions
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	91 f0       	breq	.+36     	; 0x1006 <LCD_Menu_Tick+0x3c>
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	91 05       	cpc	r25, r1
     fe6:	1c f4       	brge	.+6      	; 0xfee <LCD_Menu_Tick+0x24>
     fe8:	89 2b       	or	r24, r25
     fea:	41 f0       	breq	.+16     	; 0xffc <LCD_Menu_Tick+0x32>
     fec:	be c0       	rjmp	.+380    	; 0x116a <LCD_Menu_Tick+0x1a0>
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	31 f1       	breq	.+76     	; 0x1040 <LCD_Menu_Tick+0x76>
     ff4:	03 97       	sbiw	r24, 0x03	; 3
     ff6:	09 f4       	brne	.+2      	; 0xffa <LCD_Menu_Tick+0x30>
     ff8:	b3 c0       	rjmp	.+358    	; 0x1160 <LCD_Menu_Tick+0x196>
     ffa:	b7 c0       	rjmp	.+366    	; 0x116a <LCD_Menu_Tick+0x1a0>
        case LCD_Menu_Init:
            state = LCD_Menu_Start;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
            break;
    1004:	b2 c0       	rjmp	.+356    	; 0x116a <LCD_Menu_Tick+0x1a0>
        case LCD_Menu_Start:
            if(LEFT && RIGHT && DOWN && UP){
    1006:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <LEFT>
    100a:	88 23       	and	r24, r24
    100c:	a1 f0       	breq	.+40     	; 0x1036 <LCD_Menu_Tick+0x6c>
    100e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <RIGHT>
    1012:	88 23       	and	r24, r24
    1014:	81 f0       	breq	.+32     	; 0x1036 <LCD_Menu_Tick+0x6c>
    1016:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <DOWN>
    101a:	88 23       	and	r24, r24
    101c:	61 f0       	breq	.+24     	; 0x1036 <LCD_Menu_Tick+0x6c>
    101e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <UP>
    1022:	88 23       	and	r24, r24
    1024:	41 f0       	breq	.+16     	; 0x1036 <LCD_Menu_Tick+0x6c>
                LCD_ClearScreen();
    1026:	51 d8       	rcall	.-3934   	; 0xca <LCD_ClearScreen>
                current_song_choice = 0;
    1028:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <current_song_choice.2203>
                state = LCD_Menu_Songs;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
                break;
    1034:	9a c0       	rjmp	.+308    	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
            else{
                state = LCD_Menu_Start;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
                break;
    103e:	95 c0       	rjmp	.+298    	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
        case LCD_Menu_Songs:
            if(LEFT && !RIGHT && !UP && !DOWN){
    1040:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <LEFT>
    1044:	88 23       	and	r24, r24
    1046:	c1 f0       	breq	.+48     	; 0x1078 <LCD_Menu_Tick+0xae>
    1048:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <RIGHT>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 27       	eor	r24, r25
    1050:	88 23       	and	r24, r24
    1052:	91 f0       	breq	.+36     	; 0x1078 <LCD_Menu_Tick+0xae>
    1054:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <UP>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 27       	eor	r24, r25
    105c:	88 23       	and	r24, r24
    105e:	61 f0       	breq	.+24     	; 0x1078 <LCD_Menu_Tick+0xae>
    1060:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <DOWN>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 27       	eor	r24, r25
    1068:	88 23       	and	r24, r24
                LCD_ClearScreen();
    106a:	31 f0       	breq	.+12     	; 0x1078 <LCD_Menu_Tick+0xae>
    106c:	2e d8       	rcall	.-4004   	; 0xca <LCD_ClearScreen>
                state = LCD_Menu_Start;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
                break;
    1076:	79 c0       	rjmp	.+242    	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
            else if(DOWN && !UP && !LEFT && !RIGHT){
    1078:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <DOWN>
    107c:	88 23       	and	r24, r24
    107e:	01 f1       	breq	.+64     	; 0x10c0 <LCD_Menu_Tick+0xf6>
    1080:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <UP>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 27       	eor	r24, r25
    1088:	88 23       	and	r24, r24
    108a:	d1 f0       	breq	.+52     	; 0x10c0 <LCD_Menu_Tick+0xf6>
    108c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <LEFT>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 27       	eor	r24, r25
    1094:	88 23       	and	r24, r24
    1096:	a1 f0       	breq	.+40     	; 0x10c0 <LCD_Menu_Tick+0xf6>
    1098:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <RIGHT>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 27       	eor	r24, r25
    10a0:	88 23       	and	r24, r24
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <LCD_Menu_Tick+0xf6>
                if(current_song_choice){
    10a4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    10a8:	88 23       	and	r24, r24
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <LCD_Menu_Tick+0xea>
                    current_song_choice = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <current_song_choice.2203>
                }
                else{
                    current_song_choice += 1;
                }
                break;
    10b2:	5b c0       	rjmp	.+182    	; 0x116a <LCD_Menu_Tick+0x1a0>
            else if(DOWN && !UP && !LEFT && !RIGHT){
                if(current_song_choice){
                    current_song_choice = 1;
                }
                else{
                    current_song_choice += 1;
    10b4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <current_song_choice.2203>
                }
                break;
    10be:	55 c0       	rjmp	.+170    	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
            else if(!DOWN && UP && !LEFT && !RIGHT){
    10c0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <DOWN>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 27       	eor	r24, r25
    10c8:	88 23       	and	r24, r24
    10ca:	e9 f0       	breq	.+58     	; 0x1106 <LCD_Menu_Tick+0x13c>
    10cc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <UP>
    10d0:	88 23       	and	r24, r24
    10d2:	c9 f0       	breq	.+50     	; 0x1106 <LCD_Menu_Tick+0x13c>
    10d4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <LEFT>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	89 27       	eor	r24, r25
    10dc:	88 23       	and	r24, r24
    10de:	99 f0       	breq	.+38     	; 0x1106 <LCD_Menu_Tick+0x13c>
    10e0:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <RIGHT>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 27       	eor	r24, r25
    10e8:	88 23       	and	r24, r24
    10ea:	69 f0       	breq	.+26     	; 0x1106 <LCD_Menu_Tick+0x13c>
                if(!current_song_choice){
    10ec:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    10f0:	88 23       	and	r24, r24
    10f2:	19 f4       	brne	.+6      	; 0x10fa <LCD_Menu_Tick+0x130>
                    current_song_choice = 0;
    10f4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <current_song_choice.2203>
                }
                else{
                current_song_choice -= 1;
                
                }            
                break;
    10f8:	38 c0       	rjmp	.+112    	; 0x116a <LCD_Menu_Tick+0x1a0>
            else if(!DOWN && UP && !LEFT && !RIGHT){
                if(!current_song_choice){
                    current_song_choice = 0;
                }
                else{
                current_song_choice -= 1;
    10fa:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    10fe:	81 50       	subi	r24, 0x01	; 1
    1100:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <current_song_choice.2203>
                
                }            
                break;
    1104:	32 c0       	rjmp	.+100    	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
            else if(!DOWN && !UP && !LEFT && RIGHT){
    1106:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <DOWN>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 27       	eor	r24, r25
    110e:	88 23       	and	r24, r24
    1110:	11 f1       	breq	.+68     	; 0x1156 <LCD_Menu_Tick+0x18c>
    1112:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <UP>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 27       	eor	r24, r25
    111a:	88 23       	and	r24, r24
    111c:	e1 f0       	breq	.+56     	; 0x1156 <LCD_Menu_Tick+0x18c>
    111e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <LEFT>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	89 27       	eor	r24, r25
    1126:	88 23       	and	r24, r24
    1128:	b1 f0       	breq	.+44     	; 0x1156 <LCD_Menu_Tick+0x18c>
    112a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <RIGHT>
    112e:	88 23       	and	r24, r24
    1130:	91 f0       	breq	.+36     	; 0x1156 <LCD_Menu_Tick+0x18c>
                if(!current_song_choice){
    1132:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    1136:	88 23       	and	r24, r24
    1138:	39 f4       	brne	.+14     	; 0x1148 <LCD_Menu_Tick+0x17e>
                    LCD_ClearScreen();
    113a:	0e 94 65 00 	call	0xca	; 0xca <LCD_ClearScreen>
                    state = LCD_Menu_Zense;
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
                else{
                    LCD_ClearScreen();
                    state = LCD_Menu_Start;
                    
                }
                break;
    1146:	11 c0       	rjmp	.+34     	; 0x116a <LCD_Menu_Tick+0x1a0>
                if(!current_song_choice){
                    LCD_ClearScreen();
                    state = LCD_Menu_Zense;
                }
                else{
                    LCD_ClearScreen();
    1148:	0e 94 65 00 	call	0xca	; 0xca <LCD_ClearScreen>
                    state = LCD_Menu_Start;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
                    
                }
                break;
    1154:	0a c0       	rjmp	.+20     	; 0x116a <LCD_Menu_Tick+0x1a0>
            }
            else{
                state = LCD_Menu_Songs;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
                break;
    115e:	05 c0       	rjmp	.+10     	; 0x116a <LCD_Menu_Tick+0x1a0>
            }    
        case LCD_Menu_Zense:      
            state = LCD_Menu_Zense;
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
            break;     
    1168:	00 00       	nop
    }
    switch(state){ //actions
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	51 f0       	breq	.+20     	; 0x1188 <LCD_Menu_Tick+0x1be>
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	91 05       	cpc	r25, r1
    1178:	0c f4       	brge	.+2      	; 0x117c <LCD_Menu_Tick+0x1b2>
    117a:	4e c0       	rjmp	.+156    	; 0x1218 <LCD_Menu_Tick+0x24e>
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	91 05       	cpc	r25, r1
    1180:	29 f0       	breq	.+10     	; 0x118c <LCD_Menu_Tick+0x1c2>
    1182:	03 97       	sbiw	r24, 0x03	; 3
    1184:	41 f1       	breq	.+80     	; 0x11d6 <LCD_Menu_Tick+0x20c>
        case LCD_Menu_Init:
            break;
        case LCD_Menu_Start:
            LCD_Game_Menu();
    1186:	49 c0       	rjmp	.+146    	; 0x121a <LCD_Menu_Tick+0x250>
    1188:	e0 d8       	rcall	.-3648   	; 0x34a <LCD_Game_Menu>
            break;
    118a:	47 c0       	rjmp	.+142    	; 0x121a <LCD_Menu_Tick+0x250>
        case LCD_Menu_Songs:
            if(current_song_choice){
    118c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current_song_choice.2203>
    1190:	88 23       	and	r24, r24
                LCD_Cursor(1);
    1192:	41 f0       	breq	.+16     	; 0x11a4 <LCD_Menu_Tick+0x1da>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	36 d8       	rcall	.-3988   	; 0x204 <LCD_Cursor>
                LCD_WriteData(' ');
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteData>
                LCD_Cursor(17);
    119e:	81 e1       	ldi	r24, 0x11	; 17
    11a0:	31 d8       	rcall	.-3998   	; 0x204 <LCD_Cursor>
            }
            else{
                LCD_Cursor(17);
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <LCD_Menu_Tick+0x1e8>
    11a4:	81 e1       	ldi	r24, 0x11	; 17
                LCD_WriteData(' ');
    11a6:	2e d8       	rcall	.-4004   	; 0x204 <LCD_Cursor>
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteData>
                LCD_Cursor(1);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	29 d8       	rcall	.-4014   	; 0x204 <LCD_Cursor>
            }
            LCD_WriteData(0xA5);
    11b2:	85 ea       	ldi	r24, 0xA5	; 165
    11b4:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteData>
            LCD_Write_Single_Line(2,1, "ZEN ZEN ZENSE");
    11b8:	4d e4       	ldi	r20, 0x4D	; 77
    11ba:	51 e0       	ldi	r21, 0x01	; 1
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Write_Single_Line>
            LCD_Write_Single_Line(2,2, "NO");
    11c6:	4b e5       	ldi	r20, 0x5B	; 91
    11c8:	51 e0       	ldi	r21, 0x01	; 1
    11ca:	62 e0       	ldi	r22, 0x02	; 2
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Write_Single_Line>
            break;
    11d4:	22 c0       	rjmp	.+68     	; 0x121a <LCD_Menu_Tick+0x250>
        case LCD_Menu_Zense:
            LCD_Write_Single_Line(1,1, "Press - to play");
    11d6:	4e e5       	ldi	r20, 0x5E	; 94
    11d8:	51 e0       	ldi	r21, 0x01	; 1
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Write_Single_Line>
            LCD_Cursor(7);
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	0e d8       	rcall	.-4068   	; 0x204 <LCD_Cursor>
            LCD_WriteData(0x00);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteData>
            LCD_Write_Single_Line(1,2, "High Score:");
    11ee:	4e e6       	ldi	r20, 0x6E	; 110
    11f0:	51 e0       	ldi	r21, 0x01	; 1
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Write_Single_Line>
            LCD_Cursor(28);
    11fc:	8c e1       	ldi	r24, 0x1C	; 28
    11fe:	02 d8       	rcall	.-4092   	; 0x204 <LCD_Cursor>
            LCD_WriteData(current_score + '0');
    1200:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <current_score>
    1204:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <current_score+0x1>
    1208:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <current_score+0x2>
    120c:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <current_score+0x3>
    1210:	80 5d       	subi	r24, 0xD0	; 208
    1212:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteData>
            break;
    1216:	01 c0       	rjmp	.+2      	; 0x121a <LCD_Menu_Tick+0x250>
            state = LCD_Menu_Zense;
            break;     
    }
    switch(state){ //actions
        case LCD_Menu_Init:
            break;
    1218:	00 00       	nop
            break;
        
        
    }

    return state;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <RGB_Matrix_Tick>:

int RGB_Matrix_Tick(int state){
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <RGB_Matrix_Tick+0x6>
    122e:	1f 92       	push	r1
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	8a 83       	std	Y+2, r24	; 0x02
    switch(state){
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	19 f0       	breq	.+6      	; 0x1246 <RGB_Matrix_Tick+0x1e>
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	31 f0       	breq	.+12     	; 0x1250 <RGB_Matrix_Tick+0x28>
    1244:	0a c0       	rjmp	.+20     	; 0x125a <RGB_Matrix_Tick+0x32>
        case RGB_INIT:
            state = RGB_MENU;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9b 83       	std	Y+3, r25	; 0x03
    124c:	8a 83       	std	Y+2, r24	; 0x02
            break;
    124e:	05 c0       	rjmp	.+10     	; 0x125a <RGB_Matrix_Tick+0x32>
        case RGB_MENU:
            state = RGB_MENU;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9b 83       	std	Y+3, r25	; 0x03
    1256:	8a 83       	std	Y+2, r24	; 0x02
            break;
    1258:	00 00       	nop
    }
    switch(state){
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	b9 f1       	breq	.+110    	; 0x12d0 <RGB_Matrix_Tick+0xa8>
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	b1 f5       	brne	.+108    	; 0x12d2 <RGB_Matrix_Tick+0xaa>
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
    1266:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <LEFT>
    126a:	88 23       	and	r24, r24
    126c:	61 f4       	brne	.+24     	; 0x1286 <RGB_Matrix_Tick+0x5e>
    126e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <RIGHT>
    1272:	88 23       	and	r24, r24
    1274:	41 f4       	brne	.+16     	; 0x1286 <RGB_Matrix_Tick+0x5e>
    1276:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <UP>
    127a:	88 23       	and	r24, r24
    127c:	21 f4       	brne	.+8      	; 0x1286 <RGB_Matrix_Tick+0x5e>
    127e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <DOWN>
    1282:	88 23       	and	r24, r24
    1284:	01 f1       	breq	.+64     	; 0x12c6 <RGB_Matrix_Tick+0x9e>
                for(unsigned char i = 0; i < 8; i++){
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <RGB_Matrix_Tick+0x98>
                    Shift_transmit_data(128 >> i);
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	80 e8       	ldi	r24, 0x80	; 128
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <RGB_Matrix_Tick+0x72>
    1296:	95 95       	asr	r25
    1298:	87 95       	ror	r24
    129a:	2a 95       	dec	r18
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <RGB_Matrix_Tick+0x6e>
    129e:	e4 da       	rcall	.-2616   	; 0x868 <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	8c 5c       	subi	r24, 0xCC	; 204
    12a8:	9e 4f       	sbci	r25, 0xFE	; 254
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	80 95       	com	r24
    12b0:	db da       	rcall	.-2634   	; 0x868 <Shift_transmit_data>
                    delay_ms(1);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 17 01 	call	0x22e	; 0x22e <delay_ms>
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	8f 5f       	subi	r24, 0xFF	; 255
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	88 30       	cpi	r24, 0x08	; 8
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(1);
                }
            }
            Shift_transmit_data(0);
    12c4:	10 f3       	brcs	.-60     	; 0x128a <RGB_Matrix_Tick+0x62>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
    12c8:	cf da       	rcall	.-2658   	; 0x868 <Shift_transmit_data>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	cd da       	rcall	.-2662   	; 0x868 <Shift_transmit_data>
            
            break;
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <RGB_Matrix_Tick+0xaa>
            state = RGB_MENU;
            break;
    }
    switch(state){
        case RGB_INIT:
            break;
    12d0:	00 00       	nop
            Shift_transmit_data(0);
            
            break;
    }
    
    return state;
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <eeprom_read_byte>:
    12e2:	f9 99       	sbic	0x1f, 1	; 31
    12e4:	fe cf       	rjmp	.-4      	; 0x12e2 <eeprom_read_byte>
    12e6:	92 bd       	out	0x22, r25	; 34
    12e8:	81 bd       	out	0x21, r24	; 33
    12ea:	f8 9a       	sbi	0x1f, 0	; 31
    12ec:	99 27       	eor	r25, r25
    12ee:	80 b5       	in	r24, 0x20	; 32
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
