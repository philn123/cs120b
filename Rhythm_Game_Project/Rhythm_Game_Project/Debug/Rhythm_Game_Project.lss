
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000120a  0000129e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  0080015e  0080015e  000012fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001037  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf6  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00003b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074d  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000987  00000000  00000000  00004709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c2       	rjmp	.+1450   	; 0x5e0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 35       	cpi	r26, 0x5E	; 94
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e5       	ldi	r26, 0x5E	; 94
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3b       	cpi	r26, 0xB0	; 176
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f1 d3       	rcall	.+2018   	; 0x8a6 <main>
      c4:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	04 d0       	rcall	.+8      	; 0xde <LCD_WriteCommand>
      d6:	00 00       	nop
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <LCD_WriteCommand>:
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	1f 92       	push	r1
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	89 83       	std	Y+1, r24	; 0x01
      ea:	85 e2       	ldi	r24, 0x25	; 37
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	25 e2       	ldi	r18, 0x25	; 37
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	2e 7f       	andi	r18, 0xFE	; 254
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
      fc:	8b e2       	ldi	r24, 0x2B	; 43
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	29 81       	ldd	r18, Y+1	; 0x01
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
     106:	85 e2       	ldi	r24, 0x25	; 37
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	25 e2       	ldi	r18, 0x25	; 37
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	f9 01       	movw	r30, r18
     110:	20 81       	ld	r18, Z
     112:	22 60       	ori	r18, 0x02	; 2
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
     118:	00 00       	nop
     11a:	85 e2       	ldi	r24, 0x25	; 37
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	25 e2       	ldi	r18, 0x25	; 37
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	2d 7f       	andi	r18, 0xFD	; 253
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	7e d0       	rcall	.+252    	; 0x22e <delay_ms>
     132:	00 00       	nop
     134:	0f 90       	pop	r0
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <LCD_WriteData>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	1f 92       	push	r1
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	89 83       	std	Y+1, r24	; 0x01
     148:	85 e2       	ldi	r24, 0x25	; 37
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	25 e2       	ldi	r18, 0x25	; 37
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	21 60       	ori	r18, 0x01	; 1
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	8b e2       	ldi	r24, 0x2B	; 43
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
     164:	85 e2       	ldi	r24, 0x25	; 37
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	25 e2       	ldi	r18, 0x25	; 37
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	22 60       	ori	r18, 0x02	; 2
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	00 00       	nop
     178:	85 e2       	ldi	r24, 0x25	; 37
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	25 e2       	ldi	r18, 0x25	; 37
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	f9 01       	movw	r30, r18
     182:	20 81       	ld	r18, Z
     184:	2d 7f       	andi	r18, 0xFD	; 253
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	4f d0       	rcall	.+158    	; 0x22e <delay_ms>
     190:	00 00       	nop
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <LCD_Write_Single_Line>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <LCD_Write_Single_Line+0x6>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <LCD_Write_Single_Line+0x8>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <LCD_Write_Single_Line+0xa>
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	8a 83       	std	Y+2, r24	; 0x02
     1aa:	7c 83       	std	Y+4, r23	; 0x04
     1ac:	6b 83       	std	Y+3, r22	; 0x03
     1ae:	5e 83       	std	Y+6, r21	; 0x06
     1b0:	4d 83       	std	Y+5, r20	; 0x05
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ba:	02 97       	sbiw	r24, 0x02	; 2
     1bc:	99 f4       	brne	.+38     	; 0x1e4 <LCD_Write_Single_Line+0x4a>
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	80 5f       	subi	r24, 0xF0	; 240
     1c2:	89 83       	std	Y+1, r24	; 0x01
     1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <LCD_Write_Single_Line+0x4a>
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	98 0f       	add	r25, r24
     1cc:	99 83       	std	Y+1, r25	; 0x01
     1ce:	1a d0       	rcall	.+52     	; 0x204 <LCD_Cursor>
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	9e 81       	ldd	r25, Y+6	; 0x06
     1d4:	9c 01       	movw	r18, r24
     1d6:	2f 5f       	subi	r18, 0xFF	; 255
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	3e 83       	std	Y+6, r19	; 0x06
     1dc:	2d 83       	std	Y+5, r18	; 0x05
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	ac df       	rcall	.-168    	; 0x13c <LCD_WriteData>
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
     1e6:	9e 81       	ldd	r25, Y+6	; 0x06
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	59 f7       	brne	.-42     	; 0x1c6 <LCD_Write_Single_Line+0x2c>
     1f0:	00 00       	nop
     1f2:	26 96       	adiw	r28, 0x06	; 6
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <LCD_Cursor>:
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	81 31       	cpi	r24, 0x11	; 17
     214:	20 f4       	brcc	.+8      	; 0x21e <LCD_Cursor+0x1a>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	81 58       	subi	r24, 0x81	; 129
     21a:	61 df       	rcall	.-318    	; 0xde <LCD_WriteCommand>
     21c:	03 c0       	rjmp	.+6      	; 0x224 <LCD_Cursor+0x20>
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	81 55       	subi	r24, 0x51	; 81
     222:	5d df       	rcall	.-326    	; 0xde <LCD_WriteCommand>
     224:	00 00       	nop
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <delay_ms>:
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <delay_ms+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <delay_ms+0x8>
     236:	00 d0       	rcall	.+0      	; 0x238 <delay_ms+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9e 83       	std	Y+6, r25	; 0x06
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	13 c0       	rjmp	.+38     	; 0x26c <delay_ms+0x3e>
     246:	1c 82       	std	Y+4, r1	; 0x04
     248:	1b 82       	std	Y+3, r1	; 0x03
     24a:	06 c0       	rjmp	.+12     	; 0x258 <delay_ms+0x2a>
     24c:	00 00       	nop
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	87 30       	cpi	r24, 0x07	; 7
     25e:	93 40       	sbci	r25, 0x03	; 3
     260:	ac f3       	brlt	.-22     	; 0x24c <delay_ms+0x1e>
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	3a 81       	ldd	r19, Y+2	; 0x02
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	9e 81       	ldd	r25, Y+6	; 0x06
     274:	28 17       	cp	r18, r24
     276:	39 07       	cpc	r19, r25
     278:	34 f3       	brlt	.-52     	; 0x246 <delay_ms+0x18>
     27a:	00 00       	nop
     27c:	26 96       	adiw	r28, 0x06	; 6
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <LCD_Custom_Character>:
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <LCD_Custom_Character+0x6>
     294:	00 d0       	rcall	.+0      	; 0x296 <LCD_Custom_Character+0x8>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	8a 83       	std	Y+2, r24	; 0x02
     29c:	7c 83       	std	Y+4, r23	; 0x04
     29e:	6b 83       	std	Y+3, r22	; 0x03
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	88 30       	cpi	r24, 0x08	; 8
     2a4:	d0 f4       	brcc	.+52     	; 0x2da <LCD_Custom_Character+0x4c>
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	08 96       	adiw	r24, 0x08	; 8
     2ae:	88 0f       	add	r24, r24
     2b0:	88 0f       	add	r24, r24
     2b2:	88 0f       	add	r24, r24
     2b4:	14 df       	rcall	.-472    	; 0xde <LCD_WriteCommand>
     2b6:	19 82       	std	Y+1, r1	; 0x01
     2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <LCD_Custom_Character+0x46>
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	2b 81       	ldd	r18, Y+3	; 0x03
     2c2:	3c 81       	ldd	r19, Y+4	; 0x04
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	37 df       	rcall	.-402    	; 0x13c <LCD_WriteData>
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	8f 5f       	subi	r24, 0xFF	; 255
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	80 f3       	brcs	.-32     	; 0x2ba <LCD_Custom_Character+0x2c>
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	00 df       	rcall	.-512    	; 0xde <LCD_WriteCommand>
     2de:	00 00       	nop
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <LCD_init>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	84 e6       	ldi	r24, 0x64	; 100
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	99 df       	rcall	.-206    	; 0x22e <delay_ms>
     2fc:	88 e3       	ldi	r24, 0x38	; 56
     2fe:	ef de       	rcall	.-546    	; 0xde <LCD_WriteCommand>
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	ed de       	rcall	.-550    	; 0xde <LCD_WriteCommand>
     304:	8f e0       	ldi	r24, 0x0F	; 15
     306:	eb de       	rcall	.-554    	; 0xde <LCD_WriteCommand>
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	e9 de       	rcall	.-558    	; 0xde <LCD_WriteCommand>
     30c:	8a e0       	ldi	r24, 0x0A	; 10
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	8e df       	rcall	.-228    	; 0x22e <delay_ms>
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	ba df       	rcall	.-140    	; 0x28e <LCD_Custom_Character>
     31a:	68 e0       	ldi	r22, 0x08	; 8
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	b6 df       	rcall	.-148    	; 0x28e <LCD_Custom_Character>
     322:	60 e1       	ldi	r22, 0x10	; 16
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	b2 df       	rcall	.-156    	; 0x28e <LCD_Custom_Character>
     32a:	68 e1       	ldi	r22, 0x18	; 24
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	ae df       	rcall	.-164    	; 0x28e <LCD_Custom_Character>
     332:	60 e2       	ldi	r22, 0x20	; 32
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	85 e0       	ldi	r24, 0x05	; 5
     338:	aa df       	rcall	.-172    	; 0x28e <LCD_Custom_Character>
     33a:	68 e2       	ldi	r22, 0x28	; 40
     33c:	71 e0       	ldi	r23, 0x01	; 1
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	a6 df       	rcall	.-180    	; 0x28e <LCD_Custom_Character>
     342:	00 00       	nop
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <LCD_Game_Menu>:
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	c4 de       	rcall	.-632    	; 0xde <LCD_WriteCommand>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	55 df       	rcall	.-342    	; 0x204 <LCD_Cursor>
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	ef de       	rcall	.-546    	; 0x13c <LCD_WriteData>
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	51 df       	rcall	.-350    	; 0x204 <LCD_Cursor>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	eb de       	rcall	.-554    	; 0x13c <LCD_WriteData>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	e9 de       	rcall	.-558    	; 0x13c <LCD_WriteData>
     36a:	84 e0       	ldi	r24, 0x04	; 4
     36c:	e7 de       	rcall	.-562    	; 0x13c <LCD_WriteData>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	e5 de       	rcall	.-566    	; 0x13c <LCD_WriteData>
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	47 df       	rcall	.-370    	; 0x204 <LCD_Cursor>
     376:	85 e0       	ldi	r24, 0x05	; 5
     378:	e1 de       	rcall	.-574    	; 0x13c <LCD_WriteData>
     37a:	4c e3       	ldi	r20, 0x3C	; 60
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0a df       	rcall	.-492    	; 0x19a <LCD_Write_Single_Line>
     386:	87 e1       	ldi	r24, 0x17	; 23
     388:	3d df       	rcall	.-390    	; 0x204 <LCD_Cursor>
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	d7 de       	rcall	.-594    	; 0x13c <LCD_WriteData>
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	a6 de       	rcall	.-692    	; 0xde <LCD_WriteCommand>
     392:	00 00       	nop
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <TimerSet>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <TimerSet+0x6>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <TimerSet+0x8>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	69 83       	std	Y+1, r22	; 0x01
     3a8:	7a 83       	std	Y+2, r23	; 0x02
     3aa:	8b 83       	std	Y+3, r24	; 0x03
     3ac:	9c 83       	std	Y+4, r25	; 0x04
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	ab 81       	ldd	r26, Y+3	; 0x03
     3b4:	bc 81       	ldd	r27, Y+4	; 0x04
     3b6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_M>
     3ba:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_M+0x1>
     3be:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_M+0x2>
     3c2:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_M+0x3>
     3c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     3ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     3ce:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     3d2:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     3d6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     3da:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     3de:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     3e2:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     3e6:	00 00       	nop
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <TimerOn>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	81 e8       	ldi	r24, 0x81	; 129
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	2b e0       	ldi	r18, 0x0B	; 11
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
     408:	88 e8       	ldi	r24, 0x88	; 136
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	2d e7       	ldi	r18, 0x7D	; 125
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	fc 01       	movw	r30, r24
     412:	31 83       	std	Z+1, r19	; 0x01
     414:	20 83       	st	Z, r18
     416:	8f e6       	ldi	r24, 0x6F	; 111
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	22 e0       	ldi	r18, 0x02	; 2
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
     420:	84 e8       	ldi	r24, 0x84	; 132
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	11 82       	std	Z+1, r1	; 0x01
     428:	10 82       	st	Z, r1
     42a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     42e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     432:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     436:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     43a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     43e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     442:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     446:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     44a:	8f e5       	ldi	r24, 0x5F	; 95
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2f e5       	ldi	r18, 0x5F	; 95
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	20 68       	ori	r18, 0x80	; 128
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
     45c:	00 00       	nop
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <TimerISR>:

void TimerISR() {
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	1f 92       	push	r1
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
     478:	19 82       	std	Y+1, r1	; 0x01
     47a:	a6 c0       	rjmp	.+332    	; 0x5c8 <TimerISR+0x164>
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	c9 01       	movw	r24, r18
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	82 59       	subi	r24, 0x92	; 146
     496:	9e 4f       	sbci	r25, 0xFE	; 254
     498:	fc 01       	movw	r30, r24
     49a:	20 81       	ld	r18, Z
     49c:	31 81       	ldd	r19, Z+1	; 0x01
     49e:	42 81       	ldd	r20, Z+2	; 0x02
     4a0:	53 81       	ldd	r21, Z+3	; 0x03
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	68 2f       	mov	r22, r24
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	86 0f       	add	r24, r22
     4b0:	97 1f       	adc	r25, r23
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	86 59       	subi	r24, 0x96	; 150
     4bc:	9e 4f       	sbci	r25, 0xFE	; 254
     4be:	fc 01       	movw	r30, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	a2 81       	ldd	r26, Z+2	; 0x02
     4c6:	b3 81       	ldd	r27, Z+3	; 0x03
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	4a 07       	cpc	r20, r26
     4ce:	5b 07       	cpc	r21, r27
     4d0:	08 f4       	brcc	.+2      	; 0x4d4 <TimerISR+0x70>
     4d2:	49 c0       	rjmp	.+146    	; 0x566 <TimerISR+0x102>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	08 2f       	mov	r16, r24
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	c9 01       	movw	r24, r18
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	8e 58       	subi	r24, 0x8E	; 142
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	fc 01       	movw	r30, r24
     4f8:	40 81       	ld	r20, Z
     4fa:	51 81       	ldd	r21, Z+1	; 0x01
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	28 2f       	mov	r18, r24
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	c9 01       	movw	r24, r18
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	82 0f       	add	r24, r18
     50a:	93 1f       	adc	r25, r19
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 59       	subi	r24, 0x98	; 152
     516:	9e 4f       	sbci	r25, 0xFE	; 254
     518:	fc 01       	movw	r30, r24
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	fa 01       	movw	r30, r20
     520:	09 95       	icall
     522:	9c 01       	movw	r18, r24
     524:	c8 01       	movw	r24, r16
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	80 0f       	add	r24, r16
     52c:	91 1f       	adc	r25, r17
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	88 59       	subi	r24, 0x98	; 152
     538:	9e 4f       	sbci	r25, 0xFE	; 254
     53a:	fc 01       	movw	r30, r24
     53c:	31 83       	std	Z+1, r19	; 0x01
     53e:	20 83       	st	Z, r18
            tasks[i].elapsedTime = 0;
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	c9 01       	movw	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	82 59       	subi	r24, 0x92	; 146
     55a:	9e 4f       	sbci	r25, 0xFE	; 254
     55c:	fc 01       	movw	r30, r24
     55e:	10 82       	st	Z, r1
     560:	11 82       	std	Z+1, r1	; 0x01
     562:	12 82       	std	Z+2, r1	; 0x02
     564:	13 82       	std	Z+3, r1	; 0x03
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	68 2f       	mov	r22, r24
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	28 2f       	mov	r18, r24
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	c9 01       	movw	r24, r18
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	82 59       	subi	r24, 0x92	; 146
     586:	9e 4f       	sbci	r25, 0xFE	; 254
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	a2 81       	ldd	r26, Z+2	; 0x02
     590:	b3 81       	ldd	r27, Z+3	; 0x03
     592:	25 e0       	ldi	r18, 0x05	; 5
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	28 0f       	add	r18, r24
     59c:	39 1f       	adc	r19, r25
     59e:	4a 1f       	adc	r20, r26
     5a0:	5b 1f       	adc	r21, r27
     5a2:	cb 01       	movw	r24, r22
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	86 0f       	add	r24, r22
     5aa:	97 1f       	adc	r25, r23
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	82 59       	subi	r24, 0x92	; 146
     5b6:	9e 4f       	sbci	r25, 0xFE	; 254
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
     5bc:	31 83       	std	Z+1, r19	; 0x01
     5be:	42 83       	std	Z+2, r20	; 0x02
     5c0:	53 83       	std	Z+3, r21	; 0x03

void TimerISR() {
	TimerFlag = 1;
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	86 e0       	ldi	r24, 0x06	; 6
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	98 17       	cp	r25, r24
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <TimerISR+0x16e>
     5d0:	55 cf       	rjmp	.-342    	; 0x47c <TimerISR+0x18>
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
    
}
     5d2:	00 00       	nop
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     5f0:	0f 92       	push	r0
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     612:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_avr_timer_cntcurr>
     616:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <_avr_timer_cntcurr+0x1>
     61a:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <_avr_timer_cntcurr+0x2>
     61e:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <_avr_timer_cntcurr+0x3>
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	a1 09       	sbc	r26, r1
     626:	b1 09       	sbc	r27, r1
     628:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     62c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     630:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     634:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     638:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_avr_timer_cntcurr>
     63c:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <_avr_timer_cntcurr+0x1>
     640:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <_avr_timer_cntcurr+0x2>
     644:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <_avr_timer_cntcurr+0x3>
     648:	89 2b       	or	r24, r25
     64a:	8a 2b       	or	r24, r26
     64c:	8b 2b       	or	r24, r27
     64e:	89 f4       	brne	.+34     	; 0x672 <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
     650:	09 df       	rcall	.-494    	; 0x464 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     652:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
     656:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
     65a:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
     65e:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
     662:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     666:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     66a:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     66e:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
	}
}
     672:	00 00       	nop
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     696:	0f 90       	pop	r0
     698:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <Set_Bit>:
#define DATA 2		//Data pin location
#define SHIFT 3	//Shift Clock pin location
#define STORE 4	//Store Clock pin location


unsigned char Set_Bit(unsigned char output, unsigned char in){
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <Set_Bit+0x6>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	6a 83       	std	Y+2, r22	; 0x02
    return (output | (1 << in));   
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <Set_Bit+0x1e>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	2a 95       	dec	r18
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <Set_Bit+0x1a>
     6c4:	98 2f       	mov	r25, r24
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	89 2b       	or	r24, r25
}
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <Clear_Bit>:
unsigned char Clear_Bit(unsigned char output, unsigned char in){
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	00 d0       	rcall	.+0      	; 0x6da <Clear_Bit+0x6>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	6a 83       	std	Y+2, r22	; 0x02
    return (output & ~(1 << in));
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	28 2f       	mov	r18, r24
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <Clear_Bit+0x1e>
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	2a 95       	dec	r18
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <Clear_Bit+0x1a>
     6f6:	98 2f       	mov	r25, r24
     6f8:	90 95       	com	r25
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	89 23       	and	r24, r25
} 
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <Shift_Init>:

void Shift_Init() {
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
    DDRC = Set_Bit(DDRC, DATA);
     714:	07 e2       	ldi	r16, 0x27	; 39
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	87 e2       	ldi	r24, 0x27	; 39
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	bf df       	rcall	.-130    	; 0x6a2 <Set_Bit>
     724:	f8 01       	movw	r30, r16
     726:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, SHIFT);
     728:	07 e2       	ldi	r16, 0x27	; 39
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	87 e2       	ldi	r24, 0x27	; 39
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	b5 df       	rcall	.-150    	; 0x6a2 <Set_Bit>
     738:	f8 01       	movw	r30, r16
     73a:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, STORE);
     73c:	07 e2       	ldi	r16, 0x27	; 39
     73e:	10 e0       	ldi	r17, 0x00	; 0
     740:	87 e2       	ldi	r24, 0x27	; 39
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	64 e0       	ldi	r22, 0x04	; 4
     74a:	ab df       	rcall	.-170    	; 0x6a2 <Set_Bit>
     74c:	f8 01       	movw	r30, r16
     74e:	80 83       	st	Z, r24
}
     750:	00 00       	nop
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <Shift_Data_High>:

//Set Data line high
void Shift_Data_High() {
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, DATA);
     768:	08 e2       	ldi	r16, 0x28	; 40
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	88 e2       	ldi	r24, 0x28	; 40
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	80 81       	ld	r24, Z
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	95 df       	rcall	.-214    	; 0x6a2 <Set_Bit>
     778:	f8 01       	movw	r30, r16
     77a:	80 83       	st	Z, r24
}
     77c:	00 00       	nop
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <Shift_Data_Low>:

//Set Data line low
void Shift_Data_Low() {
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
    PORTC = Clear_Bit(PORTC, DATA);
     794:	08 e2       	ldi	r16, 0x28	; 40
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	88 e2       	ldi	r24, 0x28	; 40
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	98 df       	rcall	.-208    	; 0x6d4 <Clear_Bit>
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 83       	st	Z, r24
}
     7a8:	00 00       	nop
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <Shift_Pulse>:

//Pulse Shift Clock
void Shift_Pulse() {
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, SHIFT);
     7c0:	08 e2       	ldi	r16, 0x28	; 40
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	69 df       	rcall	.-302    	; 0x6a2 <Set_Bit>
     7d0:	f8 01       	movw	r30, r16
     7d2:	80 83       	st	Z, r24
    PORTC = Clear_Bit(PORTC, SHIFT);
     7d4:	08 e2       	ldi	r16, 0x28	; 40
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	88 e2       	ldi	r24, 0x28	; 40
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	78 df       	rcall	.-272    	; 0x6d4 <Clear_Bit>
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 83       	st	Z, r24
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <Shift_Store>:

//Pulse Store Clock
void Shift_Store() {
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <Shift_Store+0xa>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <Shift_Store+0xc>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, STORE);
     804:	08 e2       	ldi	r16, 0x28	; 40
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	88 e2       	ldi	r24, 0x28	; 40
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	64 e0       	ldi	r22, 0x04	; 4
     812:	47 df       	rcall	.-370    	; 0x6a2 <Set_Bit>
     814:	f8 01       	movw	r30, r16
     816:	80 83       	st	Z, r24
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <Shift_Store+0x30>
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     82c:	08 e2       	ldi	r16, 0x28	; 40
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	88 e2       	ldi	r24, 0x28	; 40
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	64 e0       	ldi	r22, 0x04	; 4
     83a:	4c df       	rcall	.-360    	; 0x6d4 <Clear_Bit>
     83c:	f8 01       	movw	r30, r16
     83e:	80 83       	st	Z, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <Shift_Store+0x58>
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
    _delay_loop_2(1);
}
     854:	00 00       	nop
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <Shift_transmit_data>:


void Shift_transmit_data(unsigned char data) {
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <Shift_transmit_data+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	8a 83       	std	Y+2, r24	; 0x02
    for(unsigned char i=0;i<8;i++) {
     874:	19 82       	std	Y+1, r1	; 0x01
     876:	0d c0       	rjmp	.+26     	; 0x892 <Shift_transmit_data+0x2a>
        if(data & 0x80) {
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	88 23       	and	r24, r24
     87c:	14 f4       	brge	.+4      	; 0x882 <Shift_transmit_data+0x1a>
            Shift_Data_High();
     87e:	6e df       	rcall	.-292    	; 0x75c <Shift_Data_High>
     880:	01 c0       	rjmp	.+2      	; 0x884 <Shift_transmit_data+0x1c>
            } else {
            Shift_Data_Low();
     882:	82 df       	rcall	.-252    	; 0x788 <Shift_Data_Low>
        }

        Shift_Pulse();
     884:	97 df       	rcall	.-210    	; 0x7b4 <Shift_Pulse>
     886:	8a 81       	ldd	r24, Y+2	; 0x02
        data=data << 1;
     888:	88 0f       	add	r24, r24
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	89 81       	ldd	r24, Y+1	; 0x01
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	88 30       	cpi	r24, 0x08	; 8
     896:	80 f3       	brcs	.-32     	; 0x878 <Shift_transmit_data+0x10>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     898:	ad df       	rcall	.-166    	; 0x7f4 <Shift_Store>
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <main>:
     8a6:	cf 93       	push	r28

//global variables
//unsigned char pic[8] = {4, 12, 24, 24, 24, 24, 12, 4};
unsigned char pic[8] = {3, 0, 0, 0, 0, 0, 0, 0};
int main(void)
{
     8a8:	df 93       	push	r29
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
     8b0:	8a e2       	ldi	r24, 0x2A	; 42
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	2f ef       	ldi	r18, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	fc 01       	movw	r30, r24
     8c0:	10 82       	st	Z, r1
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
     8c2:	87 e2       	ldi	r24, 0x27	; 39
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
     8cc:	88 e2       	ldi	r24, 0x28	; 40
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	10 82       	st	Z, r1
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
     8d4:	81 e2       	ldi	r24, 0x21	; 33
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
     8dc:	82 e2       	ldi	r24, 0x22	; 34
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
     8e6:	84 e2       	ldi	r24, 0x24	; 36
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2f ef       	ldi	r18, 0xFF	; 255
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	85 e2       	ldi	r24, 0x25	; 37
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	10 82       	st	Z, r1
    
    //Initialize LCD and Matrix
    LCD_init();
     8f8:	fa dc       	rcall	.-1548   	; 0x2ee <LCD_init>
    
    Shift_Init();   
     8fa:	06 df       	rcall	.-500    	; 0x708 <Shift_Init>
    Shift_transmit_data(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	b4 df       	rcall	.-152    	; 0x868 <Shift_transmit_data>
    Shift_transmit_data(255);
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	b2 df       	rcall	.-156    	; 0x868 <Shift_transmit_data>
     904:	19 82       	std	Y+1, r1	; 0x01
    
    //Task Code
    unsigned char tasks_increment = 0;
     906:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LFT_INIT;
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	c9 01       	movw	r24, r18
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	88 59       	subi	r24, 0x98	; 152
     920:	9e 4f       	sbci	r25, 0xFE	; 254
     922:	fc 01       	movw	r30, r24
     924:	11 82       	std	Z+1, r1	; 0x01
     926:	10 82       	st	Z, r1
     928:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	c9 01       	movw	r24, r18
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	9c 01       	movw	r18, r24
     942:	26 59       	subi	r18, 0x96	; 150
     944:	3e 4f       	sbci	r19, 0xFE	; 254
     946:	8e e1       	ldi	r24, 0x1E	; 30
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e0       	ldi	r26, 0x00	; 0
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	80 83       	st	Z, r24
     952:	91 83       	std	Z+1, r25	; 0x01
     954:	a2 83       	std	Z+2, r26	; 0x02
     956:	b3 83       	std	Z+3, r27	; 0x03
     958:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     95a:	68 2f       	mov	r22, r24
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	c9 01       	movw	r24, r18
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	86 59       	subi	r24, 0x96	; 150
     978:	9e 4f       	sbci	r25, 0xFE	; 254
     97a:	fc 01       	movw	r30, r24
     97c:	20 81       	ld	r18, Z
     97e:	31 81       	ldd	r19, Z+1	; 0x01
     980:	42 81       	ldd	r20, Z+2	; 0x02
     982:	53 81       	ldd	r21, Z+3	; 0x03
     984:	cb 01       	movw	r24, r22
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	86 0f       	add	r24, r22
     98c:	97 1f       	adc	r25, r23
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	82 59       	subi	r24, 0x92	; 146
     998:	9e 4f       	sbci	r25, 0xFE	; 254
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	42 83       	std	Z+2, r20	; 0x02
     9a2:	53 83       	std	Z+3, r21	; 0x03
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Left_Tick;
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	c9 01       	movw	r24, r18
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	8e 58       	subi	r24, 0x8E	; 142
     9be:	9e 4f       	sbci	r25, 0xFE	; 254
     9c0:	2a ef       	ldi	r18, 0xFA	; 250
     9c2:	36 e0       	ldi	r19, 0x06	; 6
     9c4:	fc 01       	movw	r30, r24
     9c6:	31 83       	std	Z+1, r19	; 0x01
     9c8:	20 83       	st	Z, r18
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = RGHT_INIT;
     9d2:	28 2f       	mov	r18, r24
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	c9 01       	movw	r24, r18
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	82 0f       	add	r24, r18
     9de:	93 1f       	adc	r25, r19
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 59       	subi	r24, 0x98	; 152
     9ea:	9e 4f       	sbci	r25, 0xFE	; 254
     9ec:	fc 01       	movw	r30, r24
     9ee:	11 82       	std	Z+1, r1	; 0x01
     9f0:	10 82       	st	Z, r1
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     9f4:	28 2f       	mov	r18, r24
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	c9 01       	movw	r24, r18
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	9c 01       	movw	r18, r24
     a0c:	26 59       	subi	r18, 0x96	; 150
     a0e:	3e 4f       	sbci	r19, 0xFE	; 254
     a10:	8e e1       	ldi	r24, 0x1E	; 30
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	80 83       	st	Z, r24
     a1c:	91 83       	std	Z+1, r25	; 0x01
     a1e:	a2 83       	std	Z+2, r26	; 0x02
     a20:	b3 83       	std	Z+3, r27	; 0x03
     a22:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     a24:	68 2f       	mov	r22, r24
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	c9 01       	movw	r24, r18
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	86 59       	subi	r24, 0x96	; 150
     a42:	9e 4f       	sbci	r25, 0xFE	; 254
     a44:	fc 01       	movw	r30, r24
     a46:	20 81       	ld	r18, Z
     a48:	31 81       	ldd	r19, Z+1	; 0x01
     a4a:	42 81       	ldd	r20, Z+2	; 0x02
     a4c:	53 81       	ldd	r21, Z+3	; 0x03
     a4e:	cb 01       	movw	r24, r22
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	86 0f       	add	r24, r22
     a56:	97 1f       	adc	r25, r23
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	82 59       	subi	r24, 0x92	; 146
     a62:	9e 4f       	sbci	r25, 0xFE	; 254
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
     a68:	31 83       	std	Z+1, r19	; 0x01
     a6a:	42 83       	std	Z+2, r20	; 0x02
     a6c:	53 83       	std	Z+3, r21	; 0x03
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Right_Tick;
     a70:	28 2f       	mov	r18, r24
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	c9 01       	movw	r24, r18
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	82 0f       	add	r24, r18
     a7c:	93 1f       	adc	r25, r19
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	8e 58       	subi	r24, 0x8E	; 142
     a88:	9e 4f       	sbci	r25, 0xFE	; 254
     a8a:	21 e3       	ldi	r18, 0x31	; 49
     a8c:	37 e0       	ldi	r19, 0x07	; 7
     a8e:	fc 01       	movw	r30, r24
     a90:	31 83       	std	Z+1, r19	; 0x01
     a92:	20 83       	st	Z, r18
     a94:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
     a96:	8f 5f       	subi	r24, 0xFF	; 255
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = UP_INIT;
     a9c:	28 2f       	mov	r18, r24
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	c9 01       	movw	r24, r18
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	88 59       	subi	r24, 0x98	; 152
     ab4:	9e 4f       	sbci	r25, 0xFE	; 254
     ab6:	fc 01       	movw	r30, r24
     ab8:	11 82       	std	Z+1, r1	; 0x01
     aba:	10 82       	st	Z, r1
     abc:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     abe:	28 2f       	mov	r18, r24
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	c9 01       	movw	r24, r18
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	82 0f       	add	r24, r18
     aca:	93 1f       	adc	r25, r19
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	9c 01       	movw	r18, r24
     ad6:	26 59       	subi	r18, 0x96	; 150
     ad8:	3e 4f       	sbci	r19, 0xFE	; 254
     ada:	8e e1       	ldi	r24, 0x1E	; 30
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	80 83       	st	Z, r24
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	a2 83       	std	Z+2, r26	; 0x02
     aea:	b3 83       	std	Z+3, r27	; 0x03
     aec:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     aee:	68 2f       	mov	r22, r24
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	c9 01       	movw	r24, r18
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	86 59       	subi	r24, 0x96	; 150
     b0c:	9e 4f       	sbci	r25, 0xFE	; 254
     b0e:	fc 01       	movw	r30, r24
     b10:	20 81       	ld	r18, Z
     b12:	31 81       	ldd	r19, Z+1	; 0x01
     b14:	42 81       	ldd	r20, Z+2	; 0x02
     b16:	53 81       	ldd	r21, Z+3	; 0x03
     b18:	cb 01       	movw	r24, r22
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	86 0f       	add	r24, r22
     b20:	97 1f       	adc	r25, r23
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	82 59       	subi	r24, 0x92	; 146
     b2c:	9e 4f       	sbci	r25, 0xFE	; 254
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
     b32:	31 83       	std	Z+1, r19	; 0x01
     b34:	42 83       	std	Z+2, r20	; 0x02
     b36:	53 83       	std	Z+3, r21	; 0x03
     b38:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Up_Tick;
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	c9 01       	movw	r24, r18
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	82 0f       	add	r24, r18
     b46:	93 1f       	adc	r25, r19
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	8e 58       	subi	r24, 0x8E	; 142
     b52:	9e 4f       	sbci	r25, 0xFE	; 254
     b54:	28 e6       	ldi	r18, 0x68	; 104
     b56:	37 e0       	ldi	r19, 0x07	; 7
     b58:	fc 01       	movw	r30, r24
     b5a:	31 83       	std	Z+1, r19	; 0x01
     b5c:	20 83       	st	Z, r18
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = DOWN_INIT;
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	c9 01       	movw	r24, r18
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	82 0f       	add	r24, r18
     b72:	93 1f       	adc	r25, r19
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 59       	subi	r24, 0x98	; 152
     b7e:	9e 4f       	sbci	r25, 0xFE	; 254
     b80:	fc 01       	movw	r30, r24
     b82:	11 82       	std	Z+1, r1	; 0x01
     b84:	10 82       	st	Z, r1
     b86:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 30;
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	c9 01       	movw	r24, r18
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	82 0f       	add	r24, r18
     b94:	93 1f       	adc	r25, r19
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	9c 01       	movw	r18, r24
     ba0:	26 59       	subi	r18, 0x96	; 150
     ba2:	3e 4f       	sbci	r19, 0xFE	; 254
     ba4:	8e e1       	ldi	r24, 0x1E	; 30
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	f9 01       	movw	r30, r18
     bae:	80 83       	st	Z, r24
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	a2 83       	std	Z+2, r26	; 0x02
     bb4:	b3 83       	std	Z+3, r27	; 0x03
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     bb8:	68 2f       	mov	r22, r24
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	c9 01       	movw	r24, r18
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	86 59       	subi	r24, 0x96	; 150
     bd6:	9e 4f       	sbci	r25, 0xFE	; 254
     bd8:	fc 01       	movw	r30, r24
     bda:	20 81       	ld	r18, Z
     bdc:	31 81       	ldd	r19, Z+1	; 0x01
     bde:	42 81       	ldd	r20, Z+2	; 0x02
     be0:	53 81       	ldd	r21, Z+3	; 0x03
     be2:	cb 01       	movw	r24, r22
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	86 0f       	add	r24, r22
     bea:	97 1f       	adc	r25, r23
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	82 59       	subi	r24, 0x92	; 146
     bf6:	9e 4f       	sbci	r25, 0xFE	; 254
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	42 83       	std	Z+2, r20	; 0x02
     c00:	53 83       	std	Z+3, r21	; 0x03
     c02:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Down_Tick;
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	c9 01       	movw	r24, r18
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	8e 58       	subi	r24, 0x8E	; 142
     c1c:	9e 4f       	sbci	r25, 0xFE	; 254
     c1e:	2f e9       	ldi	r18, 0x9F	; 159
     c20:	37 e0       	ldi	r19, 0x07	; 7
     c22:	fc 01       	movw	r30, r24
     c24:	31 83       	std	Z+1, r19	; 0x01
     c26:	20 83       	st	Z, r18
     c28:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = RGB_INIT;
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	c9 01       	movw	r24, r18
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 59       	subi	r24, 0x98	; 152
     c48:	9e 4f       	sbci	r25, 0xFE	; 254
     c4a:	fc 01       	movw	r30, r24
     c4c:	11 82       	std	Z+1, r1	; 0x01
     c4e:	10 82       	st	Z, r1
     c50:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 10;
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	c9 01       	movw	r24, r18
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	82 0f       	add	r24, r18
     c5e:	93 1f       	adc	r25, r19
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	9c 01       	movw	r18, r24
     c6a:	26 59       	subi	r18, 0x96	; 150
     c6c:	3e 4f       	sbci	r19, 0xFE	; 254
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	80 83       	st	Z, r24
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	a2 83       	std	Z+2, r26	; 0x02
     c7e:	b3 83       	std	Z+3, r27	; 0x03
     c80:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     c82:	68 2f       	mov	r22, r24
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	c9 01       	movw	r24, r18
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	86 59       	subi	r24, 0x96	; 150
     ca0:	9e 4f       	sbci	r25, 0xFE	; 254
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 81       	ld	r18, Z
     ca6:	31 81       	ldd	r19, Z+1	; 0x01
     ca8:	42 81       	ldd	r20, Z+2	; 0x02
     caa:	53 81       	ldd	r21, Z+3	; 0x03
     cac:	cb 01       	movw	r24, r22
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	86 0f       	add	r24, r22
     cb4:	97 1f       	adc	r25, r23
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	82 59       	subi	r24, 0x92	; 146
     cc0:	9e 4f       	sbci	r25, 0xFE	; 254
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	42 83       	std	Z+2, r20	; 0x02
     cca:	53 83       	std	Z+3, r21	; 0x03
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	c9 01       	movw	r24, r18
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	8e 58       	subi	r24, 0x8E	; 142
     ce6:	9e 4f       	sbci	r25, 0xFE	; 254
     ce8:	23 ea       	ldi	r18, 0xA3	; 163
     cea:	38 e0       	ldi	r19, 0x08	; 8
     cec:	fc 01       	movw	r30, r24
     cee:	31 83       	std	Z+1, r19	; 0x01
     cf0:	20 83       	st	Z, r18
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LCD_Menu_Init;
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	c9 01       	movw	r24, r18
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	88 59       	subi	r24, 0x98	; 152
     d12:	9e 4f       	sbci	r25, 0xFE	; 254
     d14:	fc 01       	movw	r30, r24
     d16:	11 82       	std	Z+1, r1	; 0x01
     d18:	10 82       	st	Z, r1
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	c9 01       	movw	r24, r18
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	82 0f       	add	r24, r18
     d28:	93 1f       	adc	r25, r19
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	9c 01       	movw	r18, r24
     d34:	26 59       	subi	r18, 0x96	; 150
     d36:	3e 4f       	sbci	r19, 0xFE	; 254
     d38:	82 e3       	ldi	r24, 0x32	; 50
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	f9 01       	movw	r30, r18
     d42:	80 83       	st	Z, r24
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	a2 83       	std	Z+2, r26	; 0x02
     d48:	b3 83       	std	Z+3, r27	; 0x03
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
     d4c:	68 2f       	mov	r22, r24
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	c9 01       	movw	r24, r18
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	86 59       	subi	r24, 0x96	; 150
     d6a:	9e 4f       	sbci	r25, 0xFE	; 254
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 81       	ld	r18, Z
     d70:	31 81       	ldd	r19, Z+1	; 0x01
     d72:	42 81       	ldd	r20, Z+2	; 0x02
     d74:	53 81       	ldd	r21, Z+3	; 0x03
     d76:	cb 01       	movw	r24, r22
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	86 0f       	add	r24, r22
     d7e:	97 1f       	adc	r25, r23
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	82 59       	subi	r24, 0x92	; 146
     d8a:	9e 4f       	sbci	r25, 0xFE	; 254
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	31 83       	std	Z+1, r19	; 0x01
     d92:	42 83       	std	Z+2, r20	; 0x02
     d94:	53 83       	std	Z+3, r21	; 0x03
     d96:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	c9 01       	movw	r24, r18
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	8e 58       	subi	r24, 0x8E	; 142
     db0:	9e 4f       	sbci	r25, 0xFE	; 254
     db2:	26 ed       	ldi	r18, 0xD6	; 214
     db4:	37 e0       	ldi	r19, 0x07	; 7
     db6:	fc 01       	movw	r30, r24
     db8:	31 83       	std	Z+1, r19	; 0x01
     dba:	20 83       	st	Z, r18
     dbc:	85 e0       	ldi	r24, 0x05	; 5
    
    //Timer
    TimerSet(tasksPeriodGCD);
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	e8 da       	rcall	.-2608   	; 0x39a <TimerSet>
    TimerOn();
     dca:	15 db       	rcall	.-2518   	; 0x3f6 <TimerOn>
     dcc:	83 e5       	ldi	r24, 0x53	; 83
    
    
    while (1) 
    {
        sleep_mode();
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	23 e5       	ldi	r18, 0x53	; 83
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	f9 01       	movw	r30, r18
     dd6:	20 81       	ld	r18, Z
     dd8:	21 60       	ori	r18, 0x01	; 1
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
     dde:	88 95       	sleep
     de0:	83 e5       	ldi	r24, 0x53	; 83
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	23 e5       	ldi	r18, 0x53	; 83
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	f9 01       	movw	r30, r18
     dea:	20 81       	ld	r18, Z
     dec:	2e 7f       	andi	r18, 0xFE	; 254
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
     df2:	ec cf       	rjmp	.-40     	; 0xdcc <main+0x526>

00000df4 <Left_Tick>:
    }        
     df4:	cf 93       	push	r28
    return 0;
}

int Left_Tick(int state){
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <Left_Tick+0x6>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	19 f0       	breq	.+6      	; 0xe10 <Left_Tick+0x1c>
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	31 f0       	breq	.+12     	; 0xe1a <Left_Tick+0x26>
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <Left_Tick+0x30>
        case LFT_INIT:
            state = LFT_WAIT;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
            break;
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <Left_Tick+0x30>
        case LFT_WAIT:
            state = LFT_WAIT;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
            break;
     e22:	00 00       	nop
    }
    switch(state){
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	99 f0       	breq	.+38     	; 0xe52 <Left_Tick+0x5e>
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	91 f4       	brne	.+36     	; 0xe54 <Left_Tick+0x60>
        case LFT_INIT:
            break;
        case LFT_WAIT:
            if(LEFT_BUTTON == 0x00){
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	fc 01       	movw	r30, r24
     e36:	80 81       	ld	r24, Z
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	88 70       	andi	r24, 0x08	; 8
     e3e:	99 27       	eor	r25, r25
     e40:	89 2b       	or	r24, r25
     e42:	21 f4       	brne	.+8      	; 0xe4c <Left_Tick+0x58>
                LEFT = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <LEFT>
                break;
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <Left_Tick+0x60>
            }
            else{
                LEFT = false;
     e4c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <LEFT>
                break;
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <Left_Tick+0x60>
            state = LFT_WAIT;
            break;
    }
    switch(state){
        case LFT_INIT:
            break;
     e52:	00 00       	nop
                LEFT = false;
                break;
            }
    }
    
    return state;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <Right_Tick>:

int Right_Tick(int state){
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	00 d0       	rcall	.+0      	; 0xe68 <Right_Tick+0x6>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	19 f0       	breq	.+6      	; 0xe7e <Right_Tick+0x1c>
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	31 f0       	breq	.+12     	; 0xe88 <Right_Tick+0x26>
     e7c:	0a c0       	rjmp	.+20     	; 0xe92 <Right_Tick+0x30>
        case RGHT_INIT:
            state = RGHT_WAIT;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
            break;
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <Right_Tick+0x30>
        case RGHT_WAIT:
            state = RGHT_WAIT;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
            break;
     e90:	00 00       	nop
    }
    switch(state){
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	99 f0       	breq	.+38     	; 0xec0 <Right_Tick+0x5e>
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	91 f4       	brne	.+36     	; 0xec2 <Right_Tick+0x60>
        case RGHT_INIT:
            break;
        case RGHT_WAIT:
            if(RIGHT_BUTTON == 0x00){
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	81 70       	andi	r24, 0x01	; 1
     eac:	99 27       	eor	r25, r25
     eae:	89 2b       	or	r24, r25
     eb0:	21 f4       	brne	.+8      	; 0xeba <Right_Tick+0x58>
                RIGHT = true;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <RIGHT>
                break;
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <Right_Tick+0x60>
            }
            else{
                RIGHT = false;
     eba:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <RIGHT>
                break;
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <Right_Tick+0x60>
            state = RGHT_WAIT;
            break;
    }
    switch(state){
        case RGHT_INIT:
            break;
     ec0:	00 00       	nop
                RIGHT = false;
                break;
            }
    }
    
    return state;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <Up_Tick>:

int Up_Tick(int state){
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <Up_Tick+0x6>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	19 f0       	breq	.+6      	; 0xeec <Up_Tick+0x1c>
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	31 f0       	breq	.+12     	; 0xef6 <Up_Tick+0x26>
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <Up_Tick+0x30>
        case UP_INIT:
            state = UP_WAIT;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
            break;
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <Up_Tick+0x30>
        case UP_WAIT:
            state = UP_WAIT;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
            break;
     efe:	00 00       	nop
    }
    switch(state){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	99 f0       	breq	.+38     	; 0xf2e <Up_Tick+0x5e>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	91 f4       	brne	.+36     	; 0xf30 <Up_Tick+0x60>
        case UP_INIT:
            break;
        case UP_WAIT:
            if(UP_BUTTON == 0x00){
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	80 81       	ld	r24, Z
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	82 70       	andi	r24, 0x02	; 2
     f1a:	99 27       	eor	r25, r25
     f1c:	89 2b       	or	r24, r25
     f1e:	21 f4       	brne	.+8      	; 0xf28 <Up_Tick+0x58>
                UP = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <UP>
                break;
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <Up_Tick+0x60>
            }
            else{
                UP = false;
     f28:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <UP>
                break;
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <Up_Tick+0x60>
            state = UP_WAIT;
            break;
    }
    switch(state){
        case UP_INIT:
            break;
     f2e:	00 00       	nop
                UP = false;
                break;
            }
    }
    
    return state;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <Down_Tick>:

int Down_Tick(int state){
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 d0       	rcall	.+0      	; 0xf44 <Down_Tick+0x6>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	19 f0       	breq	.+6      	; 0xf5a <Down_Tick+0x1c>
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	31 f0       	breq	.+12     	; 0xf64 <Down_Tick+0x26>
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <Down_Tick+0x30>
        case DOWN_INIT:
            state = DOWN_WAIT;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
            break;
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <Down_Tick+0x30>
        case DOWN_WAIT:
            state = DOWN_WAIT;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
            break;
     f6c:	00 00       	nop
    }
    switch(state){
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	99 f0       	breq	.+38     	; 0xf9c <Down_Tick+0x5e>
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	91 f4       	brne	.+36     	; 0xf9e <Down_Tick+0x60>
        case DOWN_INIT:
            break;
        case DOWN_WAIT:
            if(DOWN_BUTTON == 0x00){
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	84 70       	andi	r24, 0x04	; 4
     f88:	99 27       	eor	r25, r25
     f8a:	89 2b       	or	r24, r25
     f8c:	21 f4       	brne	.+8      	; 0xf96 <Down_Tick+0x58>
                DOWN = true;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <DOWN>
                break;
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <Down_Tick+0x60>
            }
            else{
                DOWN = false;
     f96:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <DOWN>
                break;
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <Down_Tick+0x60>
            state = DOWN_WAIT;
            break;
    }
    switch(state){
        case DOWN_INIT:
            break;
     f9c:	00 00       	nop
                DOWN = false;
                break;
            }
    }
    
    return state;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <LCD_Menu_Tick>:

int LCD_Menu_Tick(int state){
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <LCD_Menu_Tick+0x6>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
    static unsigned char current_song_choice = 0;
    switch(state){ //transitions
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	59 f0       	breq	.+22     	; 0xfda <LCD_Menu_Tick+0x2e>
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	91 05       	cpc	r25, r1
     fc8:	29 f1       	breq	.+74     	; 0x1014 <LCD_Menu_Tick+0x68>
     fca:	89 2b       	or	r24, r25
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <LCD_Menu_Tick+0x24>
     fce:	8a c0       	rjmp	.+276    	; 0x10e4 <LCD_Menu_Tick+0x138>
        case LCD_Menu_Init:
            state = LCD_Menu_Start;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
            break;
     fd8:	85 c0       	rjmp	.+266    	; 0x10e4 <LCD_Menu_Tick+0x138>
        case LCD_Menu_Start:
            if(LEFT && RIGHT && DOWN && UP){
     fda:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <LEFT>
     fde:	88 23       	and	r24, r24
     fe0:	a1 f0       	breq	.+40     	; 0x100a <LCD_Menu_Tick+0x5e>
     fe2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <RIGHT>
     fe6:	88 23       	and	r24, r24
     fe8:	81 f0       	breq	.+32     	; 0x100a <LCD_Menu_Tick+0x5e>
     fea:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DOWN>
     fee:	88 23       	and	r24, r24
     ff0:	61 f0       	breq	.+24     	; 0x100a <LCD_Menu_Tick+0x5e>
     ff2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <UP>
     ff6:	88 23       	and	r24, r24
     ff8:	41 f0       	breq	.+16     	; 0x100a <LCD_Menu_Tick+0x5e>
                LCD_ClearScreen();
     ffa:	67 d8       	rcall	.-3890   	; 0xca <LCD_ClearScreen>
                current_song_choice = 0;
     ffc:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <current_song_choice.2200>
                state = LCD_Menu_Songs;
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
                break;
    1008:	6d c0       	rjmp	.+218    	; 0x10e4 <LCD_Menu_Tick+0x138>
            }
            else{
                state = LCD_Menu_Start;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
                break;
    1012:	68 c0       	rjmp	.+208    	; 0x10e4 <LCD_Menu_Tick+0x138>
            }
        case LCD_Menu_Songs:
            if(LEFT && !RIGHT && !UP && !DOWN){
    1014:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <LEFT>
    1018:	88 23       	and	r24, r24
    101a:	c1 f0       	breq	.+48     	; 0x104c <LCD_Menu_Tick+0xa0>
    101c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <RIGHT>
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 27       	eor	r24, r25
    1024:	88 23       	and	r24, r24
    1026:	91 f0       	breq	.+36     	; 0x104c <LCD_Menu_Tick+0xa0>
    1028:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UP>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 27       	eor	r24, r25
    1030:	88 23       	and	r24, r24
    1032:	61 f0       	breq	.+24     	; 0x104c <LCD_Menu_Tick+0xa0>
    1034:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <DOWN>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 27       	eor	r24, r25
    103c:	88 23       	and	r24, r24
                LCD_ClearScreen();
    103e:	31 f0       	breq	.+12     	; 0x104c <LCD_Menu_Tick+0xa0>
    1040:	44 d8       	rcall	.-3960   	; 0xca <LCD_ClearScreen>
                state = LCD_Menu_Start;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
                break;
    104a:	4c c0       	rjmp	.+152    	; 0x10e4 <LCD_Menu_Tick+0x138>
            }
            else if(DOWN && !UP && !LEFT && !RIGHT){
    104c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DOWN>
    1050:	88 23       	and	r24, r24
    1052:	01 f1       	breq	.+64     	; 0x1094 <LCD_Menu_Tick+0xe8>
    1054:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UP>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 27       	eor	r24, r25
    105c:	88 23       	and	r24, r24
    105e:	d1 f0       	breq	.+52     	; 0x1094 <LCD_Menu_Tick+0xe8>
    1060:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <LEFT>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 27       	eor	r24, r25
    1068:	88 23       	and	r24, r24
    106a:	a1 f0       	breq	.+40     	; 0x1094 <LCD_Menu_Tick+0xe8>
    106c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <RIGHT>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 27       	eor	r24, r25
    1074:	88 23       	and	r24, r24
    1076:	71 f0       	breq	.+28     	; 0x1094 <LCD_Menu_Tick+0xe8>
                if(current_song_choice){
    1078:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <current_song_choice.2200>
    107c:	88 23       	and	r24, r24
    107e:	21 f0       	breq	.+8      	; 0x1088 <LCD_Menu_Tick+0xdc>
                    current_song_choice = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <current_song_choice.2200>
                }
                else{
                    current_song_choice += 1;
                }
                break;
    1086:	2e c0       	rjmp	.+92     	; 0x10e4 <LCD_Menu_Tick+0x138>
            else if(DOWN && !UP && !LEFT && !RIGHT){
                if(current_song_choice){
                    current_song_choice = 1;
                }
                else{
                    current_song_choice += 1;
    1088:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <current_song_choice.2200>
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <current_song_choice.2200>
                }
                break;
    1092:	28 c0       	rjmp	.+80     	; 0x10e4 <LCD_Menu_Tick+0x138>
            }
            else if(!DOWN && UP && !LEFT && !RIGHT){
    1094:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <DOWN>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 27       	eor	r24, r25
    109c:	88 23       	and	r24, r24
    109e:	e9 f0       	breq	.+58     	; 0x10da <LCD_Menu_Tick+0x12e>
    10a0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <UP>
    10a4:	88 23       	and	r24, r24
    10a6:	c9 f0       	breq	.+50     	; 0x10da <LCD_Menu_Tick+0x12e>
    10a8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <LEFT>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	89 27       	eor	r24, r25
    10b0:	88 23       	and	r24, r24
    10b2:	99 f0       	breq	.+38     	; 0x10da <LCD_Menu_Tick+0x12e>
    10b4:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <RIGHT>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	89 27       	eor	r24, r25
    10bc:	88 23       	and	r24, r24
    10be:	69 f0       	breq	.+26     	; 0x10da <LCD_Menu_Tick+0x12e>
                if(!current_song_choice){
    10c0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <current_song_choice.2200>
    10c4:	88 23       	and	r24, r24
    10c6:	19 f4       	brne	.+6      	; 0x10ce <LCD_Menu_Tick+0x122>
                    current_song_choice = 0;
    10c8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <current_song_choice.2200>
                }
                else{
                current_song_choice -= 1;
                
                }            
                break;
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <LCD_Menu_Tick+0x138>
            else if(!DOWN && UP && !LEFT && !RIGHT){
                if(!current_song_choice){
                    current_song_choice = 0;
                }
                else{
                current_song_choice -= 1;
    10ce:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <current_song_choice.2200>
    10d2:	81 50       	subi	r24, 0x01	; 1
    10d4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <current_song_choice.2200>
                
                }            
                break;
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <LCD_Menu_Tick+0x138>
            }
            else{
                state = LCD_Menu_Songs;
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
                break;
    10e2:	00 00       	nop
            }               
    }
    switch(state){ //actions
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <LCD_Menu_Tick+0x148>
    10ee:	02 97       	sbiw	r24, 0x02	; 2
        case LCD_Menu_Init:
            break;
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <LCD_Menu_Tick+0x14c>
        case LCD_Menu_Start:
            LCD_Game_Menu();
    10f2:	22 c0       	rjmp	.+68     	; 0x1138 <LCD_Menu_Tick+0x18c>
    10f4:	2a d9       	rcall	.-3500   	; 0x34a <LCD_Game_Menu>
            break;
    10f6:	20 c0       	rjmp	.+64     	; 0x1138 <LCD_Menu_Tick+0x18c>
        case LCD_Menu_Songs:
            if(current_song_choice){
    10f8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <current_song_choice.2200>
    10fc:	88 23       	and	r24, r24
                LCD_Cursor(1);
    10fe:	39 f0       	breq	.+14     	; 0x110e <LCD_Menu_Tick+0x162>
    1100:	81 e0       	ldi	r24, 0x01	; 1
                LCD_WriteData(' ');
    1102:	80 d8       	rcall	.-3840   	; 0x204 <LCD_Cursor>
    1104:	80 e2       	ldi	r24, 0x20	; 32
                LCD_Cursor(17);
    1106:	1a d8       	rcall	.-4044   	; 0x13c <LCD_WriteData>
    1108:	81 e1       	ldi	r24, 0x11	; 17
            }
            else{
                LCD_Cursor(17);
    110a:	7c d8       	rcall	.-3848   	; 0x204 <LCD_Cursor>
                LCD_WriteData(' ');
    110c:	06 c0       	rjmp	.+12     	; 0x111a <LCD_Menu_Tick+0x16e>
    110e:	81 e1       	ldi	r24, 0x11	; 17
    1110:	79 d8       	rcall	.-3854   	; 0x204 <LCD_Cursor>
                LCD_Cursor(1);
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	13 d8       	rcall	.-4058   	; 0x13c <LCD_WriteData>
            }
            LCD_WriteData(0xA5);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	75 d8       	rcall	.-3862   	; 0x204 <LCD_Cursor>
    111a:	85 ea       	ldi	r24, 0xA5	; 165
            LCD_Write_Single_Line(2,1, "ZEN ZEN ZENSE");
    111c:	0f d8       	rcall	.-4066   	; 0x13c <LCD_WriteData>
    111e:	4d e4       	ldi	r20, 0x4D	; 77
    1120:	51 e0       	ldi	r21, 0x01	; 1
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	82 e0       	ldi	r24, 0x02	; 2
            LCD_Write_Single_Line(2,2, "NO");
    1128:	38 d8       	rcall	.-3984   	; 0x19a <LCD_Write_Single_Line>
    112a:	4b e5       	ldi	r20, 0x5B	; 91
    112c:	51 e0       	ldi	r21, 0x01	; 1
    112e:	62 e0       	ldi	r22, 0x02	; 2
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	32 d8       	rcall	.-3996   	; 0x19a <LCD_Write_Single_Line>
            break;
    1136:	00 00       	nop
        
        
    }

    return state;
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <RGB_Matrix_Tick>:

int RGB_Matrix_Tick(int state){
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <RGB_Matrix_Tick+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <RGB_Matrix_Tick+0x8>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
    switch(state){
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	19 f0       	breq	.+6      	; 0x1164 <RGB_Matrix_Tick+0x1e>
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	31 f0       	breq	.+12     	; 0x116e <RGB_Matrix_Tick+0x28>
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <RGB_Matrix_Tick+0x32>
        case RGB_INIT:
            state = RGB_MENU;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	8b 83       	std	Y+3, r24	; 0x03
            break;
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <RGB_Matrix_Tick+0x32>
        case RGB_MENU:
            state = RGB_MENU;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
            break;
    1176:	00 00       	nop
    }
    switch(state){
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	c9 f1       	breq	.+114    	; 0x11f2 <RGB_Matrix_Tick+0xac>
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	c1 f5       	brne	.+112    	; 0x11f4 <RGB_Matrix_Tick+0xae>
                }
            }
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            */
            for(unsigned char i = 0; i < 8; i++){
    1184:	19 82       	std	Y+1, r1	; 0x01
    1186:	1a c0       	rjmp	.+52     	; 0x11bc <RGB_Matrix_Tick+0x76>
                Shift_transmit_data(128 >> i);
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <RGB_Matrix_Tick+0x52>
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	2a 95       	dec	r18
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <RGB_Matrix_Tick+0x4e>
    119c:	65 db       	rcall	.-2358   	; 0x868 <Shift_transmit_data>
                Shift_transmit_data(~pic[i]);
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	8c 5c       	subi	r24, 0xCC	; 204
    11a6:	9e 4f       	sbci	r25, 0xFE	; 254
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	80 95       	com	r24
    11ae:	5c db       	rcall	.-2376   	; 0x868 <Shift_transmit_data>
                delay_ms(5);
    11b0:	85 e0       	ldi	r24, 0x05	; 5
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	3c d8       	rcall	.-3976   	; 0x22e <delay_ms>
                }
            }
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            */
            for(unsigned char i = 0; i < 8; i++){
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	18 f3       	brcs	.-58     	; 0x1188 <RGB_Matrix_Tick+0x42>
                Shift_transmit_data(128 >> i);
                Shift_transmit_data(~pic[i]);
                delay_ms(5);
            }
            for(unsigned char k = 0; k < 8; k++){
    11c2:	1a 82       	std	Y+2, r1	; 0x02
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <RGB_Matrix_Tick+0xa4>
                pic[k] <<= 1;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	22 2f       	mov	r18, r18
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	2c 5c       	subi	r18, 0xCC	; 204
    11d4:	3e 4f       	sbci	r19, 0xFE	; 254
    11d6:	f9 01       	movw	r30, r18
    11d8:	20 81       	ld	r18, Z
    11da:	22 0f       	add	r18, r18
    11dc:	8c 5c       	subi	r24, 0xCC	; 204
    11de:	9e 4f       	sbci	r25, 0xFE	; 254
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
                Shift_transmit_data(~pic[i]);
                delay_ms(5);
            }
            for(unsigned char k = 0; k < 8; k++){
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	58 f3       	brcs	.-42     	; 0x11c6 <RGB_Matrix_Tick+0x80>
                pic[k] <<= 1;
            }
            break;
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <RGB_Matrix_Tick+0xae>
            state = RGB_MENU;
            break;
    }
    switch(state){
        case RGB_INIT:
            break;
    11f2:	00 00       	nop
                pic[k] <<= 1;
            }
            break;
    }
    
    return state;
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <_exit>:
    1206:	f8 94       	cli

00001208 <__stop_program>:
    1208:	ff cf       	rjmp	.-2      	; 0x1208 <__stop_program>
