
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000f8a  0000101e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800156  00800156  00001074  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f96  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095c  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2d  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093f  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d2 c2       	rjmp	.+1444   	; 0x5da <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 35       	cpi	r26, 0x56	; 86
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 39       	cpi	r26, 0x9B	; 155
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ee d3       	rcall	.+2012   	; 0x8a0 <main>
  c4:	60 c7       	rjmp	.+3776   	; 0xf86 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	04 d0       	rcall	.+8      	; 0xdc <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_WriteCommand>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	25 e2       	ldi	r18, 0x25	; 37
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	2e 7f       	andi	r18, 0xFE	; 254
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	25 e2       	ldi	r18, 0x25	; 37
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	22 60       	ori	r18, 0x02	; 2
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	00 00       	nop
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	25 e2       	ldi	r18, 0x25	; 37
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	2d 7f       	andi	r18, 0xFD	; 253
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	7e d0       	rcall	.+252    	; 0x22c <delay_ms>
 130:	00 00       	nop
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <LCD_WriteData>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	25 e2       	ldi	r18, 0x25	; 37
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	21 60       	ori	r18, 0x01	; 1
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
 158:	8b e2       	ldi	r24, 0x2B	; 43
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	25 e2       	ldi	r18, 0x25	; 37
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	22 60       	ori	r18, 0x02	; 2
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	00 00       	nop
 176:	85 e2       	ldi	r24, 0x25	; 37
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	25 e2       	ldi	r18, 0x25	; 37
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	2d 7f       	andi	r18, 0xFD	; 253
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	4f d0       	rcall	.+158    	; 0x22c <delay_ms>
 18e:	00 00       	nop
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD_Write_Single_Line>:
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <LCD_Write_Single_Line+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <LCD_Write_Single_Line+0x8>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <LCD_Write_Single_Line+0xa>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	8a 83       	std	Y+2, r24	; 0x02
 1a8:	7c 83       	std	Y+4, r23	; 0x04
 1aa:	6b 83       	std	Y+3, r22	; 0x03
 1ac:	5e 83       	std	Y+6, r21	; 0x06
 1ae:	4d 83       	std	Y+5, r20	; 0x05
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	02 97       	sbiw	r24, 0x02	; 2
 1ba:	99 f4       	brne	.+38     	; 0x1e2 <LCD_Write_Single_Line+0x4a>
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	80 5f       	subi	r24, 0xF0	; 240
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <LCD_Write_Single_Line+0x4a>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	98 0f       	add	r25, r24
 1ca:	99 83       	std	Y+1, r25	; 0x01
 1cc:	1a d0       	rcall	.+52     	; 0x202 <LCD_Cursor>
 1ce:	8d 81       	ldd	r24, Y+5	; 0x05
 1d0:	9e 81       	ldd	r25, Y+6	; 0x06
 1d2:	9c 01       	movw	r18, r24
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	3e 83       	std	Y+6, r19	; 0x06
 1da:	2d 83       	std	Y+5, r18	; 0x05
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	ac df       	rcall	.-168    	; 0x13a <LCD_WriteData>
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	9e 81       	ldd	r25, Y+6	; 0x06
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	59 f7       	brne	.-42     	; 0x1c4 <LCD_Write_Single_Line+0x2c>
 1ee:	00 00       	nop
 1f0:	26 96       	adiw	r28, 0x06	; 6
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <LCD_Cursor>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	81 31       	cpi	r24, 0x11	; 17
 212:	20 f4       	brcc	.+8      	; 0x21c <LCD_Cursor+0x1a>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	81 58       	subi	r24, 0x81	; 129
 218:	61 df       	rcall	.-318    	; 0xdc <LCD_WriteCommand>
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_Cursor+0x20>
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	81 55       	subi	r24, 0x51	; 81
 220:	5d df       	rcall	.-326    	; 0xdc <LCD_WriteCommand>
 222:	00 00       	nop
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <delay_ms>:
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <delay_ms+0x6>
 232:	00 d0       	rcall	.+0      	; 0x234 <delay_ms+0x8>
 234:	00 d0       	rcall	.+0      	; 0x236 <delay_ms+0xa>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	9e 83       	std	Y+6, r25	; 0x06
 23c:	8d 83       	std	Y+5, r24	; 0x05
 23e:	1a 82       	std	Y+2, r1	; 0x02
 240:	19 82       	std	Y+1, r1	; 0x01
 242:	13 c0       	rjmp	.+38     	; 0x26a <delay_ms+0x3e>
 244:	1c 82       	std	Y+4, r1	; 0x04
 246:	1b 82       	std	Y+3, r1	; 0x03
 248:	06 c0       	rjmp	.+12     	; 0x256 <delay_ms+0x2a>
 24a:	00 00       	nop
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	9c 83       	std	Y+4, r25	; 0x04
 254:	8b 83       	std	Y+3, r24	; 0x03
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	87 30       	cpi	r24, 0x07	; 7
 25c:	93 40       	sbci	r25, 0x03	; 3
 25e:	ac f3       	brlt	.-22     	; 0x24a <delay_ms+0x1e>
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	3a 81       	ldd	r19, Y+2	; 0x02
 26e:	8d 81       	ldd	r24, Y+5	; 0x05
 270:	9e 81       	ldd	r25, Y+6	; 0x06
 272:	28 17       	cp	r18, r24
 274:	39 07       	cpc	r19, r25
 276:	34 f3       	brlt	.-52     	; 0x244 <delay_ms+0x18>
 278:	00 00       	nop
 27a:	26 96       	adiw	r28, 0x06	; 6
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_Custom_Character>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	00 d0       	rcall	.+0      	; 0x292 <LCD_Custom_Character+0x6>
 292:	00 d0       	rcall	.+0      	; 0x294 <LCD_Custom_Character+0x8>
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	8a 83       	std	Y+2, r24	; 0x02
 29a:	7c 83       	std	Y+4, r23	; 0x04
 29c:	6b 83       	std	Y+3, r22	; 0x03
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	d0 f4       	brcc	.+52     	; 0x2d8 <LCD_Custom_Character+0x4c>
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 96       	adiw	r24, 0x08	; 8
 2ac:	88 0f       	add	r24, r24
 2ae:	88 0f       	add	r24, r24
 2b0:	88 0f       	add	r24, r24
 2b2:	14 df       	rcall	.-472    	; 0xdc <LCD_WriteCommand>
 2b4:	19 82       	std	Y+1, r1	; 0x01
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <LCD_Custom_Character+0x46>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	88 2f       	mov	r24, r24
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	2b 81       	ldd	r18, Y+3	; 0x03
 2c0:	3c 81       	ldd	r19, Y+4	; 0x04
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	37 df       	rcall	.-402    	; 0x13a <LCD_WriteData>
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	80 f3       	brcs	.-32     	; 0x2b8 <LCD_Custom_Character+0x2c>
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	00 df       	rcall	.-512    	; 0xdc <LCD_WriteCommand>
 2dc:	00 00       	nop
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <LCD_init>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	84 e6       	ldi	r24, 0x64	; 100
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	99 df       	rcall	.-206    	; 0x22c <delay_ms>
 2fa:	88 e3       	ldi	r24, 0x38	; 56
 2fc:	ef de       	rcall	.-546    	; 0xdc <LCD_WriteCommand>
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	ed de       	rcall	.-550    	; 0xdc <LCD_WriteCommand>
 302:	8f e0       	ldi	r24, 0x0F	; 15
 304:	eb de       	rcall	.-554    	; 0xdc <LCD_WriteCommand>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	e9 de       	rcall	.-558    	; 0xdc <LCD_WriteCommand>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	8e df       	rcall	.-228    	; 0x22c <delay_ms>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	71 e0       	ldi	r23, 0x01	; 1
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	ba df       	rcall	.-140    	; 0x28c <LCD_Custom_Character>
 318:	68 e0       	ldi	r22, 0x08	; 8
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	b6 df       	rcall	.-148    	; 0x28c <LCD_Custom_Character>
 320:	60 e1       	ldi	r22, 0x10	; 16
 322:	71 e0       	ldi	r23, 0x01	; 1
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	b2 df       	rcall	.-156    	; 0x28c <LCD_Custom_Character>
 328:	68 e1       	ldi	r22, 0x18	; 24
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	ae df       	rcall	.-164    	; 0x28c <LCD_Custom_Character>
 330:	60 e2       	ldi	r22, 0x20	; 32
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	aa df       	rcall	.-172    	; 0x28c <LCD_Custom_Character>
 338:	68 e2       	ldi	r22, 0x28	; 40
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	a6 df       	rcall	.-180    	; 0x28c <LCD_Custom_Character>
 340:	00 00       	nop
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <LCD_Game_Menu>:
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	c4 de       	rcall	.-632    	; 0xdc <LCD_WriteCommand>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	55 df       	rcall	.-342    	; 0x202 <LCD_Cursor>
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	ef de       	rcall	.-546    	; 0x13a <LCD_WriteData>
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	51 df       	rcall	.-350    	; 0x202 <LCD_Cursor>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	eb de       	rcall	.-554    	; 0x13a <LCD_WriteData>
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	e9 de       	rcall	.-558    	; 0x13a <LCD_WriteData>
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	e7 de       	rcall	.-562    	; 0x13a <LCD_WriteData>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	e5 de       	rcall	.-566    	; 0x13a <LCD_WriteData>
 370:	80 e1       	ldi	r24, 0x10	; 16
 372:	47 df       	rcall	.-370    	; 0x202 <LCD_Cursor>
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	e1 de       	rcall	.-574    	; 0x13a <LCD_WriteData>
 378:	44 e3       	ldi	r20, 0x34	; 52
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0a df       	rcall	.-492    	; 0x198 <LCD_Write_Single_Line>
 384:	87 e1       	ldi	r24, 0x17	; 23
 386:	3d df       	rcall	.-390    	; 0x202 <LCD_Cursor>
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	d7 de       	rcall	.-594    	; 0x13a <LCD_WriteData>
 38c:	00 00       	nop
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <TimerSet>:
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	00 d0       	rcall	.+0      	; 0x39a <TimerSet+0x6>
 39a:	00 d0       	rcall	.+0      	; 0x39c <TimerSet+0x8>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	69 83       	std	Y+1, r22	; 0x01
 3a2:	7a 83       	std	Y+2, r23	; 0x02
 3a4:	8b 83       	std	Y+3, r24	; 0x03
 3a6:	9c 83       	std	Y+4, r25	; 0x04
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	ab 81       	ldd	r26, Y+3	; 0x03
 3ae:	bc 81       	ldd	r27, Y+4	; 0x04
 3b0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_M>
 3b4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_M+0x1>
 3b8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_M+0x2>
 3bc:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_M+0x3>
 3c0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
 3c4:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
 3c8:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
 3cc:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
 3d0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 3d4:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 3d8:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 3dc:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
 3e0:	00 00       	nop
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <TimerOn>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	81 e8       	ldi	r24, 0x81	; 129
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	2b e0       	ldi	r18, 0x0B	; 11
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	88 e8       	ldi	r24, 0x88	; 136
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	2d e7       	ldi	r18, 0x7D	; 125
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	31 83       	std	Z+1, r19	; 0x01
 40e:	20 83       	st	Z, r18
 410:	8f e6       	ldi	r24, 0x6F	; 111
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	22 e0       	ldi	r18, 0x02	; 2
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
 41a:	84 e8       	ldi	r24, 0x84	; 132
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	11 82       	std	Z+1, r1	; 0x01
 422:	10 82       	st	Z, r1
 424:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
 428:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
 42c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
 430:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
 434:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 438:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 43c:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 440:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
 444:	8f e5       	ldi	r24, 0x5F	; 95
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	2f e5       	ldi	r18, 0x5F	; 95
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	f9 01       	movw	r30, r18
 44e:	20 81       	ld	r18, Z
 450:	20 68       	ori	r18, 0x80	; 128
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
 456:	00 00       	nop
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <TimerISR>:

void TimerISR() {
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	1f 92       	push	r1
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 472:	19 82       	std	Y+1, r1	; 0x01
 474:	a6 c0       	rjmp	.+332    	; 0x5c2 <TimerISR+0x164>
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	c9 01       	movw	r24, r18
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	8b 59       	subi	r24, 0x9B	; 155
 490:	9e 4f       	sbci	r25, 0xFE	; 254
 492:	fc 01       	movw	r30, r24
 494:	20 81       	ld	r18, Z
 496:	31 81       	ldd	r19, Z+1	; 0x01
 498:	42 81       	ldd	r20, Z+2	; 0x02
 49a:	53 81       	ldd	r21, Z+3	; 0x03
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	68 2f       	mov	r22, r24
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	cb 01       	movw	r24, r22
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	86 0f       	add	r24, r22
 4aa:	97 1f       	adc	r25, r23
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	8f 59       	subi	r24, 0x9F	; 159
 4b6:	9e 4f       	sbci	r25, 0xFE	; 254
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
 4be:	a2 81       	ldd	r26, Z+2	; 0x02
 4c0:	b3 81       	ldd	r27, Z+3	; 0x03
 4c2:	28 17       	cp	r18, r24
 4c4:	39 07       	cpc	r19, r25
 4c6:	4a 07       	cpc	r20, r26
 4c8:	5b 07       	cpc	r21, r27
 4ca:	08 f4       	brcc	.+2      	; 0x4ce <TimerISR+0x70>
 4cc:	49 c0       	rjmp	.+146    	; 0x560 <TimerISR+0x102>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	08 2f       	mov	r16, r24
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	c9 01       	movw	r24, r18
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	82 0f       	add	r24, r18
 4e2:	93 1f       	adc	r25, r19
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	87 59       	subi	r24, 0x97	; 151
 4ee:	9e 4f       	sbci	r25, 0xFE	; 254
 4f0:	fc 01       	movw	r30, r24
 4f2:	40 81       	ld	r20, Z
 4f4:	51 81       	ldd	r21, Z+1	; 0x01
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	c9 01       	movw	r24, r18
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	81 5a       	subi	r24, 0xA1	; 161
 510:	9e 4f       	sbci	r25, 0xFE	; 254
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	91 81       	ldd	r25, Z+1	; 0x01
 518:	fa 01       	movw	r30, r20
 51a:	09 95       	icall
 51c:	9c 01       	movw	r18, r24
 51e:	c8 01       	movw	r24, r16
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	80 0f       	add	r24, r16
 526:	91 1f       	adc	r25, r17
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	81 5a       	subi	r24, 0xA1	; 161
 532:	9e 4f       	sbci	r25, 0xFE	; 254
 534:	fc 01       	movw	r30, r24
 536:	31 83       	std	Z+1, r19	; 0x01
 538:	20 83       	st	Z, r18
            tasks[i].elapsedTime = 0;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	c9 01       	movw	r24, r18
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	8b 59       	subi	r24, 0x9B	; 155
 554:	9e 4f       	sbci	r25, 0xFE	; 254
 556:	fc 01       	movw	r30, r24
 558:	10 82       	st	Z, r1
 55a:	11 82       	std	Z+1, r1	; 0x01
 55c:	12 82       	std	Z+2, r1	; 0x02
 55e:	13 82       	std	Z+3, r1	; 0x03
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	68 2f       	mov	r22, r24
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	c9 01       	movw	r24, r18
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	82 0f       	add	r24, r18
 574:	93 1f       	adc	r25, r19
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	8b 59       	subi	r24, 0x9B	; 155
 580:	9e 4f       	sbci	r25, 0xFE	; 254
 582:	fc 01       	movw	r30, r24
 584:	80 81       	ld	r24, Z
 586:	91 81       	ldd	r25, Z+1	; 0x01
 588:	a2 81       	ldd	r26, Z+2	; 0x02
 58a:	b3 81       	ldd	r27, Z+3	; 0x03
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	28 0f       	add	r18, r24
 596:	39 1f       	adc	r19, r25
 598:	4a 1f       	adc	r20, r26
 59a:	5b 1f       	adc	r21, r27
 59c:	cb 01       	movw	r24, r22
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	86 0f       	add	r24, r22
 5a4:	97 1f       	adc	r25, r23
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	8b 59       	subi	r24, 0x9B	; 155
 5b0:	9e 4f       	sbci	r25, 0xFE	; 254
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
 5b6:	31 83       	std	Z+1, r19	; 0x01
 5b8:	42 83       	std	Z+2, r20	; 0x02
 5ba:	53 83       	std	Z+3, r21	; 0x03

void TimerISR() {
	TimerFlag = 1;
    
    unsigned char i;
    for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	99 81       	ldd	r25, Y+1	; 0x01
 5c6:	98 17       	cp	r25, r24
 5c8:	08 f4       	brcc	.+2      	; 0x5cc <TimerISR+0x16e>
 5ca:	55 cf       	rjmp	.-342    	; 0x476 <TimerISR+0x18>
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
    
}
 5cc:	00 00       	nop
 5ce:	0f 90       	pop	r0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 5ea:	0f 92       	push	r0
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 60c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <_avr_timer_cntcurr>
 610:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <_avr_timer_cntcurr+0x1>
 614:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <_avr_timer_cntcurr+0x2>
 618:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x3>
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	a1 09       	sbc	r26, r1
 620:	b1 09       	sbc	r27, r1
 622:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 626:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 62a:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 62e:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 632:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <_avr_timer_cntcurr>
 636:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <_avr_timer_cntcurr+0x1>
 63a:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <_avr_timer_cntcurr+0x2>
 63e:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x3>
 642:	89 2b       	or	r24, r25
 644:	8a 2b       	or	r24, r26
 646:	8b 2b       	or	r24, r27
 648:	89 f4       	brne	.+34     	; 0x66c <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
 64a:	09 df       	rcall	.-494    	; 0x45e <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 64c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_M>
 650:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_M+0x1>
 654:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_M+0x2>
 658:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_M+0x3>
 65c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 660:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 664:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 668:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
	}
}
 66c:	00 00       	nop
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 690:	0f 90       	pop	r0
 692:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <Set_Bit>:
#define DATA 2		//Data pin location
#define SHIFT 3	//Shift Clock pin location
#define STORE 4	//Store Clock pin location


unsigned char Set_Bit(unsigned char output, unsigned char in){
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <Set_Bit+0x6>
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	89 83       	std	Y+1, r24	; 0x01
 6a8:	6a 83       	std	Y+2, r22	; 0x02
    return (output | (1 << in));   
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <Set_Bit+0x1e>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	2a 95       	dec	r18
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <Set_Bit+0x1a>
 6be:	98 2f       	mov	r25, r24
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	89 2b       	or	r24, r25
}
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <Clear_Bit>:
unsigned char Clear_Bit(unsigned char output, unsigned char in){
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <Clear_Bit+0x6>
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	6a 83       	std	Y+2, r22	; 0x02
    return (output & ~(1 << in));
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Clear_Bit+0x1e>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	2a 95       	dec	r18
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <Clear_Bit+0x1a>
 6f0:	98 2f       	mov	r25, r24
 6f2:	90 95       	com	r25
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	89 23       	and	r24, r25
} 
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <Shift_Init>:

void Shift_Init() {
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
    DDRC = Set_Bit(DDRC, DATA);
 70e:	07 e2       	ldi	r16, 0x27	; 39
 710:	10 e0       	ldi	r17, 0x00	; 0
 712:	87 e2       	ldi	r24, 0x27	; 39
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	fc 01       	movw	r30, r24
 718:	80 81       	ld	r24, Z
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	bf df       	rcall	.-130    	; 0x69c <Set_Bit>
 71e:	f8 01       	movw	r30, r16
 720:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, SHIFT);
 722:	07 e2       	ldi	r16, 0x27	; 39
 724:	10 e0       	ldi	r17, 0x00	; 0
 726:	87 e2       	ldi	r24, 0x27	; 39
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	fc 01       	movw	r30, r24
 72c:	80 81       	ld	r24, Z
 72e:	63 e0       	ldi	r22, 0x03	; 3
 730:	b5 df       	rcall	.-150    	; 0x69c <Set_Bit>
 732:	f8 01       	movw	r30, r16
 734:	80 83       	st	Z, r24
    DDRC = Set_Bit(DDRC, STORE);
 736:	07 e2       	ldi	r16, 0x27	; 39
 738:	10 e0       	ldi	r17, 0x00	; 0
 73a:	87 e2       	ldi	r24, 0x27	; 39
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	fc 01       	movw	r30, r24
 740:	80 81       	ld	r24, Z
 742:	64 e0       	ldi	r22, 0x04	; 4
 744:	ab df       	rcall	.-170    	; 0x69c <Set_Bit>
 746:	f8 01       	movw	r30, r16
 748:	80 83       	st	Z, r24
}
 74a:	00 00       	nop
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <Shift_Data_High>:

//Set Data line high
void Shift_Data_High() {
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, DATA);
 762:	08 e2       	ldi	r16, 0x28	; 40
 764:	10 e0       	ldi	r17, 0x00	; 0
 766:	88 e2       	ldi	r24, 0x28	; 40
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	fc 01       	movw	r30, r24
 76c:	80 81       	ld	r24, Z
 76e:	62 e0       	ldi	r22, 0x02	; 2
 770:	95 df       	rcall	.-214    	; 0x69c <Set_Bit>
 772:	f8 01       	movw	r30, r16
 774:	80 83       	st	Z, r24
}
 776:	00 00       	nop
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	08 95       	ret

00000782 <Shift_Data_Low>:

//Set Data line low
void Shift_Data_Low() {
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
    PORTC = Clear_Bit(PORTC, DATA);
 78e:	08 e2       	ldi	r16, 0x28	; 40
 790:	10 e0       	ldi	r17, 0x00	; 0
 792:	88 e2       	ldi	r24, 0x28	; 40
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	fc 01       	movw	r30, r24
 798:	80 81       	ld	r24, Z
 79a:	62 e0       	ldi	r22, 0x02	; 2
 79c:	98 df       	rcall	.-208    	; 0x6ce <Clear_Bit>
 79e:	f8 01       	movw	r30, r16
 7a0:	80 83       	st	Z, r24
}
 7a2:	00 00       	nop
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	08 95       	ret

000007ae <Shift_Pulse>:

//Pulse Shift Clock
void Shift_Pulse() {
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, SHIFT);
 7ba:	08 e2       	ldi	r16, 0x28	; 40
 7bc:	10 e0       	ldi	r17, 0x00	; 0
 7be:	88 e2       	ldi	r24, 0x28	; 40
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	fc 01       	movw	r30, r24
 7c4:	80 81       	ld	r24, Z
 7c6:	63 e0       	ldi	r22, 0x03	; 3
 7c8:	69 df       	rcall	.-302    	; 0x69c <Set_Bit>
 7ca:	f8 01       	movw	r30, r16
 7cc:	80 83       	st	Z, r24
    PORTC = Clear_Bit(PORTC, SHIFT);
 7ce:	08 e2       	ldi	r16, 0x28	; 40
 7d0:	10 e0       	ldi	r17, 0x00	; 0
 7d2:	88 e2       	ldi	r24, 0x28	; 40
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	fc 01       	movw	r30, r24
 7d8:	80 81       	ld	r24, Z
 7da:	63 e0       	ldi	r22, 0x03	; 3
 7dc:	78 df       	rcall	.-272    	; 0x6ce <Clear_Bit>
 7de:	f8 01       	movw	r30, r16
 7e0:	80 83       	st	Z, r24
}
 7e2:	00 00       	nop
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	08 95       	ret

000007ee <Shift_Store>:

//Pulse Store Clock
void Shift_Store() {
 7ee:	0f 93       	push	r16
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <Shift_Store+0xa>
 7f8:	00 d0       	rcall	.+0      	; 0x7fa <Shift_Store+0xc>
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
    PORTC = Set_Bit(PORTC, STORE);
 7fe:	08 e2       	ldi	r16, 0x28	; 40
 800:	10 e0       	ldi	r17, 0x00	; 0
 802:	88 e2       	ldi	r24, 0x28	; 40
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	fc 01       	movw	r30, r24
 808:	80 81       	ld	r24, Z
 80a:	64 e0       	ldi	r22, 0x04	; 4
 80c:	47 df       	rcall	.-370    	; 0x69c <Set_Bit>
 80e:	f8 01       	movw	r30, r16
 810:	80 83       	st	Z, r24
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9a 83       	std	Y+2, r25	; 0x02
 818:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	9a 81       	ldd	r25, Y+2	; 0x02
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <Shift_Store+0x30>
 822:	9a 83       	std	Y+2, r25	; 0x02
 824:	89 83       	std	Y+1, r24	; 0x01
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
 826:	08 e2       	ldi	r16, 0x28	; 40
 828:	10 e0       	ldi	r17, 0x00	; 0
 82a:	88 e2       	ldi	r24, 0x28	; 40
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	fc 01       	movw	r30, r24
 830:	80 81       	ld	r24, Z
 832:	64 e0       	ldi	r22, 0x04	; 4
 834:	4c df       	rcall	.-360    	; 0x6ce <Clear_Bit>
 836:	f8 01       	movw	r30, r16
 838:	80 83       	st	Z, r24
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	9c 83       	std	Y+4, r25	; 0x04
 840:	8b 83       	std	Y+3, r24	; 0x03
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	9c 81       	ldd	r25, Y+4	; 0x04
 846:	01 97       	sbiw	r24, 0x01	; 1
 848:	f1 f7       	brne	.-4      	; 0x846 <Shift_Store+0x58>
 84a:	9c 83       	std	Y+4, r25	; 0x04
 84c:	8b 83       	std	Y+3, r24	; 0x03
    _delay_loop_2(1);
}
 84e:	00 00       	nop
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	08 95       	ret

00000862 <Shift_transmit_data>:


void Shift_transmit_data(unsigned char data) {
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	00 d0       	rcall	.+0      	; 0x868 <Shift_transmit_data+0x6>
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
 86c:	8a 83       	std	Y+2, r24	; 0x02
    for(unsigned char i=0;i<8;i++) {
 86e:	19 82       	std	Y+1, r1	; 0x01
 870:	0d c0       	rjmp	.+26     	; 0x88c <Shift_transmit_data+0x2a>
        if(data & 0x80) {
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	88 23       	and	r24, r24
 876:	14 f4       	brge	.+4      	; 0x87c <Shift_transmit_data+0x1a>
            Shift_Data_High();
 878:	6e df       	rcall	.-292    	; 0x756 <Shift_Data_High>
 87a:	01 c0       	rjmp	.+2      	; 0x87e <Shift_transmit_data+0x1c>
            } else {
            Shift_Data_Low();
 87c:	82 df       	rcall	.-252    	; 0x782 <Shift_Data_Low>
        }

        Shift_Pulse();
 87e:	97 df       	rcall	.-210    	; 0x7ae <Shift_Pulse>
 880:	8a 81       	ldd	r24, Y+2	; 0x02
        data=data << 1;
 882:	88 0f       	add	r24, r24
 884:	8a 83       	std	Y+2, r24	; 0x02
 886:	89 81       	ldd	r24, Y+1	; 0x01
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
 888:	8f 5f       	subi	r24, 0xFF	; 255
 88a:	89 83       	std	Y+1, r24	; 0x01
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	88 30       	cpi	r24, 0x08	; 8
 890:	80 f3       	brcs	.-32     	; 0x872 <Shift_transmit_data+0x10>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
 892:	ad df       	rcall	.-166    	; 0x7ee <Shift_Store>
 894:	00 00       	nop
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <main>:
 8a0:	cf 93       	push	r28




int main(void)
{
 8a2:	df 93       	push	r29
 8a4:	1f 92       	push	r1
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
 8aa:	8a e2       	ldi	r24, 0x2A	; 42
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	2f ef       	ldi	r18, 0xFF	; 255
 8b0:	fc 01       	movw	r30, r24
 8b2:	20 83       	st	Z, r18
 8b4:	8b e2       	ldi	r24, 0x2B	; 43
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	fc 01       	movw	r30, r24
 8ba:	10 82       	st	Z, r1
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
 8bc:	87 e2       	ldi	r24, 0x27	; 39
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	2f ef       	ldi	r18, 0xFF	; 255
 8c2:	fc 01       	movw	r30, r24
 8c4:	20 83       	st	Z, r18
 8c6:	88 e2       	ldi	r24, 0x28	; 40
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	fc 01       	movw	r30, r24
 8cc:	10 82       	st	Z, r1
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
 8ce:	81 e2       	ldi	r24, 0x21	; 33
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	fc 01       	movw	r30, r24
 8d4:	10 82       	st	Z, r1
 8d6:	82 e2       	ldi	r24, 0x22	; 34
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	2f ef       	ldi	r18, 0xFF	; 255
 8dc:	fc 01       	movw	r30, r24
 8de:	20 83       	st	Z, r18
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
 8e0:	84 e2       	ldi	r24, 0x24	; 36
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	2f ef       	ldi	r18, 0xFF	; 255
 8e6:	fc 01       	movw	r30, r24
 8e8:	20 83       	st	Z, r18
 8ea:	85 e2       	ldi	r24, 0x25	; 37
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	fc 01       	movw	r30, r24
 8f0:	10 82       	st	Z, r1
    
    //Initialize LCD and Matrix
    LCD_init();
 8f2:	fc dc       	rcall	.-1544   	; 0x2ec <LCD_init>
    LCD_Game_Menu();
 8f4:	29 dd       	rcall	.-1454   	; 0x348 <LCD_Game_Menu>
    
    Shift_Init();    
 8f6:	05 df       	rcall	.-502    	; 0x702 <Shift_Init>
    Shift_transmit_data(255);
 8f8:	8f ef       	ldi	r24, 0xFF	; 255
 8fa:	b3 df       	rcall	.-154    	; 0x862 <Shift_transmit_data>
    Shift_transmit_data(0);
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	b1 df       	rcall	.-158    	; 0x862 <Shift_transmit_data>
 900:	19 82       	std	Y+1, r1	; 0x01
    
    //Task Code
    unsigned char tasks_increment = 0;
 902:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LFT_INIT;
 904:	28 2f       	mov	r18, r24
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	c9 01       	movw	r24, r18
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	82 0f       	add	r24, r18
 910:	93 1f       	adc	r25, r19
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	81 5a       	subi	r24, 0xA1	; 161
 91c:	9e 4f       	sbci	r25, 0xFE	; 254
 91e:	fc 01       	movw	r30, r24
 920:	11 82       	std	Z+1, r1	; 0x01
 922:	10 82       	st	Z, r1
 924:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
 926:	28 2f       	mov	r18, r24
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	c9 01       	movw	r24, r18
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	82 0f       	add	r24, r18
 932:	93 1f       	adc	r25, r19
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	9c 01       	movw	r18, r24
 93e:	2f 59       	subi	r18, 0x9F	; 159
 940:	3e 4f       	sbci	r19, 0xFE	; 254
 942:	82 e3       	ldi	r24, 0x32	; 50
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	a0 e0       	ldi	r26, 0x00	; 0
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	f9 01       	movw	r30, r18
 94c:	80 83       	st	Z, r24
 94e:	91 83       	std	Z+1, r25	; 0x01
 950:	a2 83       	std	Z+2, r26	; 0x02
 952:	b3 83       	std	Z+3, r27	; 0x03
 954:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
 956:	68 2f       	mov	r22, r24
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	28 2f       	mov	r18, r24
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	c9 01       	movw	r24, r18
 962:	88 0f       	add	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	82 0f       	add	r24, r18
 968:	93 1f       	adc	r25, r19
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	8f 59       	subi	r24, 0x9F	; 159
 974:	9e 4f       	sbci	r25, 0xFE	; 254
 976:	fc 01       	movw	r30, r24
 978:	20 81       	ld	r18, Z
 97a:	31 81       	ldd	r19, Z+1	; 0x01
 97c:	42 81       	ldd	r20, Z+2	; 0x02
 97e:	53 81       	ldd	r21, Z+3	; 0x03
 980:	cb 01       	movw	r24, r22
 982:	88 0f       	add	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	86 0f       	add	r24, r22
 988:	97 1f       	adc	r25, r23
 98a:	88 0f       	add	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	8b 59       	subi	r24, 0x9B	; 155
 994:	9e 4f       	sbci	r25, 0xFE	; 254
 996:	fc 01       	movw	r30, r24
 998:	20 83       	st	Z, r18
 99a:	31 83       	std	Z+1, r19	; 0x01
 99c:	42 83       	std	Z+2, r20	; 0x02
 99e:	53 83       	std	Z+3, r21	; 0x03
 9a0:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Left_Tick;
 9a2:	28 2f       	mov	r18, r24
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	c9 01       	movw	r24, r18
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	82 0f       	add	r24, r18
 9ae:	93 1f       	adc	r25, r19
 9b0:	88 0f       	add	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	87 59       	subi	r24, 0x97	; 151
 9ba:	9e 4f       	sbci	r25, 0xFE	; 254
 9bc:	23 e9       	ldi	r18, 0x93	; 147
 9be:	36 e0       	ldi	r19, 0x06	; 6
 9c0:	fc 01       	movw	r30, r24
 9c2:	31 83       	std	Z+1, r19	; 0x01
 9c4:	20 83       	st	Z, r18
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
 9c8:	8f 5f       	subi	r24, 0xFF	; 255
 9ca:	89 83       	std	Y+1, r24	; 0x01
 9cc:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = RGHT_INIT;
 9ce:	28 2f       	mov	r18, r24
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	c9 01       	movw	r24, r18
 9d4:	88 0f       	add	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	82 0f       	add	r24, r18
 9da:	93 1f       	adc	r25, r19
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	81 5a       	subi	r24, 0xA1	; 161
 9e6:	9e 4f       	sbci	r25, 0xFE	; 254
 9e8:	fc 01       	movw	r30, r24
 9ea:	11 82       	std	Z+1, r1	; 0x01
 9ec:	10 82       	st	Z, r1
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
 9f0:	28 2f       	mov	r18, r24
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	c9 01       	movw	r24, r18
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	82 0f       	add	r24, r18
 9fc:	93 1f       	adc	r25, r19
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	9c 01       	movw	r18, r24
 a08:	2f 59       	subi	r18, 0x9F	; 159
 a0a:	3e 4f       	sbci	r19, 0xFE	; 254
 a0c:	82 e3       	ldi	r24, 0x32	; 50
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	a0 e0       	ldi	r26, 0x00	; 0
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	f9 01       	movw	r30, r18
 a16:	80 83       	st	Z, r24
 a18:	91 83       	std	Z+1, r25	; 0x01
 a1a:	a2 83       	std	Z+2, r26	; 0x02
 a1c:	b3 83       	std	Z+3, r27	; 0x03
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
 a20:	68 2f       	mov	r22, r24
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	28 2f       	mov	r18, r24
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	c9 01       	movw	r24, r18
 a2c:	88 0f       	add	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	82 0f       	add	r24, r18
 a32:	93 1f       	adc	r25, r19
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	88 0f       	add	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	8f 59       	subi	r24, 0x9F	; 159
 a3e:	9e 4f       	sbci	r25, 0xFE	; 254
 a40:	fc 01       	movw	r30, r24
 a42:	20 81       	ld	r18, Z
 a44:	31 81       	ldd	r19, Z+1	; 0x01
 a46:	42 81       	ldd	r20, Z+2	; 0x02
 a48:	53 81       	ldd	r21, Z+3	; 0x03
 a4a:	cb 01       	movw	r24, r22
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	86 0f       	add	r24, r22
 a52:	97 1f       	adc	r25, r23
 a54:	88 0f       	add	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	88 0f       	add	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	8b 59       	subi	r24, 0x9B	; 155
 a5e:	9e 4f       	sbci	r25, 0xFE	; 254
 a60:	fc 01       	movw	r30, r24
 a62:	20 83       	st	Z, r18
 a64:	31 83       	std	Z+1, r19	; 0x01
 a66:	42 83       	std	Z+2, r20	; 0x02
 a68:	53 83       	std	Z+3, r21	; 0x03
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Right_Tick;
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	c9 01       	movw	r24, r18
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	82 0f       	add	r24, r18
 a78:	93 1f       	adc	r25, r19
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	87 59       	subi	r24, 0x97	; 151
 a84:	9e 4f       	sbci	r25, 0xFE	; 254
 a86:	2a ec       	ldi	r18, 0xCA	; 202
 a88:	36 e0       	ldi	r19, 0x06	; 6
 a8a:	fc 01       	movw	r30, r24
 a8c:	31 83       	std	Z+1, r19	; 0x01
 a8e:	20 83       	st	Z, r18
 a90:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks_increment++;
 a92:	8f 5f       	subi	r24, 0xFF	; 255
 a94:	89 83       	std	Y+1, r24	; 0x01
 a96:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = UP_INIT;
 a98:	28 2f       	mov	r18, r24
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	c9 01       	movw	r24, r18
 a9e:	88 0f       	add	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	82 0f       	add	r24, r18
 aa4:	93 1f       	adc	r25, r19
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	81 5a       	subi	r24, 0xA1	; 161
 ab0:	9e 4f       	sbci	r25, 0xFE	; 254
 ab2:	fc 01       	movw	r30, r24
 ab4:	11 82       	std	Z+1, r1	; 0x01
 ab6:	10 82       	st	Z, r1
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
 aba:	28 2f       	mov	r18, r24
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	c9 01       	movw	r24, r18
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	82 0f       	add	r24, r18
 ac6:	93 1f       	adc	r25, r19
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	9c 01       	movw	r18, r24
 ad2:	2f 59       	subi	r18, 0x9F	; 159
 ad4:	3e 4f       	sbci	r19, 0xFE	; 254
 ad6:	82 e3       	ldi	r24, 0x32	; 50
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	a0 e0       	ldi	r26, 0x00	; 0
 adc:	b0 e0       	ldi	r27, 0x00	; 0
 ade:	f9 01       	movw	r30, r18
 ae0:	80 83       	st	Z, r24
 ae2:	91 83       	std	Z+1, r25	; 0x01
 ae4:	a2 83       	std	Z+2, r26	; 0x02
 ae6:	b3 83       	std	Z+3, r27	; 0x03
 ae8:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
 aea:	68 2f       	mov	r22, r24
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	28 2f       	mov	r18, r24
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	c9 01       	movw	r24, r18
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	82 0f       	add	r24, r18
 afc:	93 1f       	adc	r25, r19
 afe:	88 0f       	add	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	88 0f       	add	r24, r24
 b04:	99 1f       	adc	r25, r25
 b06:	8f 59       	subi	r24, 0x9F	; 159
 b08:	9e 4f       	sbci	r25, 0xFE	; 254
 b0a:	fc 01       	movw	r30, r24
 b0c:	20 81       	ld	r18, Z
 b0e:	31 81       	ldd	r19, Z+1	; 0x01
 b10:	42 81       	ldd	r20, Z+2	; 0x02
 b12:	53 81       	ldd	r21, Z+3	; 0x03
 b14:	cb 01       	movw	r24, r22
 b16:	88 0f       	add	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	86 0f       	add	r24, r22
 b1c:	97 1f       	adc	r25, r23
 b1e:	88 0f       	add	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	8b 59       	subi	r24, 0x9B	; 155
 b28:	9e 4f       	sbci	r25, 0xFE	; 254
 b2a:	fc 01       	movw	r30, r24
 b2c:	20 83       	st	Z, r18
 b2e:	31 83       	std	Z+1, r19	; 0x01
 b30:	42 83       	std	Z+2, r20	; 0x02
 b32:	53 83       	std	Z+3, r21	; 0x03
 b34:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Up_Tick;
 b36:	28 2f       	mov	r18, r24
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	c9 01       	movw	r24, r18
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	82 0f       	add	r24, r18
 b42:	93 1f       	adc	r25, r19
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	88 0f       	add	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	87 59       	subi	r24, 0x97	; 151
 b4e:	9e 4f       	sbci	r25, 0xFE	; 254
 b50:	21 e0       	ldi	r18, 0x01	; 1
 b52:	37 e0       	ldi	r19, 0x07	; 7
 b54:	fc 01       	movw	r30, r24
 b56:	31 83       	std	Z+1, r19	; 0x01
 b58:	20 83       	st	Z, r18
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
 b5c:	8f 5f       	subi	r24, 0xFF	; 255
 b5e:	89 83       	std	Y+1, r24	; 0x01
 b60:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = DOWN_INIT;
 b62:	28 2f       	mov	r18, r24
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	c9 01       	movw	r24, r18
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	82 0f       	add	r24, r18
 b6e:	93 1f       	adc	r25, r19
 b70:	88 0f       	add	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	81 5a       	subi	r24, 0xA1	; 161
 b7a:	9e 4f       	sbci	r25, 0xFE	; 254
 b7c:	fc 01       	movw	r30, r24
 b7e:	11 82       	std	Z+1, r1	; 0x01
 b80:	10 82       	st	Z, r1
 b82:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 50;
 b84:	28 2f       	mov	r18, r24
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	c9 01       	movw	r24, r18
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	82 0f       	add	r24, r18
 b90:	93 1f       	adc	r25, r19
 b92:	88 0f       	add	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	88 0f       	add	r24, r24
 b98:	99 1f       	adc	r25, r25
 b9a:	9c 01       	movw	r18, r24
 b9c:	2f 59       	subi	r18, 0x9F	; 159
 b9e:	3e 4f       	sbci	r19, 0xFE	; 254
 ba0:	82 e3       	ldi	r24, 0x32	; 50
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	a0 e0       	ldi	r26, 0x00	; 0
 ba6:	b0 e0       	ldi	r27, 0x00	; 0
 ba8:	f9 01       	movw	r30, r18
 baa:	80 83       	st	Z, r24
 bac:	91 83       	std	Z+1, r25	; 0x01
 bae:	a2 83       	std	Z+2, r26	; 0x02
 bb0:	b3 83       	std	Z+3, r27	; 0x03
 bb2:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
 bb4:	68 2f       	mov	r22, r24
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	89 81       	ldd	r24, Y+1	; 0x01
 bba:	28 2f       	mov	r18, r24
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	c9 01       	movw	r24, r18
 bc0:	88 0f       	add	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	82 0f       	add	r24, r18
 bc6:	93 1f       	adc	r25, r19
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	88 0f       	add	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	8f 59       	subi	r24, 0x9F	; 159
 bd2:	9e 4f       	sbci	r25, 0xFE	; 254
 bd4:	fc 01       	movw	r30, r24
 bd6:	20 81       	ld	r18, Z
 bd8:	31 81       	ldd	r19, Z+1	; 0x01
 bda:	42 81       	ldd	r20, Z+2	; 0x02
 bdc:	53 81       	ldd	r21, Z+3	; 0x03
 bde:	cb 01       	movw	r24, r22
 be0:	88 0f       	add	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	86 0f       	add	r24, r22
 be6:	97 1f       	adc	r25, r23
 be8:	88 0f       	add	r24, r24
 bea:	99 1f       	adc	r25, r25
 bec:	88 0f       	add	r24, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	8b 59       	subi	r24, 0x9B	; 155
 bf2:	9e 4f       	sbci	r25, 0xFE	; 254
 bf4:	fc 01       	movw	r30, r24
 bf6:	20 83       	st	Z, r18
 bf8:	31 83       	std	Z+1, r19	; 0x01
 bfa:	42 83       	std	Z+2, r20	; 0x02
 bfc:	53 83       	std	Z+3, r21	; 0x03
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &Down_Tick;
 c00:	28 2f       	mov	r18, r24
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	c9 01       	movw	r24, r18
 c06:	88 0f       	add	r24, r24
 c08:	99 1f       	adc	r25, r25
 c0a:	82 0f       	add	r24, r18
 c0c:	93 1f       	adc	r25, r19
 c0e:	88 0f       	add	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	88 0f       	add	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	87 59       	subi	r24, 0x97	; 151
 c18:	9e 4f       	sbci	r25, 0xFE	; 254
 c1a:	28 e3       	ldi	r18, 0x38	; 56
 c1c:	37 e0       	ldi	r19, 0x07	; 7
 c1e:	fc 01       	movw	r30, r24
 c20:	31 83       	std	Z+1, r19	; 0x01
 c22:	20 83       	st	Z, r18
 c24:	89 81       	ldd	r24, Y+1	; 0x01
    
    
    tasks_increment++;
 c26:	8f 5f       	subi	r24, 0xFF	; 255
 c28:	89 83       	std	Y+1, r24	; 0x01
 c2a:	89 81       	ldd	r24, Y+1	; 0x01
    
    tasks[tasks_increment].state = LCD_Menu_Init;
 c2c:	28 2f       	mov	r18, r24
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	c9 01       	movw	r24, r18
 c32:	88 0f       	add	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	82 0f       	add	r24, r18
 c38:	93 1f       	adc	r25, r19
 c3a:	88 0f       	add	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	88 0f       	add	r24, r24
 c40:	99 1f       	adc	r25, r25
 c42:	81 5a       	subi	r24, 0xA1	; 161
 c44:	9e 4f       	sbci	r25, 0xFE	; 254
 c46:	fc 01       	movw	r30, r24
 c48:	11 82       	std	Z+1, r1	; 0x01
 c4a:	10 82       	st	Z, r1
 c4c:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].period = 20;
 c4e:	28 2f       	mov	r18, r24
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	c9 01       	movw	r24, r18
 c54:	88 0f       	add	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	82 0f       	add	r24, r18
 c5a:	93 1f       	adc	r25, r19
 c5c:	88 0f       	add	r24, r24
 c5e:	99 1f       	adc	r25, r25
 c60:	88 0f       	add	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	9c 01       	movw	r18, r24
 c66:	2f 59       	subi	r18, 0x9F	; 159
 c68:	3e 4f       	sbci	r19, 0xFE	; 254
 c6a:	84 e1       	ldi	r24, 0x14	; 20
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	a0 e0       	ldi	r26, 0x00	; 0
 c70:	b0 e0       	ldi	r27, 0x00	; 0
 c72:	f9 01       	movw	r30, r18
 c74:	80 83       	st	Z, r24
 c76:	91 83       	std	Z+1, r25	; 0x01
 c78:	a2 83       	std	Z+2, r26	; 0x02
 c7a:	b3 83       	std	Z+3, r27	; 0x03
 c7c:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
 c7e:	68 2f       	mov	r22, r24
 c80:	70 e0       	ldi	r23, 0x00	; 0
 c82:	89 81       	ldd	r24, Y+1	; 0x01
 c84:	28 2f       	mov	r18, r24
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	c9 01       	movw	r24, r18
 c8a:	88 0f       	add	r24, r24
 c8c:	99 1f       	adc	r25, r25
 c8e:	82 0f       	add	r24, r18
 c90:	93 1f       	adc	r25, r19
 c92:	88 0f       	add	r24, r24
 c94:	99 1f       	adc	r25, r25
 c96:	88 0f       	add	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	8f 59       	subi	r24, 0x9F	; 159
 c9c:	9e 4f       	sbci	r25, 0xFE	; 254
 c9e:	fc 01       	movw	r30, r24
 ca0:	20 81       	ld	r18, Z
 ca2:	31 81       	ldd	r19, Z+1	; 0x01
 ca4:	42 81       	ldd	r20, Z+2	; 0x02
 ca6:	53 81       	ldd	r21, Z+3	; 0x03
 ca8:	cb 01       	movw	r24, r22
 caa:	88 0f       	add	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	86 0f       	add	r24, r22
 cb0:	97 1f       	adc	r25, r23
 cb2:	88 0f       	add	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	88 0f       	add	r24, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	8b 59       	subi	r24, 0x9B	; 155
 cbc:	9e 4f       	sbci	r25, 0xFE	; 254
 cbe:	fc 01       	movw	r30, r24
 cc0:	20 83       	st	Z, r18
 cc2:	31 83       	std	Z+1, r19	; 0x01
 cc4:	42 83       	std	Z+2, r20	; 0x02
 cc6:	53 83       	std	Z+3, r21	; 0x03
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
 cca:	28 2f       	mov	r18, r24
 ccc:	30 e0       	ldi	r19, 0x00	; 0
 cce:	c9 01       	movw	r24, r18
 cd0:	88 0f       	add	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	82 0f       	add	r24, r18
 cd6:	93 1f       	adc	r25, r19
 cd8:	88 0f       	add	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	88 0f       	add	r24, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	87 59       	subi	r24, 0x97	; 151
 ce2:	9e 4f       	sbci	r25, 0xFE	; 254
 ce4:	2f e6       	ldi	r18, 0x6F	; 111
 ce6:	37 e0       	ldi	r19, 0x07	; 7
 ce8:	fc 01       	movw	r30, r24
 cea:	31 83       	std	Z+1, r19	; 0x01
 cec:	20 83       	st	Z, r18
 cee:	8a e0       	ldi	r24, 0x0A	; 10
    
    //Timer
    TimerSet(tasksPeriodGCD);
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	a0 e0       	ldi	r26, 0x00	; 0
 cf4:	b0 e0       	ldi	r27, 0x00	; 0
 cf6:	bc 01       	movw	r22, r24
 cf8:	cd 01       	movw	r24, r26
 cfa:	4c db       	rcall	.-2408   	; 0x394 <TimerSet>
    TimerOn();
 cfc:	79 db       	rcall	.-2318   	; 0x3f0 <TimerOn>
 cfe:	83 e5       	ldi	r24, 0x53	; 83
    
    
    while (1) 
    {
        sleep_mode();
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	23 e5       	ldi	r18, 0x53	; 83
 d04:	30 e0       	ldi	r19, 0x00	; 0
 d06:	f9 01       	movw	r30, r18
 d08:	20 81       	ld	r18, Z
 d0a:	21 60       	ori	r18, 0x01	; 1
 d0c:	fc 01       	movw	r30, r24
 d0e:	20 83       	st	Z, r18
 d10:	88 95       	sleep
 d12:	83 e5       	ldi	r24, 0x53	; 83
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	23 e5       	ldi	r18, 0x53	; 83
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	f9 01       	movw	r30, r18
 d1c:	20 81       	ld	r18, Z
 d1e:	2e 7f       	andi	r18, 0xFE	; 254
 d20:	fc 01       	movw	r30, r24
 d22:	20 83       	st	Z, r18
 d24:	ec cf       	rjmp	.-40     	; 0xcfe <main+0x45e>

00000d26 <Left_Tick>:
    }        
 d26:	cf 93       	push	r28
    return 0;
}

int Left_Tick(int state){
 d28:	df 93       	push	r29
 d2a:	00 d0       	rcall	.+0      	; 0xd2c <Left_Tick+0x6>
 d2c:	cd b7       	in	r28, 0x3d	; 61
 d2e:	de b7       	in	r29, 0x3e	; 62
 d30:	9a 83       	std	Y+2, r25	; 0x02
 d32:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
 d34:	89 81       	ldd	r24, Y+1	; 0x01
 d36:	9a 81       	ldd	r25, Y+2	; 0x02
 d38:	00 97       	sbiw	r24, 0x00	; 0
 d3a:	19 f0       	breq	.+6      	; 0xd42 <Left_Tick+0x1c>
 d3c:	01 97       	sbiw	r24, 0x01	; 1
 d3e:	31 f0       	breq	.+12     	; 0xd4c <Left_Tick+0x26>
 d40:	0a c0       	rjmp	.+20     	; 0xd56 <Left_Tick+0x30>
        case LFT_INIT:
            state = LFT_WAIT;
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	9a 83       	std	Y+2, r25	; 0x02
 d48:	89 83       	std	Y+1, r24	; 0x01
            break;
 d4a:	05 c0       	rjmp	.+10     	; 0xd56 <Left_Tick+0x30>
        case LFT_WAIT:
            state = LFT_WAIT;
 d4c:	81 e0       	ldi	r24, 0x01	; 1
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	9a 83       	std	Y+2, r25	; 0x02
 d52:	89 83       	std	Y+1, r24	; 0x01
            break;
 d54:	00 00       	nop
    }
    switch(state){
 d56:	89 81       	ldd	r24, Y+1	; 0x01
 d58:	9a 81       	ldd	r25, Y+2	; 0x02
 d5a:	00 97       	sbiw	r24, 0x00	; 0
 d5c:	99 f0       	breq	.+38     	; 0xd84 <Left_Tick+0x5e>
 d5e:	01 97       	sbiw	r24, 0x01	; 1
 d60:	91 f4       	brne	.+36     	; 0xd86 <Left_Tick+0x60>
        case LFT_INIT:
            break;
        case LFT_WAIT:
            if(LEFT_BUTTON == 0x00){
 d62:	80 e2       	ldi	r24, 0x20	; 32
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	fc 01       	movw	r30, r24
 d68:	80 81       	ld	r24, Z
 d6a:	88 2f       	mov	r24, r24
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	88 70       	andi	r24, 0x08	; 8
 d70:	99 27       	eor	r25, r25
 d72:	89 2b       	or	r24, r25
 d74:	21 f4       	brne	.+8      	; 0xd7e <Left_Tick+0x58>
                LEFT = true;
 d76:	81 e0       	ldi	r24, 0x01	; 1
 d78:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <LEFT>
                break;
 d7c:	04 c0       	rjmp	.+8      	; 0xd86 <Left_Tick+0x60>
            }
            else{
                LEFT = false;
 d7e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <LEFT>
                break;
 d82:	01 c0       	rjmp	.+2      	; 0xd86 <Left_Tick+0x60>
            state = LFT_WAIT;
            break;
    }
    switch(state){
        case LFT_INIT:
            break;
 d84:	00 00       	nop
                LEFT = false;
                break;
            }
    }
    
    return state;
 d86:	89 81       	ldd	r24, Y+1	; 0x01
 d88:	9a 81       	ldd	r25, Y+2	; 0x02
}
 d8a:	0f 90       	pop	r0
 d8c:	0f 90       	pop	r0
 d8e:	df 91       	pop	r29
 d90:	cf 91       	pop	r28
 d92:	08 95       	ret

00000d94 <Right_Tick>:

int Right_Tick(int state){
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	00 d0       	rcall	.+0      	; 0xd9a <Right_Tick+0x6>
 d9a:	cd b7       	in	r28, 0x3d	; 61
 d9c:	de b7       	in	r29, 0x3e	; 62
 d9e:	9a 83       	std	Y+2, r25	; 0x02
 da0:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	9a 81       	ldd	r25, Y+2	; 0x02
 da6:	00 97       	sbiw	r24, 0x00	; 0
 da8:	19 f0       	breq	.+6      	; 0xdb0 <Right_Tick+0x1c>
 daa:	01 97       	sbiw	r24, 0x01	; 1
 dac:	31 f0       	breq	.+12     	; 0xdba <Right_Tick+0x26>
 dae:	0a c0       	rjmp	.+20     	; 0xdc4 <Right_Tick+0x30>
        case RGHT_INIT:
            state = RGHT_WAIT;
 db0:	81 e0       	ldi	r24, 0x01	; 1
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	9a 83       	std	Y+2, r25	; 0x02
 db6:	89 83       	std	Y+1, r24	; 0x01
            break;
 db8:	05 c0       	rjmp	.+10     	; 0xdc4 <Right_Tick+0x30>
        case RGHT_WAIT:
            state = RGHT_WAIT;
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	9a 83       	std	Y+2, r25	; 0x02
 dc0:	89 83       	std	Y+1, r24	; 0x01
            break;
 dc2:	00 00       	nop
    }
    switch(state){
 dc4:	89 81       	ldd	r24, Y+1	; 0x01
 dc6:	9a 81       	ldd	r25, Y+2	; 0x02
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	99 f0       	breq	.+38     	; 0xdf2 <Right_Tick+0x5e>
 dcc:	01 97       	sbiw	r24, 0x01	; 1
 dce:	91 f4       	brne	.+36     	; 0xdf4 <Right_Tick+0x60>
        case RGHT_INIT:
            break;
        case RGHT_WAIT:
            if(RIGHT_BUTTON == 0x00){
 dd0:	80 e2       	ldi	r24, 0x20	; 32
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	fc 01       	movw	r30, r24
 dd6:	80 81       	ld	r24, Z
 dd8:	88 2f       	mov	r24, r24
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	81 70       	andi	r24, 0x01	; 1
 dde:	99 27       	eor	r25, r25
 de0:	89 2b       	or	r24, r25
 de2:	21 f4       	brne	.+8      	; 0xdec <Right_Tick+0x58>
                RIGHT = true;
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <RIGHT>
                break;
 dea:	04 c0       	rjmp	.+8      	; 0xdf4 <Right_Tick+0x60>
            }
            else{
                RIGHT = false;
 dec:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <RIGHT>
                break;
 df0:	01 c0       	rjmp	.+2      	; 0xdf4 <Right_Tick+0x60>
            state = RGHT_WAIT;
            break;
    }
    switch(state){
        case RGHT_INIT:
            break;
 df2:	00 00       	nop
                RIGHT = false;
                break;
            }
    }
    
    return state;
 df4:	89 81       	ldd	r24, Y+1	; 0x01
 df6:	9a 81       	ldd	r25, Y+2	; 0x02
}
 df8:	0f 90       	pop	r0
 dfa:	0f 90       	pop	r0
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <Up_Tick>:

int Up_Tick(int state){
 e02:	cf 93       	push	r28
 e04:	df 93       	push	r29
 e06:	00 d0       	rcall	.+0      	; 0xe08 <Up_Tick+0x6>
 e08:	cd b7       	in	r28, 0x3d	; 61
 e0a:	de b7       	in	r29, 0x3e	; 62
 e0c:	9a 83       	std	Y+2, r25	; 0x02
 e0e:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
 e10:	89 81       	ldd	r24, Y+1	; 0x01
 e12:	9a 81       	ldd	r25, Y+2	; 0x02
 e14:	00 97       	sbiw	r24, 0x00	; 0
 e16:	19 f0       	breq	.+6      	; 0xe1e <Up_Tick+0x1c>
 e18:	01 97       	sbiw	r24, 0x01	; 1
 e1a:	31 f0       	breq	.+12     	; 0xe28 <Up_Tick+0x26>
 e1c:	0a c0       	rjmp	.+20     	; 0xe32 <Up_Tick+0x30>
        case UP_INIT:
            state = UP_WAIT;
 e1e:	81 e0       	ldi	r24, 0x01	; 1
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	9a 83       	std	Y+2, r25	; 0x02
 e24:	89 83       	std	Y+1, r24	; 0x01
            break;
 e26:	05 c0       	rjmp	.+10     	; 0xe32 <Up_Tick+0x30>
        case UP_WAIT:
            state = UP_WAIT;
 e28:	81 e0       	ldi	r24, 0x01	; 1
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	9a 83       	std	Y+2, r25	; 0x02
 e2e:	89 83       	std	Y+1, r24	; 0x01
            break;
 e30:	00 00       	nop
    }
    switch(state){
 e32:	89 81       	ldd	r24, Y+1	; 0x01
 e34:	9a 81       	ldd	r25, Y+2	; 0x02
 e36:	00 97       	sbiw	r24, 0x00	; 0
 e38:	99 f0       	breq	.+38     	; 0xe60 <Up_Tick+0x5e>
 e3a:	01 97       	sbiw	r24, 0x01	; 1
 e3c:	91 f4       	brne	.+36     	; 0xe62 <Up_Tick+0x60>
        case UP_INIT:
            break;
        case UP_WAIT:
            if(UP_BUTTON == 0x00){
 e3e:	80 e2       	ldi	r24, 0x20	; 32
 e40:	90 e0       	ldi	r25, 0x00	; 0
 e42:	fc 01       	movw	r30, r24
 e44:	80 81       	ld	r24, Z
 e46:	88 2f       	mov	r24, r24
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	82 70       	andi	r24, 0x02	; 2
 e4c:	99 27       	eor	r25, r25
 e4e:	89 2b       	or	r24, r25
 e50:	21 f4       	brne	.+8      	; 0xe5a <Up_Tick+0x58>
                UP = true;
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <UP>
                break;
 e58:	04 c0       	rjmp	.+8      	; 0xe62 <Up_Tick+0x60>
            }
            else{
                UP = false;
 e5a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <UP>
                break;
 e5e:	01 c0       	rjmp	.+2      	; 0xe62 <Up_Tick+0x60>
            state = UP_WAIT;
            break;
    }
    switch(state){
        case UP_INIT:
            break;
 e60:	00 00       	nop
                UP = false;
                break;
            }
    }
    
    return state;
 e62:	89 81       	ldd	r24, Y+1	; 0x01
 e64:	9a 81       	ldd	r25, Y+2	; 0x02
}
 e66:	0f 90       	pop	r0
 e68:	0f 90       	pop	r0
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	08 95       	ret

00000e70 <Down_Tick>:

int Down_Tick(int state){
 e70:	cf 93       	push	r28
 e72:	df 93       	push	r29
 e74:	00 d0       	rcall	.+0      	; 0xe76 <Down_Tick+0x6>
 e76:	cd b7       	in	r28, 0x3d	; 61
 e78:	de b7       	in	r29, 0x3e	; 62
 e7a:	9a 83       	std	Y+2, r25	; 0x02
 e7c:	89 83       	std	Y+1, r24	; 0x01
    switch(state){
 e7e:	89 81       	ldd	r24, Y+1	; 0x01
 e80:	9a 81       	ldd	r25, Y+2	; 0x02
 e82:	00 97       	sbiw	r24, 0x00	; 0
 e84:	19 f0       	breq	.+6      	; 0xe8c <Down_Tick+0x1c>
 e86:	01 97       	sbiw	r24, 0x01	; 1
 e88:	31 f0       	breq	.+12     	; 0xe96 <Down_Tick+0x26>
 e8a:	0a c0       	rjmp	.+20     	; 0xea0 <Down_Tick+0x30>
        case DOWN_INIT:
            state = DOWN_WAIT;
 e8c:	81 e0       	ldi	r24, 0x01	; 1
 e8e:	90 e0       	ldi	r25, 0x00	; 0
 e90:	9a 83       	std	Y+2, r25	; 0x02
 e92:	89 83       	std	Y+1, r24	; 0x01
            break;
 e94:	05 c0       	rjmp	.+10     	; 0xea0 <Down_Tick+0x30>
        case DOWN_WAIT:
            state = DOWN_WAIT;
 e96:	81 e0       	ldi	r24, 0x01	; 1
 e98:	90 e0       	ldi	r25, 0x00	; 0
 e9a:	9a 83       	std	Y+2, r25	; 0x02
 e9c:	89 83       	std	Y+1, r24	; 0x01
            break;
 e9e:	00 00       	nop
    }
    switch(state){
 ea0:	89 81       	ldd	r24, Y+1	; 0x01
 ea2:	9a 81       	ldd	r25, Y+2	; 0x02
 ea4:	00 97       	sbiw	r24, 0x00	; 0
 ea6:	99 f0       	breq	.+38     	; 0xece <Down_Tick+0x5e>
 ea8:	01 97       	sbiw	r24, 0x01	; 1
 eaa:	91 f4       	brne	.+36     	; 0xed0 <Down_Tick+0x60>
        case DOWN_INIT:
            break;
        case DOWN_WAIT:
            if(DOWN_BUTTON == 0x00){
 eac:	80 e2       	ldi	r24, 0x20	; 32
 eae:	90 e0       	ldi	r25, 0x00	; 0
 eb0:	fc 01       	movw	r30, r24
 eb2:	80 81       	ld	r24, Z
 eb4:	88 2f       	mov	r24, r24
 eb6:	90 e0       	ldi	r25, 0x00	; 0
 eb8:	84 70       	andi	r24, 0x04	; 4
 eba:	99 27       	eor	r25, r25
 ebc:	89 2b       	or	r24, r25
 ebe:	21 f4       	brne	.+8      	; 0xec8 <Down_Tick+0x58>
                DOWN = true;
 ec0:	81 e0       	ldi	r24, 0x01	; 1
 ec2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <DOWN>
                break;
 ec6:	04 c0       	rjmp	.+8      	; 0xed0 <Down_Tick+0x60>
            }
            else{
                DOWN = false;
 ec8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <DOWN>
                break;
 ecc:	01 c0       	rjmp	.+2      	; 0xed0 <Down_Tick+0x60>
            state = DOWN_WAIT;
            break;
    }
    switch(state){
        case DOWN_INIT:
            break;
 ece:	00 00       	nop
                DOWN = false;
                break;
            }
    }
    
    return state;
 ed0:	89 81       	ldd	r24, Y+1	; 0x01
 ed2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 ed4:	0f 90       	pop	r0
 ed6:	0f 90       	pop	r0
 ed8:	df 91       	pop	r29
 eda:	cf 91       	pop	r28
 edc:	08 95       	ret

00000ede <LCD_Menu_Tick>:



int LCD_Menu_Tick(int state){
 ede:	cf 93       	push	r28
 ee0:	df 93       	push	r29
 ee2:	00 d0       	rcall	.+0      	; 0xee4 <LCD_Menu_Tick+0x6>
 ee4:	cd b7       	in	r28, 0x3d	; 61
 ee6:	de b7       	in	r29, 0x3e	; 62
 ee8:	9a 83       	std	Y+2, r25	; 0x02
 eea:	89 83       	std	Y+1, r24	; 0x01
    
    switch(state){ //transitions
 eec:	89 81       	ldd	r24, Y+1	; 0x01
 eee:	9a 81       	ldd	r25, Y+2	; 0x02
 ef0:	81 30       	cpi	r24, 0x01	; 1
 ef2:	91 05       	cpc	r25, r1
 ef4:	51 f0       	breq	.+20     	; 0xf0a <LCD_Menu_Tick+0x2c>
 ef6:	82 30       	cpi	r24, 0x02	; 2
 ef8:	91 05       	cpc	r25, r1
 efa:	09 f1       	breq	.+66     	; 0xf3e <LCD_Menu_Tick+0x60>
 efc:	89 2b       	or	r24, r25
 efe:	21 f5       	brne	.+72     	; 0xf48 <LCD_Menu_Tick+0x6a>
        case LCD_Menu_Init:
            state = LCD_Menu_Start;
 f00:	81 e0       	ldi	r24, 0x01	; 1
 f02:	90 e0       	ldi	r25, 0x00	; 0
 f04:	9a 83       	std	Y+2, r25	; 0x02
 f06:	89 83       	std	Y+1, r24	; 0x01
            break;
 f08:	1f c0       	rjmp	.+62     	; 0xf48 <LCD_Menu_Tick+0x6a>
        case LCD_Menu_Start:
            if(LEFT && RIGHT && DOWN && UP){
 f0a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <LEFT>
 f0e:	88 23       	and	r24, r24
 f10:	89 f0       	breq	.+34     	; 0xf34 <LCD_Menu_Tick+0x56>
 f12:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <RIGHT>
 f16:	88 23       	and	r24, r24
 f18:	69 f0       	breq	.+26     	; 0xf34 <LCD_Menu_Tick+0x56>
 f1a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <DOWN>
 f1e:	88 23       	and	r24, r24
 f20:	49 f0       	breq	.+18     	; 0xf34 <LCD_Menu_Tick+0x56>
 f22:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <UP>
 f26:	88 23       	and	r24, r24
 f28:	29 f0       	breq	.+10     	; 0xf34 <LCD_Menu_Tick+0x56>
                state = LCD_Menu_Songs;
 f2a:	82 e0       	ldi	r24, 0x02	; 2
 f2c:	90 e0       	ldi	r25, 0x00	; 0
 f2e:	9a 83       	std	Y+2, r25	; 0x02
 f30:	89 83       	std	Y+1, r24	; 0x01
                break;
 f32:	0a c0       	rjmp	.+20     	; 0xf48 <LCD_Menu_Tick+0x6a>
            }
            else{
                state = LCD_Menu_Start;
 f34:	81 e0       	ldi	r24, 0x01	; 1
 f36:	90 e0       	ldi	r25, 0x00	; 0
 f38:	9a 83       	std	Y+2, r25	; 0x02
 f3a:	89 83       	std	Y+1, r24	; 0x01
                break;
 f3c:	05 c0       	rjmp	.+10     	; 0xf48 <LCD_Menu_Tick+0x6a>
            }
        case LCD_Menu_Songs:
            state = LCD_Menu_Songs;
 f3e:	82 e0       	ldi	r24, 0x02	; 2
 f40:	90 e0       	ldi	r25, 0x00	; 0
 f42:	9a 83       	std	Y+2, r25	; 0x02
 f44:	89 83       	std	Y+1, r24	; 0x01
            break;     
 f46:	00 00       	nop
    }
    switch(state){ //actions
 f48:	89 81       	ldd	r24, Y+1	; 0x01
 f4a:	9a 81       	ldd	r25, Y+2	; 0x02
 f4c:	81 30       	cpi	r24, 0x01	; 1
 f4e:	91 05       	cpc	r25, r1
 f50:	81 f0       	breq	.+32     	; 0xf72 <LCD_Menu_Tick+0x94>
 f52:	02 97       	sbiw	r24, 0x02	; 2
 f54:	81 f4       	brne	.+32     	; 0xf76 <LCD_Menu_Tick+0x98>
        case LCD_Menu_Init:
            break;
        case LCD_Menu_Start:
            break;
        case LCD_Menu_Songs:
            LCD_ClearScreen();
 f56:	b8 d8       	rcall	.-3728   	; 0xc8 <LCD_ClearScreen>
            LCD_Write_Single_Line(2,1, "ZEN ZEN ZENSE");
 f58:	45 e4       	ldi	r20, 0x45	; 69
 f5a:	51 e0       	ldi	r21, 0x01	; 1
 f5c:	61 e0       	ldi	r22, 0x01	; 1
 f5e:	70 e0       	ldi	r23, 0x00	; 0
 f60:	82 e0       	ldi	r24, 0x02	; 2
 f62:	1a d9       	rcall	.-3532   	; 0x198 <LCD_Write_Single_Line>
            LCD_Write_Single_Line(2,2, "NO");
 f64:	43 e5       	ldi	r20, 0x53	; 83
 f66:	51 e0       	ldi	r21, 0x01	; 1
 f68:	62 e0       	ldi	r22, 0x02	; 2
 f6a:	70 e0       	ldi	r23, 0x00	; 0
 f6c:	82 e0       	ldi	r24, 0x02	; 2
 f6e:	14 d9       	rcall	.-3544   	; 0x198 <LCD_Write_Single_Line>
            break;
 f70:	03 c0       	rjmp	.+6      	; 0xf78 <LCD_Menu_Tick+0x9a>
    }
    switch(state){ //actions
        case LCD_Menu_Init:
            break;
        case LCD_Menu_Start:
            break;
 f72:	00 00       	nop
 f74:	01 c0       	rjmp	.+2      	; 0xf78 <LCD_Menu_Tick+0x9a>
            state = LCD_Menu_Songs;
            break;     
    }
    switch(state){ //actions
        case LCD_Menu_Init:
            break;
 f76:	00 00       	nop
            break;
        
        
    }

    return state;
 f78:	89 81       	ldd	r24, Y+1	; 0x01
 f7a:	9a 81       	ldd	r25, Y+2	; 0x02
 f7c:	0f 90       	pop	r0
 f7e:	0f 90       	pop	r0
 f80:	df 91       	pop	r29
 f82:	cf 91       	pop	r28
 f84:	08 95       	ret

00000f86 <_exit>:
 f86:	f8 94       	cli

00000f88 <__stop_program>:
 f88:	ff cf       	rjmp	.-2      	; 0xf88 <__stop_program>
