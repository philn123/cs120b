
pnguy092_lab11_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000032c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800142  00800142  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000967  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00001bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cb  00000000  00000000  0000280a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 35       	cpi	r26, 0x53	; 83
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	df d0       	rcall	.+446    	; 0x282 <main>
  c4:	31 c1       	rjmp	.+610    	; 0x328 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <_avr_timer_cntcurr>
  dc:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <_avr_timer_cntcurr+0x1>
  e0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_avr_timer_cntcurr+0x2>
  e4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_avr_timer_cntcurr>
 11e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_avr_timer_cntcurr+0x1>
 122:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <_avr_timer_cntcurr+0x2>
 126:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_avr_timer_cntcurr>
 148:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_avr_timer_cntcurr+0x1>
 14c:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <_avr_timer_cntcurr+0x2>
 150:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_avr_timer_cntcurr>
 15e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_avr_timer_cntcurr+0x1>
 162:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <_avr_timer_cntcurr+0x2>
 166:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_avr_timer_cntcurr>
 18c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_avr_timer_cntcurr+0x1>
 190:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <_avr_timer_cntcurr+0x2>
 194:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	10 98       	cbi	0x02, 0	; 2
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	11 9a       	sbi	0x02, 1	; 2
 1d6:	00 00       	nop
 1d8:	11 98       	cbi	0x02, 1	; 2
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	10 9a       	sbi	0x02, 0	; 2
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	11 9a       	sbi	0x02, 1	; 2
 21c:	00 00       	nop
 21e:	11 98       	cbi	0x02, 1	; 2
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <SM1Tick>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	8c 01       	movw	r16, r24
 232:	89 2b       	or	r24, r25
 234:	01 f5       	brne	.+64     	; 0x276 <SM1Tick+0x4e>
 236:	c1 e0       	ldi	r28, 0x01	; 1
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	8c 2f       	mov	r24, r28
 23c:	d5 df       	rcall	.-86     	; 0x1e8 <LCD_Cursor>
 23e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cnt>
 242:	fe 01       	movw	r30, r28
 244:	ec 5f       	subi	r30, 0xFC	; 252
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	e8 0f       	add	r30, r24
 24a:	f1 1d       	adc	r31, r1
 24c:	80 81       	ld	r24, Z
 24e:	e3 df       	rcall	.-58     	; 0x216 <LCD_WriteData>
 250:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cnt>
 254:	9e 01       	movw	r18, r28
 256:	28 0f       	add	r18, r24
 258:	31 1d       	adc	r19, r1
 25a:	2d 33       	cpi	r18, 0x3D	; 61
 25c:	31 05       	cpc	r19, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <SM1Tick+0x3c>
 260:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cnt>
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	c1 31       	cpi	r28, 0x11	; 17
 268:	d1 05       	cpc	r29, r1
 26a:	39 f7       	brne	.-50     	; 0x23a <SM1Tick+0x12>
 26c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cnt>
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cnt>
 276:	c8 01       	movw	r24, r16
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <main>:
    return state;
}

int main(void)
{
    DDRA = 0xFF; PORTA = 0x00;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	81 b9       	out	0x01, r24	; 1
 286:	12 b8       	out	0x02, r1	; 2
    DDRD = 0xFF; PORTD = 0x00;
 288:	8a b9       	out	0x0a, r24	; 10
 28a:	1b b8       	out	0x0b, r1	; 11
    DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 28c:	84 b9       	out	0x04, r24	; 4
 28e:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 290:	80 ef       	ldi	r24, 0xF0	; 240
 292:	87 b9       	out	0x07, r24	; 7
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	88 b9       	out	0x08, r24	; 8
    
    static task task1;
    task *tasks[] = {&task1};
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    
    task1.state = 0;
 298:	e2 e4       	ldi	r30, 0x42	; 66
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	10 82       	st	Z, r1
    task1.period = SM1Tick_period;
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	a0 e0       	ldi	r26, 0x00	; 0
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	81 83       	std	Z+1, r24	; 0x01
 2a8:	92 83       	std	Z+2, r25	; 0x02
 2aa:	a3 83       	std	Z+3, r26	; 0x03
 2ac:	b4 83       	std	Z+4, r27	; 0x04
    task1.elapsedTime = SM1Tick_period;
 2ae:	85 83       	std	Z+5, r24	; 0x05
 2b0:	96 83       	std	Z+6, r25	; 0x06
 2b2:	a7 83       	std	Z+7, r26	; 0x07
 2b4:	b0 87       	std	Z+8, r27	; 0x08
    task1.TickFct = &SM1Tick;
 2b6:	84 e1       	ldi	r24, 0x14	; 20
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	92 87       	std	Z+10, r25	; 0x0a
 2bc:	81 87       	std	Z+9, r24	; 0x09
    
    
    /* Replace with your application code */
    TimerSet(GCD);
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	00 df       	rcall	.-512    	; 0xc8 <TimerSet>
    TimerOn();
 2c8:	10 df       	rcall	.-480    	; 0xea <TimerOn>
    LCD_init();
 2ca:	96 df       	rcall	.-212    	; 0x1f8 <LCD_init>
 2cc:	8a df       	rcall	.-236    	; 0x1e2 <LCD_ClearScreen>
    LCD_ClearScreen();
 2ce:	c2 e4       	ldi	r28, 0x42	; 66
 2d0:	d1 e0       	ldi	r29, 0x01	; 1
    
    while(1) {
        // Scheduler code
        for ( i = 0; i < numTasks; i++ ) {
            // Task is ready to tick
            if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 2d2:	4d 81       	ldd	r20, Y+5	; 0x05
 2d4:	5e 81       	ldd	r21, Y+6	; 0x06
 2d6:	6f 81       	ldd	r22, Y+7	; 0x07
 2d8:	78 85       	ldd	r23, Y+8	; 0x08
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	ab 81       	ldd	r26, Y+3	; 0x03
 2e0:	bc 81       	ldd	r27, Y+4	; 0x04
 2e2:	48 17       	cp	r20, r24
 2e4:	59 07       	cpc	r21, r25
 2e6:	6a 07       	cpc	r22, r26
 2e8:	7b 07       	cpc	r23, r27
 2ea:	60 f0       	brcs	.+24     	; 0x304 <main+0x82>
 2ec:	88 81       	ld	r24, Y
 2ee:	e9 85       	ldd	r30, Y+9	; 0x09
                // Setting next state for task
                tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2f0:	fa 85       	ldd	r31, Y+10	; 0x0a
 2f2:	08 2e       	mov	r0, r24
 2f4:	00 0c       	add	r0, r0
 2f6:	99 0b       	sbc	r25, r25
 2f8:	09 95       	icall
 2fa:	88 83       	st	Y, r24
 2fc:	1d 82       	std	Y+5, r1	; 0x05
 2fe:	1e 82       	std	Y+6, r1	; 0x06
                // Reset the elapsed time for next tick.
                tasks[i]->elapsedTime = 0;
 300:	1f 82       	std	Y+7, r1	; 0x07
 302:	18 86       	std	Y+8, r1	; 0x08
 304:	8d 81       	ldd	r24, Y+5	; 0x05
 306:	9e 81       	ldd	r25, Y+6	; 0x06
            }
            tasks[i]->elapsedTime += 1;
 308:	af 81       	ldd	r26, Y+7	; 0x07
 30a:	b8 85       	ldd	r27, Y+8	; 0x08
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	a1 1d       	adc	r26, r1
 310:	b1 1d       	adc	r27, r1
 312:	8d 83       	std	Y+5, r24	; 0x05
 314:	9e 83       	std	Y+6, r25	; 0x06
 316:	af 83       	std	Y+7, r26	; 0x07
 318:	b8 87       	std	Y+8, r27	; 0x08
 31a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TimerFlag>
        }
        while(!TimerFlag);
 31e:	88 23       	and	r24, r24
 320:	e1 f3       	breq	.-8      	; 0x31a <main+0x98>
 322:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <TimerFlag>
        TimerFlag = 0;
 326:	d5 cf       	rjmp	.-86     	; 0x2d2 <main+0x50>

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
    }
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
