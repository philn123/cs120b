
pnguy092_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	66 c0       	rjmp	.+204    	; 0x168 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF;
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
  b2:	82 e2       	ldi	r24, 0x22	; 34
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF;
  bc:	84 e2       	ldi	r24, 0x24	; 36
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	10 82       	st	Z, r1
  c4:	85 e2       	ldi	r24, 0x25	; 37
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
	DDRC = 0x00; PORTC = 0x00;
  ce:	87 e2       	ldi	r24, 0x27	; 39
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	10 82       	st	Z, r1
	
	unsigned char count = 0x00;
  de:	19 82       	std	Y+1, r1	; 0x01
	unsigned char temp = 0x00;
  e0:	1c 82       	std	Y+4, r1	; 0x04
	
	while(1){
	
		for(unsigned char i = 0; i <0x08; i++){
  e2:	1a 82       	std	Y+2, r1	; 0x02
  e4:	19 c0       	rjmp	.+50     	; 0x118 <main+0x7a>
			temp = (PINA >> i) & 0x01;
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2a 81       	ldd	r18, Y+2	; 0x02
  f4:	22 2f       	mov	r18, r18
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <main+0x60>
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	2a 95       	dec	r18
 100:	e2 f7       	brpl	.-8      	; 0xfa <main+0x5c>
 102:	81 70       	andi	r24, 0x01	; 1
 104:	8c 83       	std	Y+4, r24	; 0x04
			if(temp == 0x01){
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x74>
				count++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	89 83       	std	Y+1, r24	; 0x01
	unsigned char count = 0x00;
	unsigned char temp = 0x00;
	
	while(1){
	
		for(unsigned char i = 0; i <0x08; i++){
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	20 f3       	brcs	.-56     	; 0xe6 <main+0x48>
			if(temp == 0x01){
				count++;
			}
			
		}	
		for(unsigned char j = 0; j < 0x08; j++){
 11e:	1b 82       	std	Y+3, r1	; 0x03
 120:	19 c0       	rjmp	.+50     	; 0x154 <main+0xb6>
			temp = (PINB >> j) & 0x01;
 122:	83 e2       	ldi	r24, 0x23	; 35
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2b 81       	ldd	r18, Y+3	; 0x03
 130:	22 2f       	mov	r18, r18
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <main+0x9c>
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <main+0x98>
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	8c 83       	std	Y+4, r24	; 0x04
			if(temp == 0x01){
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	19 f4       	brne	.+6      	; 0x14e <main+0xb0>
				count++;
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	89 83       	std	Y+1, r24	; 0x01
			if(temp == 0x01){
				count++;
			}
			
		}	
		for(unsigned char j = 0; j < 0x08; j++){
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	8b 83       	std	Y+3, r24	; 0x03
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	20 f3       	brcs	.-56     	; 0x122 <main+0x84>
				count++;
			}
			
		}
		
		PORTC = count;
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
		count = 0;
 164:	19 82       	std	Y+1, r1	; 0x01
		
		
	}
 166:	bd cf       	rjmp	.-134    	; 0xe2 <main+0x44>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
