
pnguy092_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000390  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	00 00       	nop
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	00 00       	nop
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
  66:	00 00       	nop
  68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
  72:	00 00       	nop
  74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
  76:	00 00       	nop
  78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
  82:	00 00       	nop
  84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
  86:	00 00       	nop
  88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	97 00       	.word	0x0097	; ????
  8e:	9b 00       	.word	0x009b	; ????
  90:	ad 00       	.word	0x00ad	; ????
  92:	bf 00       	.word	0x00bf	; ????
  94:	d1 00       	.word	0x00d1	; ????
  96:	07 01       	movw	r0, r14
  98:	3c 01       	movw	r6, r24
  9a:	83 01       	movw	r16, r6
  9c:	64 01       	movw	r12, r8
  9e:	69 01       	movw	r12, r18
  a0:	72 01       	movw	r14, r4
  a2:	83 01       	movw	r16, r6
  a4:	83 01       	movw	r16, r6
  a6:	78 01       	movw	r14, r16

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a1 30       	cpi	r26, 0x01	; 1
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	02 d0       	rcall	.+4      	; 0xca <main>
  c6:	2d c1       	rjmp	.+602    	; 0x322 <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
enum States{INIT, START, WAIT, ONE, FIRST, SECOND, WAIT2} state;
void Tick();


int main(void)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    DDRA = 0x00; PORTA = 0xFF;
  d2:	81 e2       	ldi	r24, 0x21	; 33
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
  da:	82 e2       	ldi	r24, 0x22	; 34
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    DDRC = 0xFF; PORTC = 0x00;
  e4:	87 e2       	ldi	r24, 0x27	; 39
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
    while (1) 
    {
        Tick();
  f6:	01 d0       	rcall	.+2      	; 0xfa <Tick>
    }
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x2c>

000000fa <Tick>:
}
void Tick(){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
    switch(state){
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	09 2e       	mov	r0, r25
 10c:	00 0c       	add	r0, r0
 10e:	aa 0b       	sbc	r26, r26
 110:	bb 0b       	sbc	r27, r27
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	26 e0       	ldi	r18, 0x06	; 6
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	84 1b       	sub	r24, r20
 11c:	95 0b       	sbc	r25, r21
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <Tick+0x2c>
 124:	bb c0       	rjmp	.+374    	; 0x29c <Tick+0x1a2>
 126:	8a 5b       	subi	r24, 0xBA	; 186
 128:	9f 4f       	sbci	r25, 0xFF	; 255
 12a:	fc 01       	movw	r30, r24
 12c:	f1 c0       	rjmp	.+482    	; 0x310 <__tablejump2__>
        case INIT:
            state = START;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 134:	b4 c0       	rjmp	.+360    	; 0x29e <Tick+0x1a4>
        case START:
            if((PINA & 0x01) == 0x01){
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	81 70       	andi	r24, 0x01	; 1
 144:	99 27       	eor	r25, r25
 146:	89 2b       	or	r24, r25
 148:	21 f0       	breq	.+8      	; 0x152 <Tick+0x58>
                state = ONE;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = START;
            }
            break;
 150:	a6 c0       	rjmp	.+332    	; 0x29e <Tick+0x1a4>
        case START:
            if((PINA & 0x01) == 0x01){
                state = ONE;
            }
            else{
                state = START;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 158:	a2 c0       	rjmp	.+324    	; 0x29e <Tick+0x1a4>
        case WAIT:
            if((PINA & 0x01) == 0x01){
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 70       	andi	r24, 0x01	; 1
 168:	99 27       	eor	r25, r25
 16a:	89 2b       	or	r24, r25
 16c:	21 f0       	breq	.+8      	; 0x176 <Tick+0x7c>
                state = WAIT;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = FIRST;
            }
            break;
 174:	94 c0       	rjmp	.+296    	; 0x29e <Tick+0x1a4>
        case WAIT:
            if((PINA & 0x01) == 0x01){
                state = WAIT;
            }
            else{
                state = FIRST;
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 17c:	90 c0       	rjmp	.+288    	; 0x29e <Tick+0x1a4>
        case ONE:
            if((PINA & 0x01) == 0x00){
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	99 27       	eor	r25, r25
 18e:	89 2b       	or	r24, r25
 190:	21 f4       	brne	.+8      	; 0x19a <Tick+0xa0>
                state = WAIT;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            else{
                state = ONE;
            }
            break;
 198:	82 c0       	rjmp	.+260    	; 0x29e <Tick+0x1a4>
        case ONE:
            if((PINA & 0x01) == 0x00){
                state = WAIT;
            }
            else{
                state = ONE;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 1a0:	7e c0       	rjmp	.+252    	; 0x29e <Tick+0x1a4>
        case FIRST:
            if(PORTC < 63 && (PINA & 0x01) == 0x01){
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 33       	cpi	r24, 0x3F	; 63
 1ac:	b8 f4       	brcc	.+46     	; 0x1dc <Tick+0xe2>
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	81 70       	andi	r24, 0x01	; 1
 1bc:	99 27       	eor	r25, r25
 1be:	89 2b       	or	r24, r25
 1c0:	69 f0       	breq	.+26     	; 0x1dc <Tick+0xe2>
                PORTC = PORTC * 2;
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	28 e2       	ldi	r18, 0x28	; 40
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	22 0f       	add	r18, r18
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
                state = WAIT;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1da:	18 c0       	rjmp	.+48     	; 0x20c <Tick+0x112>
            }
            else if(PORTC >= 63 && (PINA & 0x01) == 0x01){
 1dc:	88 e2       	ldi	r24, 0x28	; 40
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 33       	cpi	r24, 0x3F	; 63
 1e6:	70 f0       	brcs	.+28     	; 0x204 <Tick+0x10a>
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	99 27       	eor	r25, r25
 1f8:	89 2b       	or	r24, r25
 1fa:	21 f0       	breq	.+8      	; 0x204 <Tick+0x10a>
                state = SECOND;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 202:	04 c0       	rjmp	.+8      	; 0x20c <Tick+0x112>
            }
            else{
                state = FIRST;
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 20a:	49 c0       	rjmp	.+146    	; 0x29e <Tick+0x1a4>
 20c:	48 c0       	rjmp	.+144    	; 0x29e <Tick+0x1a4>
        case SECOND:
            if(PORTC > 0 && (PINA & 0x01) == 0x01){
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	88 23       	and	r24, r24
 218:	b9 f0       	breq	.+46     	; 0x248 <Tick+0x14e>
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	81 70       	andi	r24, 0x01	; 1
 228:	99 27       	eor	r25, r25
 22a:	89 2b       	or	r24, r25
 22c:	69 f0       	breq	.+26     	; 0x248 <Tick+0x14e>
                PORTC = PORTC / 2;
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	28 e2       	ldi	r18, 0x28	; 40
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	26 95       	lsr	r18
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
                state = WAIT2;
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 246:	17 c0       	rjmp	.+46     	; 0x276 <Tick+0x17c>
            }
            else if(PORTC == 0 && (PINA & 0x01) == 0x01){
 248:	88 e2       	ldi	r24, 0x28	; 40
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	69 f4       	brne	.+26     	; 0x26e <Tick+0x174>
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	81 70       	andi	r24, 0x01	; 1
 262:	99 27       	eor	r25, r25
 264:	89 2b       	or	r24, r25
 266:	19 f0       	breq	.+6      	; 0x26e <Tick+0x174>
                state = INIT;
 268:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 26c:	04 c0       	rjmp	.+8      	; 0x276 <Tick+0x17c>
            }
            else{
                state = SECOND;
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 274:	14 c0       	rjmp	.+40     	; 0x29e <Tick+0x1a4>
 276:	13 c0       	rjmp	.+38     	; 0x29e <Tick+0x1a4>
        case WAIT2:
            if((PINA & 0x01) == 0x01){
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	81 70       	andi	r24, 0x01	; 1
 286:	99 27       	eor	r25, r25
 288:	89 2b       	or	r24, r25
 28a:	21 f0       	breq	.+8      	; 0x294 <Tick+0x19a>
                state = WAIT2;
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
                
            }
            else{
                state = SECOND;
            }
            break;
 292:	05 c0       	rjmp	.+10     	; 0x29e <Tick+0x1a4>
            if((PINA & 0x01) == 0x01){
                state = WAIT2;
                
            }
            else{
                state = SECOND;
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 29a:	01 c0       	rjmp	.+2      	; 0x29e <Tick+0x1a4>
        default:
            break;
 29c:	00 00       	nop
    }
    
    switch(state){
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a2:	88 2f       	mov	r24, r24
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	09 2e       	mov	r0, r25
 2a8:	00 0c       	add	r0, r0
 2aa:	aa 0b       	sbc	r26, r26
 2ac:	bb 0b       	sbc	r27, r27
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	26 e0       	ldi	r18, 0x06	; 6
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	84 1b       	sub	r24, r20
 2b8:	95 0b       	sbc	r25, r21
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	08 f1       	brcs	.+66     	; 0x302 <Tick+0x208>
 2c0:	83 5b       	subi	r24, 0xB3	; 179
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	fc 01       	movw	r30, r24
 2c6:	24 c0       	rjmp	.+72     	; 0x310 <__tablejump2__>
        case INIT:
            break;
        case START:
            PORTC = 0x00;
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	10 82       	st	Z, r1
            break;
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <Tick+0x20e>
        case WAIT:
            PORTC = PORTC;
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	28 e2       	ldi	r18, 0x28	; 40
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
            break;
 2e2:	12 c0       	rjmp	.+36     	; 0x308 <Tick+0x20e>
        case ONE:
            PORTC = 1;
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
            break;
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <Tick+0x20e>
        case FIRST:
            break;
        case SECOND:
            break;
        case WAIT2:
            PORTC = PORTC;
 2f0:	88 e2       	ldi	r24, 0x28	; 40
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	28 e2       	ldi	r18, 0x28	; 40
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
            break;
 300:	03 c0       	rjmp	.+6      	; 0x308 <Tick+0x20e>
        default:
            break;
 302:	00 00       	nop
 304:	01 c0       	rjmp	.+2      	; 0x308 <Tick+0x20e>
            break;
    }
    
    switch(state){
        case INIT:
            break;
 306:	00 00       	nop
        default:
            break;
    }
    
    
}
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <__tablejump2__>:
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	00 24       	eor	r0, r0
 316:	00 1c       	adc	r0, r0
 318:	0b be       	out	0x3b, r0	; 59
 31a:	07 90       	elpm	r0, Z+
 31c:	f6 91       	elpm	r31, Z
 31e:	e0 2d       	mov	r30, r0
 320:	09 94       	ijmp

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
